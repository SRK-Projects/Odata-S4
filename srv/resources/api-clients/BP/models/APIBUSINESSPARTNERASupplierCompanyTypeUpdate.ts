/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BillExLimit } from './BillExLimit';
import {
    BillExLimitFromJSON,
    BillExLimitFromJSONTyped,
    BillExLimitToJSON,
} from './BillExLimit';
import type { CheckCashingTime } from './CheckCashingTime';
import {
    CheckCashingTimeFromJSON,
    CheckCashingTimeFromJSONTyped,
    CheckCashingTimeToJSON,
} from './CheckCashingTime';

/**
 * 
 * @export
 * @interface APIBUSINESSPARTNERASupplierCompanyTypeUpdate
 */
export interface APIBUSINESSPARTNERASupplierCompanyTypeUpdate {
    /**
     * Authorization Group
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    authorizationGroup?: string | null;
    /**
     * Block Key for Payment
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    paymentBlockingReason?: string | null;
    /**
     * Posting block for company code
     * @type {boolean}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    supplierIsBlockedForPosting?: boolean | null;
    /**
     * Accounting Clerk Abbreviation
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    accountingClerk?: string | null;
    /**
     * Accounting clerk's fax number at the customer/vendor
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    accountingClerkFaxNumber?: string | null;
    /**
     * Accounting clerk's telephone number at business partner
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    accountingClerkPhoneNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    supplierClerk?: string | null;
    /**
     * Internet address of partner company clerk
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    supplierClerkURL?: string | null;
    /**
     * List of Respected Payment Methods
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    paymentMethodsList?: string | null;
    /**
     * 
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    paymentReason?: string | null;
    /**
     * Key for Terms of Payment
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    paymentTerms?: string | null;
    /**
     * Indicator: Clearing between customer and vendor?
     * @type {boolean}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    clearCustomerSupplier?: boolean | null;
    /**
     * Indicator: Local Processing?
     * @type {boolean}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    isToBeLocallyProcessed?: boolean | null;
    /**
     * Indicator: Pay All Items Separately?
     * @type {boolean}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    itemIsToBePaidSeparately?: boolean | null;
    /**
     * Indicator: Send Payment Advices by EDI
     * @type {boolean}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    paymentIsToBeSentByEDI?: boolean | null;
    /**
     * Short Key for a House Bank
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    houseBank?: string | null;
    /**
     * 
     * @type {CheckCashingTime}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    checkPaidDurationInDays?: CheckCashingTime | null;
    /**
     * Currency Key
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    currency?: string | null;
    /**
     * 
     * @type {BillExLimit}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    billOfExchLmtAmtInCoCodeCrcy?: BillExLimit | null;
    /**
     * Our account number with the vendor
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    supplierClerkIDBySupplier?: string | null;
    /**
     * Reconciliation Account in General Ledger
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    reconciliationAccount?: string | null;
    /**
     * 
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    interestCalculationCode?: string | null;
    /**
     * Key Date of Last Interest Calculation
     * @type {Date}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    interestCalculationDate?: Date | null;
    /**
     * Interest Calculation Frequency in Months
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    intrstCalcFrequencyInMonths?: string | null;
    /**
     * Head Office Account Number
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    supplierHeadOffice?: string | null;
    /**
     * Account number of the alternative payee
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    alternativePayee?: string | null;
    /**
     * Key for Sorting According to Assignment Numbers
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    layoutSortingRule?: string | null;
    /**
     * Tolerance Group for Business Partner/G/L Account
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    aPARToleranceGroup?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    supplierCertificationDate?: Date | null;
    /**
     * Memo
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    supplierAccountNote?: string | null;
    /**
     * Withholding Tax Country/Region Key
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    withholdingTaxCountry?: string | null;
    /**
     * Deletion Flag for Master Record (Company Code Level)
     * @type {boolean}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    deletionIndicator?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    cashPlanningGroup?: string | null;
    /**
     * Check Flag for Double Invoices or Credit Memos
     * @type {boolean}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    isToBeCheckedForDuplicates?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    minorityGroup?: string | null;
    /**
     * Supplier Account Group
     * @type {string}
     * @memberof APIBUSINESSPARTNERASupplierCompanyTypeUpdate
     */
    supplierAccountGroup?: string | null;
}

/**
 * Check if a given object implements the APIBUSINESSPARTNERASupplierCompanyTypeUpdate interface.
 */
export function instanceOfAPIBUSINESSPARTNERASupplierCompanyTypeUpdate(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function APIBUSINESSPARTNERASupplierCompanyTypeUpdateFromJSON(json: any): APIBUSINESSPARTNERASupplierCompanyTypeUpdate {
    return APIBUSINESSPARTNERASupplierCompanyTypeUpdateFromJSONTyped(json, false);
}

export function APIBUSINESSPARTNERASupplierCompanyTypeUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): APIBUSINESSPARTNERASupplierCompanyTypeUpdate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authorizationGroup': !exists(json, 'AuthorizationGroup') ? undefined : json['AuthorizationGroup'],
        'paymentBlockingReason': !exists(json, 'PaymentBlockingReason') ? undefined : json['PaymentBlockingReason'],
        'supplierIsBlockedForPosting': !exists(json, 'SupplierIsBlockedForPosting') ? undefined : json['SupplierIsBlockedForPosting'],
        'accountingClerk': !exists(json, 'AccountingClerk') ? undefined : json['AccountingClerk'],
        'accountingClerkFaxNumber': !exists(json, 'AccountingClerkFaxNumber') ? undefined : json['AccountingClerkFaxNumber'],
        'accountingClerkPhoneNumber': !exists(json, 'AccountingClerkPhoneNumber') ? undefined : json['AccountingClerkPhoneNumber'],
        'supplierClerk': !exists(json, 'SupplierClerk') ? undefined : json['SupplierClerk'],
        'supplierClerkURL': !exists(json, 'SupplierClerkURL') ? undefined : json['SupplierClerkURL'],
        'paymentMethodsList': !exists(json, 'PaymentMethodsList') ? undefined : json['PaymentMethodsList'],
        'paymentReason': !exists(json, 'PaymentReason') ? undefined : json['PaymentReason'],
        'paymentTerms': !exists(json, 'PaymentTerms') ? undefined : json['PaymentTerms'],
        'clearCustomerSupplier': !exists(json, 'ClearCustomerSupplier') ? undefined : json['ClearCustomerSupplier'],
        'isToBeLocallyProcessed': !exists(json, 'IsToBeLocallyProcessed') ? undefined : json['IsToBeLocallyProcessed'],
        'itemIsToBePaidSeparately': !exists(json, 'ItemIsToBePaidSeparately') ? undefined : json['ItemIsToBePaidSeparately'],
        'paymentIsToBeSentByEDI': !exists(json, 'PaymentIsToBeSentByEDI') ? undefined : json['PaymentIsToBeSentByEDI'],
        'houseBank': !exists(json, 'HouseBank') ? undefined : json['HouseBank'],
        'checkPaidDurationInDays': !exists(json, 'CheckPaidDurationInDays') ? undefined : CheckCashingTimeFromJSON(json['CheckPaidDurationInDays']),
        'currency': !exists(json, 'Currency') ? undefined : json['Currency'],
        'billOfExchLmtAmtInCoCodeCrcy': !exists(json, 'BillOfExchLmtAmtInCoCodeCrcy') ? undefined : BillExLimitFromJSON(json['BillOfExchLmtAmtInCoCodeCrcy']),
        'supplierClerkIDBySupplier': !exists(json, 'SupplierClerkIDBySupplier') ? undefined : json['SupplierClerkIDBySupplier'],
        'reconciliationAccount': !exists(json, 'ReconciliationAccount') ? undefined : json['ReconciliationAccount'],
        'interestCalculationCode': !exists(json, 'InterestCalculationCode') ? undefined : json['InterestCalculationCode'],
        'interestCalculationDate': !exists(json, 'InterestCalculationDate') ? undefined : (json['InterestCalculationDate'] === null ? null : new Date(json['InterestCalculationDate'])),
        'intrstCalcFrequencyInMonths': !exists(json, 'IntrstCalcFrequencyInMonths') ? undefined : json['IntrstCalcFrequencyInMonths'],
        'supplierHeadOffice': !exists(json, 'SupplierHeadOffice') ? undefined : json['SupplierHeadOffice'],
        'alternativePayee': !exists(json, 'AlternativePayee') ? undefined : json['AlternativePayee'],
        'layoutSortingRule': !exists(json, 'LayoutSortingRule') ? undefined : json['LayoutSortingRule'],
        'aPARToleranceGroup': !exists(json, 'APARToleranceGroup') ? undefined : json['APARToleranceGroup'],
        'supplierCertificationDate': !exists(json, 'SupplierCertificationDate') ? undefined : (json['SupplierCertificationDate'] === null ? null : new Date(json['SupplierCertificationDate'])),
        'supplierAccountNote': !exists(json, 'SupplierAccountNote') ? undefined : json['SupplierAccountNote'],
        'withholdingTaxCountry': !exists(json, 'WithholdingTaxCountry') ? undefined : json['WithholdingTaxCountry'],
        'deletionIndicator': !exists(json, 'DeletionIndicator') ? undefined : json['DeletionIndicator'],
        'cashPlanningGroup': !exists(json, 'CashPlanningGroup') ? undefined : json['CashPlanningGroup'],
        'isToBeCheckedForDuplicates': !exists(json, 'IsToBeCheckedForDuplicates') ? undefined : json['IsToBeCheckedForDuplicates'],
        'minorityGroup': !exists(json, 'MinorityGroup') ? undefined : json['MinorityGroup'],
        'supplierAccountGroup': !exists(json, 'SupplierAccountGroup') ? undefined : json['SupplierAccountGroup'],
    };
}

export function APIBUSINESSPARTNERASupplierCompanyTypeUpdateToJSON(value?: APIBUSINESSPARTNERASupplierCompanyTypeUpdate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'AuthorizationGroup': value.authorizationGroup,
        'PaymentBlockingReason': value.paymentBlockingReason,
        'SupplierIsBlockedForPosting': value.supplierIsBlockedForPosting,
        'AccountingClerk': value.accountingClerk,
        'AccountingClerkFaxNumber': value.accountingClerkFaxNumber,
        'AccountingClerkPhoneNumber': value.accountingClerkPhoneNumber,
        'SupplierClerk': value.supplierClerk,
        'SupplierClerkURL': value.supplierClerkURL,
        'PaymentMethodsList': value.paymentMethodsList,
        'PaymentReason': value.paymentReason,
        'PaymentTerms': value.paymentTerms,
        'ClearCustomerSupplier': value.clearCustomerSupplier,
        'IsToBeLocallyProcessed': value.isToBeLocallyProcessed,
        'ItemIsToBePaidSeparately': value.itemIsToBePaidSeparately,
        'PaymentIsToBeSentByEDI': value.paymentIsToBeSentByEDI,
        'HouseBank': value.houseBank,
        'CheckPaidDurationInDays': CheckCashingTimeToJSON(value.checkPaidDurationInDays),
        'Currency': value.currency,
        'BillOfExchLmtAmtInCoCodeCrcy': BillExLimitToJSON(value.billOfExchLmtAmtInCoCodeCrcy),
        'SupplierClerkIDBySupplier': value.supplierClerkIDBySupplier,
        'ReconciliationAccount': value.reconciliationAccount,
        'InterestCalculationCode': value.interestCalculationCode,
        'InterestCalculationDate': value.interestCalculationDate === undefined ? undefined : (value.interestCalculationDate === null ? null : value.interestCalculationDate.toISOString().substring(0,10)),
        'IntrstCalcFrequencyInMonths': value.intrstCalcFrequencyInMonths,
        'SupplierHeadOffice': value.supplierHeadOffice,
        'AlternativePayee': value.alternativePayee,
        'LayoutSortingRule': value.layoutSortingRule,
        'APARToleranceGroup': value.aPARToleranceGroup,
        'SupplierCertificationDate': value.supplierCertificationDate === undefined ? undefined : (value.supplierCertificationDate === null ? null : value.supplierCertificationDate.toISOString().substring(0,10)),
        'SupplierAccountNote': value.supplierAccountNote,
        'WithholdingTaxCountry': value.withholdingTaxCountry,
        'DeletionIndicator': value.deletionIndicator,
        'CashPlanningGroup': value.cashPlanningGroup,
        'IsToBeCheckedForDuplicates': value.isToBeCheckedForDuplicates,
        'MinorityGroup': value.minorityGroup,
        'SupplierAccountGroup': value.supplierAccountGroup,
    };
}

