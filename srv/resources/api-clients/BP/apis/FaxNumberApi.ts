/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERAAddressFaxNumberType,
  APIBUSINESSPARTNERAAddressFaxNumberTypeCreate,
  APIBUSINESSPARTNERAAddressFaxNumberTypeUpdate,
  CollectionOfAAddressFaxNumberType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERAAddressFaxNumberTypeFromJSON,
    APIBUSINESSPARTNERAAddressFaxNumberTypeToJSON,
    APIBUSINESSPARTNERAAddressFaxNumberTypeCreateFromJSON,
    APIBUSINESSPARTNERAAddressFaxNumberTypeCreateToJSON,
    APIBUSINESSPARTNERAAddressFaxNumberTypeUpdateFromJSON,
    APIBUSINESSPARTNERAAddressFaxNumberTypeUpdateToJSON,
    CollectionOfAAddressFaxNumberTypeFromJSON,
    CollectionOfAAddressFaxNumberTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface AAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRequest {
    addressID: string;
    person: string;
    ordinalNumber: string;
}

export interface AAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRequest {
    addressID: string;
    person: string;
    ordinalNumber: string;
    $select?: Set<AAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetSelectEnum>;
}

export interface AAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRequest {
    addressID: string;
    person: string;
    ordinalNumber: string;
    aPIBUSINESSPARTNERAAddressFaxNumberTypeUpdate: APIBUSINESSPARTNERAAddressFaxNumberTypeUpdate;
}

export interface AAddressFaxNumberGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<AAddressFaxNumberGetOrderbyEnum>;
    $select?: Set<AAddressFaxNumberGetSelectEnum>;
}

export interface AAddressFaxNumberPostRequest {
    aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate: APIBUSINESSPARTNERAAddressFaxNumberTypeCreate;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetOrderbyEnum>;
    $select?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetSelectEnum>;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPostRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate: APIBUSINESSPARTNERAAddressFaxNumberTypeCreate;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetRequest {
    businessPartner: string;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetSelectEnum>;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostRequest {
    businessPartner: string;
    addressID: string;
    aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate: APIBUSINESSPARTNERAAddressFaxNumberTypeCreate;
}

/**
 * 
 */
export class FaxNumberApi extends runtime.BaseAPI {

    /**
     * Deletes business partner fax address data of the record identified by AddressID, Person and OrdinalNumber.
     * Deletes fax address record by key field.
     */
    async aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRaw(requestParameters: AAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete.');
        }

        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete.');
        }

        if (requestParameters.ordinalNumber === null || requestParameters.ordinalNumber === undefined) {
            throw new runtime.RequiredError('ordinalNumber','Required parameter requestParameters.ordinalNumber was null or undefined when calling aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_AddressFaxNumber(AddressID='{AddressID}',Person='{Person}',OrdinalNumber='{OrdinalNumber}')`.replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"Person"}}`, encodeURIComponent(String(requestParameters.person))).replace(`{${"OrdinalNumber"}}`, encodeURIComponent(String(requestParameters.ordinalNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes business partner fax address data of the record identified by AddressID, Person and OrdinalNumber.
     * Deletes fax address record by key field.
     */
    async aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete(requestParameters: AAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves fax address records by AddressID, Person, and OrdinalNumber field.
     * Retrieves fax address records by key fields.
     */
    async aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRaw(requestParameters: AAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressFaxNumberType>> {
        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet.');
        }

        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet.');
        }

        if (requestParameters.ordinalNumber === null || requestParameters.ordinalNumber === undefined) {
            throw new runtime.RequiredError('ordinalNumber','Required parameter requestParameters.ordinalNumber was null or undefined when calling aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_AddressFaxNumber(AddressID='{AddressID}',Person='{Person}',OrdinalNumber='{OrdinalNumber}')`.replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"Person"}}`, encodeURIComponent(String(requestParameters.person))).replace(`{${"OrdinalNumber"}}`, encodeURIComponent(String(requestParameters.ordinalNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressFaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves fax address records by AddressID, Person, and OrdinalNumber field.
     * Retrieves fax address records by key fields.
     */
    async aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet(requestParameters: AAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressFaxNumberType> {
        const response = await this.aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates business partner fax address data of the record identified by AddressID, Person, and OrdinalNumber.
     * Updates fax address record by key field.
     */
    async aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRaw(requestParameters: AAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch.');
        }

        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch.');
        }

        if (requestParameters.ordinalNumber === null || requestParameters.ordinalNumber === undefined) {
            throw new runtime.RequiredError('ordinalNumber','Required parameter requestParameters.ordinalNumber was null or undefined when calling aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressFaxNumberTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeUpdate was null or undefined when calling aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_AddressFaxNumber(AddressID='{AddressID}',Person='{Person}',OrdinalNumber='{OrdinalNumber}')`.replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"Person"}}`, encodeURIComponent(String(requestParameters.person))).replace(`{${"OrdinalNumber"}}`, encodeURIComponent(String(requestParameters.ordinalNumber))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressFaxNumberTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates business partner fax address data of the record identified by AddressID, Person, and OrdinalNumber.
     * Updates fax address record by key field.
     */
    async aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch(requestParameters: AAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all the fax address data linked to all the business partner address records in the system
     * Retrieves fax address data linked to business partner address.
     */
    async aAddressFaxNumberGetRaw(requestParameters: AAddressFaxNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressFaxNumberType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_AddressFaxNumber`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressFaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the fax address data linked to all the business partner address records in the system
     * Retrieves fax address data linked to business partner address.
     */
    async aAddressFaxNumberGet(requestParameters: AAddressFaxNumberGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressFaxNumberType> {
        const response = await this.aAddressFaxNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new fax address record for the existing business partner address record. Multiple fax can be linked to an address record.
     * Creates a new fax address data for the existing business partner address.
     */
    async aAddressFaxNumberPostRaw(requestParameters: AAddressFaxNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressFaxNumberType>> {
        if (requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate was null or undefined when calling aAddressFaxNumberPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_AddressFaxNumber`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressFaxNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressFaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new fax address record for the existing business partner address record. Multiple fax can be linked to an address record.
     * Creates a new fax address data for the existing business partner address.
     */
    async aAddressFaxNumberPost(requestParameters: AAddressFaxNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressFaxNumberType> {
        const response = await this.aAddressFaxNumberPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the fax address data linked to all the business partner address records in the system
     * Retrieves fax address data linked to business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressFaxNumberType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGet.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGet.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGet.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_FaxNumber`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressFaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the fax address data linked to all the business partner address records in the system
     * Retrieves fax address data linked to business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGet(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressFaxNumberType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new fax address record for the existing business partner address record. Multiple fax can be linked to an address record.
     * Creates a new fax address data for the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPostRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressFaxNumberType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPost.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPost.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPost.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_FaxNumber`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressFaxNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressFaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new fax address record for the existing business partner address record. Multiple fax can be linked to an address record.
     * Creates a new fax address data for the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPost(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressFaxNumberType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the fax address data linked to all the business partner address records in the system
     * Retrieves fax address data linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressFaxNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_FaxNumber`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressFaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the fax address data linked to all the business partner address records in the system
     * Retrieves fax address data linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressFaxNumberType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new fax address record for the existing business partner address record. Multiple fax can be linked to an address record.
     * Creates a new fax address data for the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressFaxNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_FaxNumber`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressFaxNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressFaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new fax address record for the existing business partner address record. Multiple fax can be linked to an address record.
     * Creates a new fax address data for the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressFaxNumberType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    IsDefaultFaxNumber: 'IsDefaultFaxNumber',
    FaxCountry: 'FaxCountry',
    FaxNumber: 'FaxNumber',
    FaxNumberExtension: 'FaxNumberExtension',
    InternationalFaxNumber: 'InternationalFaxNumber',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type AAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetSelectEnum = typeof AAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetSelectEnum[keyof typeof AAddressFaxNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetSelectEnum];
/**
 * @export
 */
export const AAddressFaxNumberGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    IsDefaultFaxNumber: 'IsDefaultFaxNumber',
    IsDefaultFaxNumberDesc: 'IsDefaultFaxNumber desc',
    FaxCountry: 'FaxCountry',
    FaxCountryDesc: 'FaxCountry desc',
    FaxNumber: 'FaxNumber',
    FaxNumberDesc: 'FaxNumber desc',
    FaxNumberExtension: 'FaxNumberExtension',
    FaxNumberExtensionDesc: 'FaxNumberExtension desc',
    InternationalFaxNumber: 'InternationalFaxNumber',
    InternationalFaxNumberDesc: 'InternationalFaxNumber desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc'
} as const;
export type AAddressFaxNumberGetOrderbyEnum = typeof AAddressFaxNumberGetOrderbyEnum[keyof typeof AAddressFaxNumberGetOrderbyEnum];
/**
 * @export
 */
export const AAddressFaxNumberGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    IsDefaultFaxNumber: 'IsDefaultFaxNumber',
    FaxCountry: 'FaxCountry',
    FaxNumber: 'FaxNumber',
    FaxNumberExtension: 'FaxNumberExtension',
    InternationalFaxNumber: 'InternationalFaxNumber',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type AAddressFaxNumberGetSelectEnum = typeof AAddressFaxNumberGetSelectEnum[keyof typeof AAddressFaxNumberGetSelectEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    IsDefaultFaxNumber: 'IsDefaultFaxNumber',
    IsDefaultFaxNumberDesc: 'IsDefaultFaxNumber desc',
    FaxCountry: 'FaxCountry',
    FaxCountryDesc: 'FaxCountry desc',
    FaxNumber: 'FaxNumber',
    FaxNumberDesc: 'FaxNumber desc',
    FaxNumberExtension: 'FaxNumberExtension',
    FaxNumberExtensionDesc: 'FaxNumberExtension desc',
    InternationalFaxNumber: 'InternationalFaxNumber',
    InternationalFaxNumberDesc: 'InternationalFaxNumber desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetOrderbyEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetOrderbyEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetOrderbyEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    IsDefaultFaxNumber: 'IsDefaultFaxNumber',
    FaxCountry: 'FaxCountry',
    FaxNumber: 'FaxNumber',
    FaxNumberExtension: 'FaxNumberExtension',
    InternationalFaxNumber: 'InternationalFaxNumber',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetSelectEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetSelectEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    IsDefaultFaxNumber: 'IsDefaultFaxNumber',
    IsDefaultFaxNumberDesc: 'IsDefaultFaxNumber desc',
    FaxCountry: 'FaxCountry',
    FaxCountryDesc: 'FaxCountry desc',
    FaxNumber: 'FaxNumber',
    FaxNumberDesc: 'FaxNumber desc',
    FaxNumberExtension: 'FaxNumberExtension',
    FaxNumberExtensionDesc: 'FaxNumberExtension desc',
    InternationalFaxNumber: 'InternationalFaxNumber',
    InternationalFaxNumberDesc: 'InternationalFaxNumber desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetOrderbyEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetOrderbyEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    IsDefaultFaxNumber: 'IsDefaultFaxNumber',
    FaxCountry: 'FaxCountry',
    FaxNumber: 'FaxNumber',
    FaxNumberExtension: 'FaxNumberExtension',
    InternationalFaxNumber: 'InternationalFaxNumber',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetSelectEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetSelectEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetSelectEnum];
