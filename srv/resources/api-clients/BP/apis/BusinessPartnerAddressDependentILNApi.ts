/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberType,
  APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeCreate,
  APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeUpdate,
  CollectionOfABPAddrDepdntIntlLocNumberType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeFromJSON,
    APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeToJSON,
    APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeCreateFromJSON,
    APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeCreateToJSON,
    APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeUpdateFromJSON,
    APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeUpdateToJSON,
    CollectionOfABPAddrDepdntIntlLocNumberTypeFromJSON,
    CollectionOfABPAddrDepdntIntlLocNumberTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteRequest {
    businessPartner: string;
    addressID: string;
}

export interface ABPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDGetRequest {
    businessPartner: string;
    addressID: string;
    $select?: Set<ABPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDGetSelectEnum>;
}

export interface ABPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDPatchRequest {
    businessPartner: string;
    addressID: string;
    aPIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeUpdate: APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeUpdate;
}

export interface ABPAddrDepdntIntlLocNumberGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPAddrDepdntIntlLocNumberGetOrderbyEnum>;
    $select?: Set<ABPAddrDepdntIntlLocNumberGetSelectEnum>;
}

export interface ABPAddrDepdntIntlLocNumberPostRequest {
    aPIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeCreate: APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeCreate;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetRequest {
    businessPartner: string;
    addressID: string;
    $select?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetSelectEnum>;
}

/**
 * 
 */
export class BusinessPartnerAddressDependentILNApi extends runtime.BaseAPI {

    /**
     * Deletes address dependent data for the business partner address identified by key fields business partner number and address ID.
     * Deletes address dependent data for the business partner address.
     */
    async aBPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteRaw(requestParameters: ABPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDDelete.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPAddrDepdntIntlLocNumber(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes address dependent data for the business partner address identified by key fields business partner number and address ID.
     * Deletes address dependent data for the business partner address.
     */
    async aBPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDDelete(requestParameters: ABPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves address dependent data for the business partner address by using the key fields business partner number and address ID.
     * Retrieves address dependent data for the business partner address.
     */
    async aBPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDGetRaw(requestParameters: ABPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPAddrDepdntIntlLocNumber(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent data for the business partner address by using the key fields business partner number and address ID.
     * Retrieves address dependent data for the business partner address.
     */
    async aBPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDGet(requestParameters: ABPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberType> {
        const response = await this.aBPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates address dependent data for the business partner address by using the key fields business partner number and address ID.
     * Updates address dependent data for the business partner address.
     */
    async aBPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDPatchRaw(requestParameters: ABPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDPatch.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeUpdate was null or undefined when calling aBPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPAddrDepdntIntlLocNumber(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates address dependent data for the business partner address by using the key fields business partner number and address ID.
     * Updates address dependent data for the business partner address.
     */
    async aBPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDPatch(requestParameters: ABPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves address dependent data for the business partner address by using the key fields business partner number and address ID.
     * Retrieves address dependent data for the business partner address.
     */
    async aBPAddrDepdntIntlLocNumberGetRaw(requestParameters: ABPAddrDepdntIntlLocNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPAddrDepdntIntlLocNumberType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPAddrDepdntIntlLocNumber`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPAddrDepdntIntlLocNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent data for the business partner address by using the key fields business partner number and address ID.
     * Retrieves address dependent data for the business partner address.
     */
    async aBPAddrDepdntIntlLocNumberGet(requestParameters: ABPAddrDepdntIntlLocNumberGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPAddrDepdntIntlLocNumberType> {
        const response = await this.aBPAddrDepdntIntlLocNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds new address dependent data for the business partner address.
     * Creates new address dependent data for the business partner address.
     */
    async aBPAddrDepdntIntlLocNumberPostRaw(requestParameters: ABPAddrDepdntIntlLocNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberType>> {
        if (requestParameters.aPIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeCreate was null or undefined when calling aBPAddrDepdntIntlLocNumberPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPAddrDepdntIntlLocNumber`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeFromJSON(jsonValue));
    }

    /**
     * Adds new address dependent data for the business partner address.
     * Creates new address dependent data for the business partner address.
     */
    async aBPAddrDepdntIntlLocNumberPost(requestParameters: ABPAddrDepdntIntlLocNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberType> {
        const response = await this.aBPAddrDepdntIntlLocNumberPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves general data of all the supplier records available in the system.
     * Retrieves address dependent data for the business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_BPAddrDepdntIntlLocNumber`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves general data of all the supplier records available in the system.
     * Retrieves address dependent data for the business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber3: 'InternationalLocationNumber3'
} as const;
export type ABPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDGetSelectEnum = typeof ABPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDGetSelectEnum[keyof typeof ABPAddrDepdntIntlLocNumberBusinessPartnerBusinessPartnerAddressIDAddressIDGetSelectEnum];
/**
 * @export
 */
export const ABPAddrDepdntIntlLocNumberGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber1Desc: 'InternationalLocationNumber1 desc',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber2Desc: 'InternationalLocationNumber2 desc',
    InternationalLocationNumber3: 'InternationalLocationNumber3',
    InternationalLocationNumber3Desc: 'InternationalLocationNumber3 desc'
} as const;
export type ABPAddrDepdntIntlLocNumberGetOrderbyEnum = typeof ABPAddrDepdntIntlLocNumberGetOrderbyEnum[keyof typeof ABPAddrDepdntIntlLocNumberGetOrderbyEnum];
/**
 * @export
 */
export const ABPAddrDepdntIntlLocNumberGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber3: 'InternationalLocationNumber3'
} as const;
export type ABPAddrDepdntIntlLocNumberGetSelectEnum = typeof ABPAddrDepdntIntlLocNumberGetSelectEnum[keyof typeof ABPAddrDepdntIntlLocNumberGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber3: 'InternationalLocationNumber3'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetSelectEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetSelectEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetSelectEnum];
