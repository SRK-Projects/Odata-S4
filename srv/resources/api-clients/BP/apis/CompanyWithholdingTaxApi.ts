/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERASupplierWithHoldingTaxType,
  APIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate,
  APIBUSINESSPARTNERASupplierWithHoldingTaxTypeUpdate,
  CollectionOfASupplierWithHoldingTaxType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERASupplierWithHoldingTaxTypeFromJSON,
    APIBUSINESSPARTNERASupplierWithHoldingTaxTypeToJSON,
    APIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreateFromJSON,
    APIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreateToJSON,
    APIBUSINESSPARTNERASupplierWithHoldingTaxTypeUpdateFromJSON,
    APIBUSINESSPARTNERASupplierWithHoldingTaxTypeUpdateToJSON,
    CollectionOfASupplierWithHoldingTaxTypeFromJSON,
    CollectionOfASupplierWithHoldingTaxTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetRequest {
    supplier: string;
    companyCode: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetOrderbyEnum>;
    $select?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetSelectEnum>;
}

export interface ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPostRequest {
    supplier: string;
    companyCode: string;
    aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate: APIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate;
}

export interface ASupplierWithHoldingTaxGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierWithHoldingTaxGetOrderbyEnum>;
    $select?: Set<ASupplierWithHoldingTaxGetSelectEnum>;
}

export interface ASupplierWithHoldingTaxPostRequest {
    aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate: APIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate;
}

export interface ASupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDeleteRequest {
    supplier: string;
    companyCode: string;
    withholdingTaxType: string;
}

export interface ASupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetRequest {
    supplier: string;
    companyCode: string;
    withholdingTaxType: string;
    $select?: Set<ASupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetSelectEnum>;
}

export interface ASupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatchRequest {
    supplier: string;
    companyCode: string;
    withholdingTaxType: string;
    aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeUpdate: APIBUSINESSPARTNERASupplierWithHoldingTaxTypeUpdate;
}

/**
 * 
 */
export class CompanyWithholdingTaxApi extends runtime.BaseAPI {

    /**
     * Retrieves all withholding tax records attached to supplier company in the system.
     * Retrieves supplier withholding tax records.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetRaw(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierWithHoldingTaxType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany(Supplier='{Supplier}',CompanyCode='{CompanyCode}')/to_SupplierWithHoldingTax`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierWithHoldingTaxTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all withholding tax records attached to supplier company in the system.
     * Retrieves supplier withholding tax records.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGet(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierWithHoldingTaxType> {
        const response = await this.aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates supplier withholding tax record linked to supplier company data.
     * Creates new supplier witholding tax data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPostRaw(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierWithHoldingTaxType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPost.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany(Supplier='{Supplier}',CompanyCode='{CompanyCode}')/to_SupplierWithHoldingTax`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierWithHoldingTaxTypeFromJSON(jsonValue));
    }

    /**
     * Creates supplier withholding tax record linked to supplier company data.
     * Creates new supplier witholding tax data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPost(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierWithHoldingTaxType> {
        const response = await this.aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all withholding tax records attached to supplier company in the system.
     * Retrieves supplier withholding tax records.
     */
    async aSupplierWithHoldingTaxGetRaw(requestParameters: ASupplierWithHoldingTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierWithHoldingTaxType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierWithHoldingTax`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierWithHoldingTaxTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all withholding tax records attached to supplier company in the system.
     * Retrieves supplier withholding tax records.
     */
    async aSupplierWithHoldingTaxGet(requestParameters: ASupplierWithHoldingTaxGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierWithHoldingTaxType> {
        const response = await this.aSupplierWithHoldingTaxGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates supplier withholding tax record linked to supplier company data.
     * Creates new supplier witholding tax data.
     */
    async aSupplierWithHoldingTaxPostRaw(requestParameters: ASupplierWithHoldingTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierWithHoldingTaxType>> {
        if (requestParameters.aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate was null or undefined when calling aSupplierWithHoldingTaxPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierWithHoldingTax`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierWithHoldingTaxTypeFromJSON(jsonValue));
    }

    /**
     * Creates supplier withholding tax record linked to supplier company data.
     * Creates new supplier witholding tax data.
     */
    async aSupplierWithHoldingTaxPost(requestParameters: ASupplierWithHoldingTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierWithHoldingTaxType> {
        const response = await this.aSupplierWithHoldingTaxPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes supplier withholding tax data linked to supplier company by using Supplier, CompanyCode, and WithholdingTaxType fields.
     * Deletes supplier withholding tax data.
     */
    async aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDeleteRaw(requestParameters: ASupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDelete.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDelete.');
        }

        if (requestParameters.withholdingTaxType === null || requestParameters.withholdingTaxType === undefined) {
            throw new runtime.RequiredError('withholdingTaxType','Required parameter requestParameters.withholdingTaxType was null or undefined when calling aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierWithHoldingTax(Supplier='{Supplier}',CompanyCode='{CompanyCode}',WithholdingTaxType='{WithholdingTaxType}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"WithholdingTaxType"}}`, encodeURIComponent(String(requestParameters.withholdingTaxType))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes supplier withholding tax data linked to supplier company by using Supplier, CompanyCode, and WithholdingTaxType fields.
     * Deletes supplier withholding tax data.
     */
    async aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDelete(requestParameters: ASupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves supplier withholding tax records by Supplier, CompanyCode, and WithholdingTaxType fields.
     * Retrieves supplier withholding tax records by key fields.
     */
    async aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetRaw(requestParameters: ASupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierWithHoldingTaxType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGet.');
        }

        if (requestParameters.withholdingTaxType === null || requestParameters.withholdingTaxType === undefined) {
            throw new runtime.RequiredError('withholdingTaxType','Required parameter requestParameters.withholdingTaxType was null or undefined when calling aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierWithHoldingTax(Supplier='{Supplier}',CompanyCode='{CompanyCode}',WithholdingTaxType='{WithholdingTaxType}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"WithholdingTaxType"}}`, encodeURIComponent(String(requestParameters.withholdingTaxType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierWithHoldingTaxTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves supplier withholding tax records by Supplier, CompanyCode, and WithholdingTaxType fields.
     * Retrieves supplier withholding tax records by key fields.
     */
    async aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGet(requestParameters: ASupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierWithHoldingTaxType> {
        const response = await this.aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates supplier withholding tax data linked to supplier company by using Supplier, CompanyCode, and WithholdingTaxType fields.
     * Updates supplier company withholding tax records using key fields.
     */
    async aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatchRaw(requestParameters: ASupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatch.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatch.');
        }

        if (requestParameters.withholdingTaxType === null || requestParameters.withholdingTaxType === undefined) {
            throw new runtime.RequiredError('withholdingTaxType','Required parameter requestParameters.withholdingTaxType was null or undefined when calling aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeUpdate was null or undefined when calling aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierWithHoldingTax(Supplier='{Supplier}',CompanyCode='{CompanyCode}',WithholdingTaxType='{WithholdingTaxType}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"WithholdingTaxType"}}`, encodeURIComponent(String(requestParameters.withholdingTaxType))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierWithHoldingTaxTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates supplier withholding tax data linked to supplier company by using Supplier, CompanyCode, and WithholdingTaxType fields.
     * Updates supplier company withholding tax records using key fields.
     */
    async aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatch(requestParameters: ASupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aSupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatchRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    WithholdingTaxType: 'WithholdingTaxType',
    WithholdingTaxTypeDesc: 'WithholdingTaxType desc',
    ExemptionDateBegin: 'ExemptionDateBegin',
    ExemptionDateBeginDesc: 'ExemptionDateBegin desc',
    ExemptionDateEnd: 'ExemptionDateEnd',
    ExemptionDateEndDesc: 'ExemptionDateEnd desc',
    ExemptionReason: 'ExemptionReason',
    ExemptionReasonDesc: 'ExemptionReason desc',
    IsWithholdingTaxSubject: 'IsWithholdingTaxSubject',
    IsWithholdingTaxSubjectDesc: 'IsWithholdingTaxSubject desc',
    RecipientType: 'RecipientType',
    RecipientTypeDesc: 'RecipientType desc',
    WithholdingTaxCertificate: 'WithholdingTaxCertificate',
    WithholdingTaxCertificateDesc: 'WithholdingTaxCertificate desc',
    WithholdingTaxCode: 'WithholdingTaxCode',
    WithholdingTaxCodeDesc: 'WithholdingTaxCode desc',
    WithholdingTaxExmptPercent: 'WithholdingTaxExmptPercent',
    WithholdingTaxExmptPercentDesc: 'WithholdingTaxExmptPercent desc',
    WithholdingTaxNumber: 'WithholdingTaxNumber',
    WithholdingTaxNumberDesc: 'WithholdingTaxNumber desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetOrderbyEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetOrderbyEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetSelectEnum = {
    Supplier: 'Supplier',
    CompanyCode: 'CompanyCode',
    WithholdingTaxType: 'WithholdingTaxType',
    ExemptionDateBegin: 'ExemptionDateBegin',
    ExemptionDateEnd: 'ExemptionDateEnd',
    ExemptionReason: 'ExemptionReason',
    IsWithholdingTaxSubject: 'IsWithholdingTaxSubject',
    RecipientType: 'RecipientType',
    WithholdingTaxCertificate: 'WithholdingTaxCertificate',
    WithholdingTaxCode: 'WithholdingTaxCode',
    WithholdingTaxExmptPercent: 'WithholdingTaxExmptPercent',
    WithholdingTaxNumber: 'WithholdingTaxNumber',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetSelectEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetSelectEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetSelectEnum];
/**
 * @export
 */
export const ASupplierWithHoldingTaxGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    WithholdingTaxType: 'WithholdingTaxType',
    WithholdingTaxTypeDesc: 'WithholdingTaxType desc',
    ExemptionDateBegin: 'ExemptionDateBegin',
    ExemptionDateBeginDesc: 'ExemptionDateBegin desc',
    ExemptionDateEnd: 'ExemptionDateEnd',
    ExemptionDateEndDesc: 'ExemptionDateEnd desc',
    ExemptionReason: 'ExemptionReason',
    ExemptionReasonDesc: 'ExemptionReason desc',
    IsWithholdingTaxSubject: 'IsWithholdingTaxSubject',
    IsWithholdingTaxSubjectDesc: 'IsWithholdingTaxSubject desc',
    RecipientType: 'RecipientType',
    RecipientTypeDesc: 'RecipientType desc',
    WithholdingTaxCertificate: 'WithholdingTaxCertificate',
    WithholdingTaxCertificateDesc: 'WithholdingTaxCertificate desc',
    WithholdingTaxCode: 'WithholdingTaxCode',
    WithholdingTaxCodeDesc: 'WithholdingTaxCode desc',
    WithholdingTaxExmptPercent: 'WithholdingTaxExmptPercent',
    WithholdingTaxExmptPercentDesc: 'WithholdingTaxExmptPercent desc',
    WithholdingTaxNumber: 'WithholdingTaxNumber',
    WithholdingTaxNumberDesc: 'WithholdingTaxNumber desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ASupplierWithHoldingTaxGetOrderbyEnum = typeof ASupplierWithHoldingTaxGetOrderbyEnum[keyof typeof ASupplierWithHoldingTaxGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierWithHoldingTaxGetSelectEnum = {
    Supplier: 'Supplier',
    CompanyCode: 'CompanyCode',
    WithholdingTaxType: 'WithholdingTaxType',
    ExemptionDateBegin: 'ExemptionDateBegin',
    ExemptionDateEnd: 'ExemptionDateEnd',
    ExemptionReason: 'ExemptionReason',
    IsWithholdingTaxSubject: 'IsWithholdingTaxSubject',
    RecipientType: 'RecipientType',
    WithholdingTaxCertificate: 'WithholdingTaxCertificate',
    WithholdingTaxCode: 'WithholdingTaxCode',
    WithholdingTaxExmptPercent: 'WithholdingTaxExmptPercent',
    WithholdingTaxNumber: 'WithholdingTaxNumber',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ASupplierWithHoldingTaxGetSelectEnum = typeof ASupplierWithHoldingTaxGetSelectEnum[keyof typeof ASupplierWithHoldingTaxGetSelectEnum];
/**
 * @export
 */
export const ASupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetSelectEnum = {
    Supplier: 'Supplier',
    CompanyCode: 'CompanyCode',
    WithholdingTaxType: 'WithholdingTaxType',
    ExemptionDateBegin: 'ExemptionDateBegin',
    ExemptionDateEnd: 'ExemptionDateEnd',
    ExemptionReason: 'ExemptionReason',
    IsWithholdingTaxSubject: 'IsWithholdingTaxSubject',
    RecipientType: 'RecipientType',
    WithholdingTaxCertificate: 'WithholdingTaxCertificate',
    WithholdingTaxCode: 'WithholdingTaxCode',
    WithholdingTaxExmptPercent: 'WithholdingTaxExmptPercent',
    WithholdingTaxNumber: 'WithholdingTaxNumber',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ASupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetSelectEnum = typeof ASupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetSelectEnum[keyof typeof ASupplierWithHoldingTaxSupplierSupplierCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetSelectEnum];
