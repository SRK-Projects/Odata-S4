/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType,
  APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate,
  APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeUpdate,
  CollectionOfACustSlsAreaAddrDepdntInfoType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeFromJSON,
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeToJSON,
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreateFromJSON,
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreateToJSON,
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeUpdateFromJSON,
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeUpdateToJSON,
    CollectionOfACustSlsAreaAddrDepdntInfoTypeFromJSON,
    CollectionOfACustSlsAreaAddrDepdntInfoTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ACustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDeleteRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    addressID: string;
}

export interface ACustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDGetRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    addressID: string;
    $select?: Set<ACustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDGetSelectEnum>;
}

export interface ACustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDPatchRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    addressID: string;
    aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeUpdate: APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeUpdate;
}

export interface ACustSlsAreaAddrDepdntInfoGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustSlsAreaAddrDepdntInfoGetOrderbyEnum>;
    $select?: Set<ACustSlsAreaAddrDepdntInfoGetSelectEnum>;
}

export interface ACustSlsAreaAddrDepdntInfoPostRequest {
    aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate: APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate;
}

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetOrderbyEnum>;
    $select?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetSelectEnum>;
}

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate: APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate;
}

/**
 * 
 */
export class CustomerSalesAreaAddressDependentInformationApi extends runtime.BaseAPI {

    /**
     * Deletes address dependent customer sales area data.
     * Deletes address dependent customer sales area data.
     */
    async aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDeleteRaw(requestParameters: ACustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDelete.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDelete.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDelete.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDelete.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustSlsAreaAddrDepdntInfo(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',AddressID='{AddressID}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes address dependent customer sales area data.
     * Deletes address dependent customer sales area data.
     */
    async aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDelete(requestParameters: ACustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves address dependent customer sales area data by using key fields.
     * Retrieves address dependent customer sales area data by using key fields.
     */
    async aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDGetRaw(requestParameters: ACustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDGet.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDGet.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDGet.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustSlsAreaAddrDepdntInfo(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',AddressID='{AddressID}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent customer sales area data by using key fields.
     * Retrieves address dependent customer sales area data by using key fields.
     */
    async aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDGet(requestParameters: ACustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType> {
        const response = await this.aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates address dependent customer sales area data.
     * Updates address dependent customer sales area data.
     */
    async aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDPatchRaw(requestParameters: ACustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDPatch.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDPatch.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDPatch.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDPatch.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeUpdate was null or undefined when calling aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustSlsAreaAddrDepdntInfo(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',AddressID='{AddressID}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates address dependent customer sales area data.
     * Updates address dependent customer sales area data.
     */
    async aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDPatch(requestParameters: ACustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves address dependent customer sales area data fields of all the available records in the system.
     * Retrieves address dependent customer sales area data.
     */
    async aCustSlsAreaAddrDepdntInfoGetRaw(requestParameters: ACustSlsAreaAddrDepdntInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustSlsAreaAddrDepdntInfoType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustSlsAreaAddrDepdntInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustSlsAreaAddrDepdntInfoTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent customer sales area data fields of all the available records in the system.
     * Retrieves address dependent customer sales area data.
     */
    async aCustSlsAreaAddrDepdntInfoGet(requestParameters: ACustSlsAreaAddrDepdntInfoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustSlsAreaAddrDepdntInfoType> {
        const response = await this.aCustSlsAreaAddrDepdntInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new address dependent customer sales area data.
     * Creates new address dependent customer sales area data.
     */
    async aCustSlsAreaAddrDepdntInfoPostRaw(requestParameters: ACustSlsAreaAddrDepdntInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType>> {
        if (requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate was null or undefined when calling aCustSlsAreaAddrDepdntInfoPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustSlsAreaAddrDepdntInfo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeFromJSON(jsonValue));
    }

    /**
     * Creates new address dependent customer sales area data.
     * Creates new address dependent customer sales area data.
     */
    async aCustSlsAreaAddrDepdntInfoPost(requestParameters: ACustSlsAreaAddrDepdntInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType> {
        const response = await this.aCustSlsAreaAddrDepdntInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves address dependent customer sales area data fields of all the available records in the system.
     * Retrieves address dependent customer sales area data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustSlsAreaAddrDepdntInfoType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')/to_SlsAreaAddrDepdntInfo`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustSlsAreaAddrDepdntInfoTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent customer sales area data fields of all the available records in the system.
     * Retrieves address dependent customer sales area data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustSlsAreaAddrDepdntInfoType> {
        const response = await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new address dependent customer sales area data.
     * Creates new address dependent customer sales area data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')/to_SlsAreaAddrDepdntInfo`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeFromJSON(jsonValue));
    }

    /**
     * Creates new address dependent customer sales area data.
     * Creates new address dependent customer sales area data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType> {
        const response = await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ACustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    AddressId: 'AddressID',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    DeliveryIsBlocked: 'DeliveryIsBlocked',
    SalesOffice: 'SalesOffice',
    SalesGroup: 'SalesGroup',
    ShippingCondition: 'ShippingCondition',
    SupplyingPlant: 'SupplyingPlant',
    IncotermsVersion: 'IncotermsVersion'
} as const;
export type ACustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDGetSelectEnum = typeof ACustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDGetSelectEnum[keyof typeof ACustSlsAreaAddrDepdntInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDGetSelectEnum];
/**
 * @export
 */
export const ACustSlsAreaAddrDepdntInfoGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsClassificationDesc: 'IncotermsClassification desc',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsLocation1Desc: 'IncotermsLocation1 desc',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsLocation2Desc: 'IncotermsLocation2 desc',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc1AddlUuidDesc: 'IncotermsSupChnLoc1AddlUUID desc',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnLoc2AddlUuidDesc: 'IncotermsSupChnLoc2AddlUUID desc',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    IncotermsSupChnDvtgLocAddlUuidDesc: 'IncotermsSupChnDvtgLocAddlUUID desc',
    DeliveryIsBlocked: 'DeliveryIsBlocked',
    DeliveryIsBlockedDesc: 'DeliveryIsBlocked desc',
    SalesOffice: 'SalesOffice',
    SalesOfficeDesc: 'SalesOffice desc',
    SalesGroup: 'SalesGroup',
    SalesGroupDesc: 'SalesGroup desc',
    ShippingCondition: 'ShippingCondition',
    ShippingConditionDesc: 'ShippingCondition desc',
    SupplyingPlant: 'SupplyingPlant',
    SupplyingPlantDesc: 'SupplyingPlant desc',
    IncotermsVersion: 'IncotermsVersion',
    IncotermsVersionDesc: 'IncotermsVersion desc'
} as const;
export type ACustSlsAreaAddrDepdntInfoGetOrderbyEnum = typeof ACustSlsAreaAddrDepdntInfoGetOrderbyEnum[keyof typeof ACustSlsAreaAddrDepdntInfoGetOrderbyEnum];
/**
 * @export
 */
export const ACustSlsAreaAddrDepdntInfoGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    AddressId: 'AddressID',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    DeliveryIsBlocked: 'DeliveryIsBlocked',
    SalesOffice: 'SalesOffice',
    SalesGroup: 'SalesGroup',
    ShippingCondition: 'ShippingCondition',
    SupplyingPlant: 'SupplyingPlant',
    IncotermsVersion: 'IncotermsVersion'
} as const;
export type ACustSlsAreaAddrDepdntInfoGetSelectEnum = typeof ACustSlsAreaAddrDepdntInfoGetSelectEnum[keyof typeof ACustSlsAreaAddrDepdntInfoGetSelectEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsClassificationDesc: 'IncotermsClassification desc',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsLocation1Desc: 'IncotermsLocation1 desc',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsLocation2Desc: 'IncotermsLocation2 desc',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc1AddlUuidDesc: 'IncotermsSupChnLoc1AddlUUID desc',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnLoc2AddlUuidDesc: 'IncotermsSupChnLoc2AddlUUID desc',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    IncotermsSupChnDvtgLocAddlUuidDesc: 'IncotermsSupChnDvtgLocAddlUUID desc',
    DeliveryIsBlocked: 'DeliveryIsBlocked',
    DeliveryIsBlockedDesc: 'DeliveryIsBlocked desc',
    SalesOffice: 'SalesOffice',
    SalesOfficeDesc: 'SalesOffice desc',
    SalesGroup: 'SalesGroup',
    SalesGroupDesc: 'SalesGroup desc',
    ShippingCondition: 'ShippingCondition',
    ShippingConditionDesc: 'ShippingCondition desc',
    SupplyingPlant: 'SupplyingPlant',
    SupplyingPlantDesc: 'SupplyingPlant desc',
    IncotermsVersion: 'IncotermsVersion',
    IncotermsVersionDesc: 'IncotermsVersion desc'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetOrderbyEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetOrderbyEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    AddressId: 'AddressID',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    DeliveryIsBlocked: 'DeliveryIsBlocked',
    SalesOffice: 'SalesOffice',
    SalesGroup: 'SalesGroup',
    ShippingCondition: 'ShippingCondition',
    SupplyingPlant: 'SupplyingPlant',
    IncotermsVersion: 'IncotermsVersion'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetSelectEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetSelectEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetSelectEnum];
