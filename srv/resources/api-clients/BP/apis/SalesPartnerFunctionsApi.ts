/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERACustSalesPartnerFuncType,
  APIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate,
  APIBUSINESSPARTNERACustSalesPartnerFuncTypeUpdate,
  CollectionOfACustSalesPartnerFuncType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERACustSalesPartnerFuncTypeFromJSON,
    APIBUSINESSPARTNERACustSalesPartnerFuncTypeToJSON,
    APIBUSINESSPARTNERACustSalesPartnerFuncTypeCreateFromJSON,
    APIBUSINESSPARTNERACustSalesPartnerFuncTypeCreateToJSON,
    APIBUSINESSPARTNERACustSalesPartnerFuncTypeUpdateFromJSON,
    APIBUSINESSPARTNERACustSalesPartnerFuncTypeUpdateToJSON,
    CollectionOfACustSalesPartnerFuncTypeFromJSON,
    CollectionOfACustSalesPartnerFuncTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ACustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDeleteRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    partnerCounter: string;
    partnerFunction: string;
}

export interface ACustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    partnerCounter: string;
    partnerFunction: string;
    $select?: Set<ACustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetSelectEnum>;
}

export interface ACustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatchRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    partnerCounter: string;
    partnerFunction: string;
    aPIBUSINESSPARTNERACustSalesPartnerFuncTypeUpdate: APIBUSINESSPARTNERACustSalesPartnerFuncTypeUpdate;
}

export interface ACustSalesPartnerFuncGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustSalesPartnerFuncGetOrderbyEnum>;
    $select?: Set<ACustSalesPartnerFuncGetSelectEnum>;
}

export interface ACustSalesPartnerFuncPostRequest {
    aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate: APIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate;
}

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetOrderbyEnum>;
    $select?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetSelectEnum>;
}

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate: APIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate;
}

/**
 * 
 */
export class SalesPartnerFunctionsApi extends runtime.BaseAPI {

    /**
     * Deletes partner function record by Customer, SalesOrganization, DistributionChannel, Division, PartnerCounter and PartnerFunction
     * Deletes partner function record linked to customer sales area.
     */
    async aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDeleteRaw(requestParameters: ACustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDelete.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDelete.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDelete.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDelete.');
        }

        if (requestParameters.partnerCounter === null || requestParameters.partnerCounter === undefined) {
            throw new runtime.RequiredError('partnerCounter','Required parameter requestParameters.partnerCounter was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDelete.');
        }

        if (requestParameters.partnerFunction === null || requestParameters.partnerFunction === undefined) {
            throw new runtime.RequiredError('partnerFunction','Required parameter requestParameters.partnerFunction was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustSalesPartnerFunc(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',PartnerCounter='{PartnerCounter}',PartnerFunction='{PartnerFunction}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"PartnerCounter"}}`, encodeURIComponent(String(requestParameters.partnerCounter))).replace(`{${"PartnerFunction"}}`, encodeURIComponent(String(requestParameters.partnerFunction))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes partner function record by Customer, SalesOrganization, DistributionChannel, Division, PartnerCounter and PartnerFunction
     * Deletes partner function record linked to customer sales area.
     */
    async aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDelete(requestParameters: ACustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves partner function data by Customer, SalesOrganization, DistributionChannel, Division, PartnerCounter, and PartnerFunction.
     * Retrieves sales area partner function data by using key fields.
     */
    async aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetRaw(requestParameters: ACustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustSalesPartnerFuncType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGet.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGet.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGet.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGet.');
        }

        if (requestParameters.partnerCounter === null || requestParameters.partnerCounter === undefined) {
            throw new runtime.RequiredError('partnerCounter','Required parameter requestParameters.partnerCounter was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGet.');
        }

        if (requestParameters.partnerFunction === null || requestParameters.partnerFunction === undefined) {
            throw new runtime.RequiredError('partnerFunction','Required parameter requestParameters.partnerFunction was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustSalesPartnerFunc(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',PartnerCounter='{PartnerCounter}',PartnerFunction='{PartnerFunction}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"PartnerCounter"}}`, encodeURIComponent(String(requestParameters.partnerCounter))).replace(`{${"PartnerFunction"}}`, encodeURIComponent(String(requestParameters.partnerFunction))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustSalesPartnerFuncTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves partner function data by Customer, SalesOrganization, DistributionChannel, Division, PartnerCounter, and PartnerFunction.
     * Retrieves sales area partner function data by using key fields.
     */
    async aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGet(requestParameters: ACustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustSalesPartnerFuncType> {
        const response = await this.aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates partner function record by Customer, SalesOrganization, DistributionChannel, Division, PartnerCounter and PartnerFunction
     * Updates partner function record linked to customer sales area
     */
    async aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatchRaw(requestParameters: ACustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatch.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatch.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatch.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatch.');
        }

        if (requestParameters.partnerCounter === null || requestParameters.partnerCounter === undefined) {
            throw new runtime.RequiredError('partnerCounter','Required parameter requestParameters.partnerCounter was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatch.');
        }

        if (requestParameters.partnerFunction === null || requestParameters.partnerFunction === undefined) {
            throw new runtime.RequiredError('partnerFunction','Required parameter requestParameters.partnerFunction was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustSalesPartnerFuncTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERACustSalesPartnerFuncTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustSalesPartnerFuncTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERACustSalesPartnerFuncTypeUpdate was null or undefined when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustSalesPartnerFunc(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',PartnerCounter='{PartnerCounter}',PartnerFunction='{PartnerFunction}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"PartnerCounter"}}`, encodeURIComponent(String(requestParameters.partnerCounter))).replace(`{${"PartnerFunction"}}`, encodeURIComponent(String(requestParameters.partnerFunction))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustSalesPartnerFuncTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERACustSalesPartnerFuncTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates partner function record by Customer, SalesOrganization, DistributionChannel, Division, PartnerCounter and PartnerFunction
     * Updates partner function record linked to customer sales area
     */
    async aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatch(requestParameters: ACustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves partner function fields of all the available records in the system linked to customer sales areas.
     * Retrieves customer sales area partner function records.
     */
    async aCustSalesPartnerFuncGetRaw(requestParameters: ACustSalesPartnerFuncGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustSalesPartnerFuncType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustSalesPartnerFunc`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustSalesPartnerFuncTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves partner function fields of all the available records in the system linked to customer sales areas.
     * Retrieves customer sales area partner function records.
     */
    async aCustSalesPartnerFuncGet(requestParameters: ACustSalesPartnerFuncGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustSalesPartnerFuncType> {
        const response = await this.aCustSalesPartnerFuncGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new partner function record. Partner counter will be automatically determined if a similar partner function already exist.
     * Creates a new partner function record linked to customer sales area.
     */
    async aCustSalesPartnerFuncPostRaw(requestParameters: ACustSalesPartnerFuncPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustSalesPartnerFuncType>> {
        if (requestParameters.aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate was null or undefined when calling aCustSalesPartnerFuncPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustSalesPartnerFunc`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustSalesPartnerFuncTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustSalesPartnerFuncTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new partner function record. Partner counter will be automatically determined if a similar partner function already exist.
     * Creates a new partner function record linked to customer sales area.
     */
    async aCustSalesPartnerFuncPost(requestParameters: ACustSalesPartnerFuncPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustSalesPartnerFuncType> {
        const response = await this.aCustSalesPartnerFuncPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves partner function fields of all the available records in the system linked to customer sales areas.
     * Retrieves customer sales area partner function records.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustSalesPartnerFuncType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')/to_PartnerFunction`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustSalesPartnerFuncTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves partner function fields of all the available records in the system linked to customer sales areas.
     * Retrieves customer sales area partner function records.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustSalesPartnerFuncType> {
        const response = await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new partner function record. Partner counter will be automatically determined if a similar partner function already exist.
     * Creates a new partner function record linked to customer sales area.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustSalesPartnerFuncType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')/to_PartnerFunction`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustSalesPartnerFuncTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustSalesPartnerFuncTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new partner function record. Partner counter will be automatically determined if a similar partner function already exist.
     * Creates a new partner function record linked to customer sales area.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustSalesPartnerFuncType> {
        const response = await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ACustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    PartnerCounter: 'PartnerCounter',
    PartnerFunction: 'PartnerFunction',
    BpCustomerNumber: 'BPCustomerNumber',
    CustomerPartnerDescription: 'CustomerPartnerDescription',
    DefaultPartner: 'DefaultPartner',
    Supplier: 'Supplier',
    PersonnelNumber: 'PersonnelNumber',
    ContactPerson: 'ContactPerson',
    AddressId: 'AddressID',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ACustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetSelectEnum = typeof ACustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetSelectEnum[keyof typeof ACustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetSelectEnum];
/**
 * @export
 */
export const ACustSalesPartnerFuncGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    PartnerCounter: 'PartnerCounter',
    PartnerCounterDesc: 'PartnerCounter desc',
    PartnerFunction: 'PartnerFunction',
    PartnerFunctionDesc: 'PartnerFunction desc',
    BpCustomerNumber: 'BPCustomerNumber',
    BpCustomerNumberDesc: 'BPCustomerNumber desc',
    CustomerPartnerDescription: 'CustomerPartnerDescription',
    CustomerPartnerDescriptionDesc: 'CustomerPartnerDescription desc',
    DefaultPartner: 'DefaultPartner',
    DefaultPartnerDesc: 'DefaultPartner desc',
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    PersonnelNumber: 'PersonnelNumber',
    PersonnelNumberDesc: 'PersonnelNumber desc',
    ContactPerson: 'ContactPerson',
    ContactPersonDesc: 'ContactPerson desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ACustSalesPartnerFuncGetOrderbyEnum = typeof ACustSalesPartnerFuncGetOrderbyEnum[keyof typeof ACustSalesPartnerFuncGetOrderbyEnum];
/**
 * @export
 */
export const ACustSalesPartnerFuncGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    PartnerCounter: 'PartnerCounter',
    PartnerFunction: 'PartnerFunction',
    BpCustomerNumber: 'BPCustomerNumber',
    CustomerPartnerDescription: 'CustomerPartnerDescription',
    DefaultPartner: 'DefaultPartner',
    Supplier: 'Supplier',
    PersonnelNumber: 'PersonnelNumber',
    ContactPerson: 'ContactPerson',
    AddressId: 'AddressID',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ACustSalesPartnerFuncGetSelectEnum = typeof ACustSalesPartnerFuncGetSelectEnum[keyof typeof ACustSalesPartnerFuncGetSelectEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    PartnerCounter: 'PartnerCounter',
    PartnerCounterDesc: 'PartnerCounter desc',
    PartnerFunction: 'PartnerFunction',
    PartnerFunctionDesc: 'PartnerFunction desc',
    BpCustomerNumber: 'BPCustomerNumber',
    BpCustomerNumberDesc: 'BPCustomerNumber desc',
    CustomerPartnerDescription: 'CustomerPartnerDescription',
    CustomerPartnerDescriptionDesc: 'CustomerPartnerDescription desc',
    DefaultPartner: 'DefaultPartner',
    DefaultPartnerDesc: 'DefaultPartner desc',
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    PersonnelNumber: 'PersonnelNumber',
    PersonnelNumberDesc: 'PersonnelNumber desc',
    ContactPerson: 'ContactPerson',
    ContactPersonDesc: 'ContactPerson desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetOrderbyEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetOrderbyEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    PartnerCounter: 'PartnerCounter',
    PartnerFunction: 'PartnerFunction',
    BpCustomerNumber: 'BPCustomerNumber',
    CustomerPartnerDescription: 'CustomerPartnerDescription',
    DefaultPartner: 'DefaultPartner',
    Supplier: 'Supplier',
    PersonnelNumber: 'PersonnelNumber',
    ContactPerson: 'ContactPerson',
    AddressId: 'AddressID',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetSelectEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetSelectEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetSelectEnum];
