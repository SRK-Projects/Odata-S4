/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERABusinessPartnerTaxNumberType,
  APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate,
  APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeUpdate,
  CollectionOfABusinessPartnerTaxNumberType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeFromJSON,
    APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeToJSON,
    APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreateToJSON,
    APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeUpdateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeUpdateToJSON,
    CollectionOfABusinessPartnerTaxNumberTypeFromJSON,
    CollectionOfABusinessPartnerTaxNumberTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerTaxPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate: APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate;
}

export interface ABusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeDeleteRequest {
    businessPartner: string;
    bPTaxType: string;
}

export interface ABusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeGetRequest {
    businessPartner: string;
    bPTaxType: string;
    $select?: Set<ABusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeGetSelectEnum>;
}

export interface ABusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypePatchRequest {
    businessPartner: string;
    bPTaxType: string;
    aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeUpdate: APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeUpdate;
}

export interface ABusinessPartnerTaxNumberGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerTaxNumberGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerTaxNumberGetSelectEnum>;
}

export interface ABusinessPartnerTaxNumberPostRequest {
    aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate: APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate;
}

/**
 * 
 */
export class TaxNumberApi extends runtime.BaseAPI {

    /**
     * Retrieves tax number data of all the available records linked to business partners in the system.
     * Retrieves business partner tax number data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerTaxGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerTaxNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerTaxGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerTax`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerTaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves tax number data of all the available records linked to business partners in the system.
     * Retrieves business partner tax number data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerTaxGet(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerTaxNumberType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerTaxGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new tax number data linked to an existing business partner.
     * Creates a new tax number data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerTaxPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerTaxNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerTaxPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerTaxPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerTax`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Creates a new tax number data linked to an existing business partner.
     * Creates a new tax number data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerTaxPost(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerTaxNumberType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerTaxPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes tax number data identified by key fields such as business partner number and tax type.
     * Deletes tax number data linked to a business partner.
     */
    async aBusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeDeleteRaw(requestParameters: ABusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeDelete.');
        }

        if (requestParameters.bPTaxType === null || requestParameters.bPTaxType === undefined) {
            throw new runtime.RequiredError('bPTaxType','Required parameter requestParameters.bPTaxType was null or undefined when calling aBusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerTaxNumber(BusinessPartner='{BusinessPartner}',BPTaxType='{BPTaxType}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"BPTaxType"}}`, encodeURIComponent(String(requestParameters.bPTaxType))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes tax number data identified by key fields such as business partner number and tax type.
     * Deletes tax number data linked to a business partner.
     */
    async aBusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeDelete(requestParameters: ABusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves tax number data by using the key fields such as business partner number and tax type.
     * Retrieves business partner tax number data by using key fields.
     */
    async aBusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeGetRaw(requestParameters: ABusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerTaxNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeGet.');
        }

        if (requestParameters.bPTaxType === null || requestParameters.bPTaxType === undefined) {
            throw new runtime.RequiredError('bPTaxType','Required parameter requestParameters.bPTaxType was null or undefined when calling aBusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerTaxNumber(BusinessPartner='{BusinessPartner}',BPTaxType='{BPTaxType}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"BPTaxType"}}`, encodeURIComponent(String(requestParameters.bPTaxType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves tax number data by using the key fields such as business partner number and tax type.
     * Retrieves business partner tax number data by using key fields.
     */
    async aBusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeGet(requestParameters: ABusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerTaxNumberType> {
        const response = await this.aBusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates tax number data identified by key fields such as business partner number and tax type.
     * Updates tax number data linked to a business partner.
     */
    async aBusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypePatchRaw(requestParameters: ABusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypePatch.');
        }

        if (requestParameters.bPTaxType === null || requestParameters.bPTaxType === undefined) {
            throw new runtime.RequiredError('bPTaxType','Required parameter requestParameters.bPTaxType was null or undefined when calling aBusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypePatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeUpdate was null or undefined when calling aBusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerTaxNumber(BusinessPartner='{BusinessPartner}',BPTaxType='{BPTaxType}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"BPTaxType"}}`, encodeURIComponent(String(requestParameters.bPTaxType))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates tax number data identified by key fields such as business partner number and tax type.
     * Updates tax number data linked to a business partner.
     */
    async aBusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypePatch(requestParameters: ABusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypePatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves tax number data of all the available records linked to business partners in the system.
     * Retrieves business partner tax number data.
     */
    async aBusinessPartnerTaxNumberGetRaw(requestParameters: ABusinessPartnerTaxNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerTaxNumberType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerTaxNumber`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerTaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves tax number data of all the available records linked to business partners in the system.
     * Retrieves business partner tax number data.
     */
    async aBusinessPartnerTaxNumberGet(requestParameters: ABusinessPartnerTaxNumberGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerTaxNumberType> {
        const response = await this.aBusinessPartnerTaxNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new tax number data linked to an existing business partner.
     * Creates a new tax number data.
     */
    async aBusinessPartnerTaxNumberPostRaw(requestParameters: ABusinessPartnerTaxNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerTaxNumberType>> {
        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate was null or undefined when calling aBusinessPartnerTaxNumberPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerTaxNumber`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Creates a new tax number data linked to an existing business partner.
     * Creates a new tax number data.
     */
    async aBusinessPartnerTaxNumberPost(requestParameters: ABusinessPartnerTaxNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerTaxNumberType> {
        const response = await this.aBusinessPartnerTaxNumberPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    BpTaxType: 'BPTaxType',
    BpTaxTypeDesc: 'BPTaxType desc',
    BpTaxNumber: 'BPTaxNumber',
    BpTaxNumberDesc: 'BPTaxNumber desc',
    BpTaxLongNumber: 'BPTaxLongNumber',
    BpTaxLongNumberDesc: 'BPTaxLongNumber desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BpTaxType: 'BPTaxType',
    BpTaxNumber: 'BPTaxNumber',
    BpTaxLongNumber: 'BPTaxLongNumber',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BpTaxType: 'BPTaxType',
    BpTaxNumber: 'BPTaxNumber',
    BpTaxLongNumber: 'BPTaxLongNumber',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ABusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeGetSelectEnum = typeof ABusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeGetSelectEnum[keyof typeof ABusinessPartnerTaxNumberBusinessPartnerBusinessPartnerBPTaxTypeBPTaxTypeGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerTaxNumberGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    BpTaxType: 'BPTaxType',
    BpTaxTypeDesc: 'BPTaxType desc',
    BpTaxNumber: 'BPTaxNumber',
    BpTaxNumberDesc: 'BPTaxNumber desc',
    BpTaxLongNumber: 'BPTaxLongNumber',
    BpTaxLongNumberDesc: 'BPTaxLongNumber desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ABusinessPartnerTaxNumberGetOrderbyEnum = typeof ABusinessPartnerTaxNumberGetOrderbyEnum[keyof typeof ABusinessPartnerTaxNumberGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerTaxNumberGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BpTaxType: 'BPTaxType',
    BpTaxNumber: 'BPTaxNumber',
    BpTaxLongNumber: 'BPTaxLongNumber',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ABusinessPartnerTaxNumberGetSelectEnum = typeof ABusinessPartnerTaxNumberGetSelectEnum[keyof typeof ABusinessPartnerTaxNumberGetSelectEnum];
