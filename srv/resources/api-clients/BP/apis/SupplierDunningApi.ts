/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERASupplierDunningType,
  APIBUSINESSPARTNERASupplierDunningTypeCreate,
  APIBUSINESSPARTNERASupplierDunningTypeUpdate,
  CollectionOfASupplierDunningType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERASupplierDunningTypeFromJSON,
    APIBUSINESSPARTNERASupplierDunningTypeToJSON,
    APIBUSINESSPARTNERASupplierDunningTypeCreateFromJSON,
    APIBUSINESSPARTNERASupplierDunningTypeCreateToJSON,
    APIBUSINESSPARTNERASupplierDunningTypeUpdateFromJSON,
    APIBUSINESSPARTNERASupplierDunningTypeUpdateToJSON,
    CollectionOfASupplierDunningTypeFromJSON,
    CollectionOfASupplierDunningTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetRequest {
    supplier: string;
    companyCode: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetOrderbyEnum>;
    $select?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetSelectEnum>;
}

export interface ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPostRequest {
    supplier: string;
    companyCode: string;
    aPIBUSINESSPARTNERASupplierDunningTypeCreate: APIBUSINESSPARTNERASupplierDunningTypeCreate;
}

export interface ASupplierDunningGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierDunningGetOrderbyEnum>;
    $select?: Set<ASupplierDunningGetSelectEnum>;
}

export interface ASupplierDunningPostRequest {
    aPIBUSINESSPARTNERASupplierDunningTypeCreate: APIBUSINESSPARTNERASupplierDunningTypeCreate;
}

export interface ASupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteRequest {
    supplier: string;
    companyCode: string;
    dunningArea: string;
}

export interface ASupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetRequest {
    supplier: string;
    companyCode: string;
    dunningArea: string;
    $select?: Set<ASupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetSelectEnum>;
}

export interface ASupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatchRequest {
    supplier: string;
    companyCode: string;
    dunningArea: string;
    aPIBUSINESSPARTNERASupplierDunningTypeUpdate: APIBUSINESSPARTNERASupplierDunningTypeUpdate;
}

/**
 * 
 */
export class SupplierDunningApi extends runtime.BaseAPI {

    /**
     * Retrieves all the dunning records attached to supplier company in the system.
     * Retrieves dunning records attached to supplier company data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetRaw(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierDunningType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany(Supplier='{Supplier}',CompanyCode='{CompanyCode}')/to_SupplierDunning`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierDunningTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the dunning records attached to supplier company in the system.
     * Retrieves dunning records attached to supplier company data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGet(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierDunningType> {
        const response = await this.aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns a new dunning records to a supplier company code.
     * Creates a new dunning records attached to supplier company.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPostRaw(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierDunningType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPost.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierDunningTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierDunningTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierDunningTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierDunningTypeCreate was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany(Supplier='{Supplier}',CompanyCode='{CompanyCode}')/to_SupplierDunning`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierDunningTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierDunningTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierDunningTypeFromJSON(jsonValue));
    }

    /**
     * Assigns a new dunning records to a supplier company code.
     * Creates a new dunning records attached to supplier company.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPost(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierDunningType> {
        const response = await this.aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the dunning records attached to supplier company in the system.
     * Retrieves dunning records attached to supplier company data.
     */
    async aSupplierDunningGetRaw(requestParameters: ASupplierDunningGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierDunningType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierDunning`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierDunningTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the dunning records attached to supplier company in the system.
     * Retrieves dunning records attached to supplier company data.
     */
    async aSupplierDunningGet(requestParameters: ASupplierDunningGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierDunningType> {
        const response = await this.aSupplierDunningGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns a new dunning records to a supplier company code.
     * Creates a new dunning records attached to supplier company.
     */
    async aSupplierDunningPostRaw(requestParameters: ASupplierDunningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierDunningType>> {
        if (requestParameters.aPIBUSINESSPARTNERASupplierDunningTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierDunningTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierDunningTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierDunningTypeCreate was null or undefined when calling aSupplierDunningPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierDunning`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierDunningTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierDunningTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierDunningTypeFromJSON(jsonValue));
    }

    /**
     * Assigns a new dunning records to a supplier company code.
     * Creates a new dunning records attached to supplier company.
     */
    async aSupplierDunningPost(requestParameters: ASupplierDunningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierDunningType> {
        const response = await this.aSupplierDunningPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes supplier company code dunning record identified by Supplier, CompanyCode, and DunningArea fields.
     * Deletes supplier company code dunning record by using key fields.
     */
    async aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteRaw(requestParameters: ASupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDelete.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDelete.');
        }

        if (requestParameters.dunningArea === null || requestParameters.dunningArea === undefined) {
            throw new runtime.RequiredError('dunningArea','Required parameter requestParameters.dunningArea was null or undefined when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierDunning(Supplier='{Supplier}',CompanyCode='{CompanyCode}',DunningArea='{DunningArea}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"DunningArea"}}`, encodeURIComponent(String(requestParameters.dunningArea))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes supplier company code dunning record identified by Supplier, CompanyCode, and DunningArea fields.
     * Deletes supplier company code dunning record by using key fields.
     */
    async aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDelete(requestParameters: ASupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all the dunning records by using Supplier, CompanyCode, and DunningArea fields.
     * Retrieves supplier dunning records by using key fields.
     */
    async aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetRaw(requestParameters: ASupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierDunningType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGet.');
        }

        if (requestParameters.dunningArea === null || requestParameters.dunningArea === undefined) {
            throw new runtime.RequiredError('dunningArea','Required parameter requestParameters.dunningArea was null or undefined when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierDunning(Supplier='{Supplier}',CompanyCode='{CompanyCode}',DunningArea='{DunningArea}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"DunningArea"}}`, encodeURIComponent(String(requestParameters.dunningArea))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierDunningTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the dunning records by using Supplier, CompanyCode, and DunningArea fields.
     * Retrieves supplier dunning records by using key fields.
     */
    async aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGet(requestParameters: ASupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierDunningType> {
        const response = await this.aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates dunning data of a supplier company record identified by Supplier, CompanyCode, and DunningArea fields.
     * Updates supplier company code dunning data using the key fields.
     */
    async aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatchRaw(requestParameters: ASupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatch.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatch.');
        }

        if (requestParameters.dunningArea === null || requestParameters.dunningArea === undefined) {
            throw new runtime.RequiredError('dunningArea','Required parameter requestParameters.dunningArea was null or undefined when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierDunningTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERASupplierDunningTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierDunningTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierDunningTypeUpdate was null or undefined when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierDunning(Supplier='{Supplier}',CompanyCode='{CompanyCode}',DunningArea='{DunningArea}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"DunningArea"}}`, encodeURIComponent(String(requestParameters.dunningArea))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierDunningTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierDunningTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates dunning data of a supplier company record identified by Supplier, CompanyCode, and DunningArea fields.
     * Updates supplier company code dunning data using the key fields.
     */
    async aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatch(requestParameters: ASupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatchRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    DunningArea: 'DunningArea',
    DunningAreaDesc: 'DunningArea desc',
    DunningBlock: 'DunningBlock',
    DunningBlockDesc: 'DunningBlock desc',
    DunningLevel: 'DunningLevel',
    DunningLevelDesc: 'DunningLevel desc',
    DunningProcedure: 'DunningProcedure',
    DunningProcedureDesc: 'DunningProcedure desc',
    DunningRecipient: 'DunningRecipient',
    DunningRecipientDesc: 'DunningRecipient desc',
    LastDunnedOn: 'LastDunnedOn',
    LastDunnedOnDesc: 'LastDunnedOn desc',
    LegDunningProcedureOn: 'LegDunningProcedureOn',
    LegDunningProcedureOnDesc: 'LegDunningProcedureOn desc',
    DunningClerk: 'DunningClerk',
    DunningClerkDesc: 'DunningClerk desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    SupplierAccountGroup: 'SupplierAccountGroup',
    SupplierAccountGroupDesc: 'SupplierAccountGroup desc'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetOrderbyEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetOrderbyEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetSelectEnum = {
    Supplier: 'Supplier',
    CompanyCode: 'CompanyCode',
    DunningArea: 'DunningArea',
    DunningBlock: 'DunningBlock',
    DunningLevel: 'DunningLevel',
    DunningProcedure: 'DunningProcedure',
    DunningRecipient: 'DunningRecipient',
    LastDunnedOn: 'LastDunnedOn',
    LegDunningProcedureOn: 'LegDunningProcedureOn',
    DunningClerk: 'DunningClerk',
    AuthorizationGroup: 'AuthorizationGroup',
    SupplierAccountGroup: 'SupplierAccountGroup'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetSelectEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetSelectEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetSelectEnum];
/**
 * @export
 */
export const ASupplierDunningGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    DunningArea: 'DunningArea',
    DunningAreaDesc: 'DunningArea desc',
    DunningBlock: 'DunningBlock',
    DunningBlockDesc: 'DunningBlock desc',
    DunningLevel: 'DunningLevel',
    DunningLevelDesc: 'DunningLevel desc',
    DunningProcedure: 'DunningProcedure',
    DunningProcedureDesc: 'DunningProcedure desc',
    DunningRecipient: 'DunningRecipient',
    DunningRecipientDesc: 'DunningRecipient desc',
    LastDunnedOn: 'LastDunnedOn',
    LastDunnedOnDesc: 'LastDunnedOn desc',
    LegDunningProcedureOn: 'LegDunningProcedureOn',
    LegDunningProcedureOnDesc: 'LegDunningProcedureOn desc',
    DunningClerk: 'DunningClerk',
    DunningClerkDesc: 'DunningClerk desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    SupplierAccountGroup: 'SupplierAccountGroup',
    SupplierAccountGroupDesc: 'SupplierAccountGroup desc'
} as const;
export type ASupplierDunningGetOrderbyEnum = typeof ASupplierDunningGetOrderbyEnum[keyof typeof ASupplierDunningGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierDunningGetSelectEnum = {
    Supplier: 'Supplier',
    CompanyCode: 'CompanyCode',
    DunningArea: 'DunningArea',
    DunningBlock: 'DunningBlock',
    DunningLevel: 'DunningLevel',
    DunningProcedure: 'DunningProcedure',
    DunningRecipient: 'DunningRecipient',
    LastDunnedOn: 'LastDunnedOn',
    LegDunningProcedureOn: 'LegDunningProcedureOn',
    DunningClerk: 'DunningClerk',
    AuthorizationGroup: 'AuthorizationGroup',
    SupplierAccountGroup: 'SupplierAccountGroup'
} as const;
export type ASupplierDunningGetSelectEnum = typeof ASupplierDunningGetSelectEnum[keyof typeof ASupplierDunningGetSelectEnum];
/**
 * @export
 */
export const ASupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetSelectEnum = {
    Supplier: 'Supplier',
    CompanyCode: 'CompanyCode',
    DunningArea: 'DunningArea',
    DunningBlock: 'DunningBlock',
    DunningLevel: 'DunningLevel',
    DunningProcedure: 'DunningProcedure',
    DunningRecipient: 'DunningRecipient',
    LastDunnedOn: 'LastDunnedOn',
    LegDunningProcedureOn: 'LegDunningProcedureOn',
    DunningClerk: 'DunningClerk',
    AuthorizationGroup: 'AuthorizationGroup',
    SupplierAccountGroup: 'SupplierAccountGroup'
} as const;
export type ASupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetSelectEnum = typeof ASupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetSelectEnum[keyof typeof ASupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetSelectEnum];
