/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERABuPaAddressUsageType,
  APIBUSINESSPARTNERABuPaAddressUsageTypeCreate,
  APIBUSINESSPARTNERABuPaAddressUsageTypeUpdate,
  CollectionOfABuPaAddressUsageType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERABuPaAddressUsageTypeFromJSON,
    APIBUSINESSPARTNERABuPaAddressUsageTypeToJSON,
    APIBUSINESSPARTNERABuPaAddressUsageTypeCreateFromJSON,
    APIBUSINESSPARTNERABuPaAddressUsageTypeCreateToJSON,
    APIBUSINESSPARTNERABuPaAddressUsageTypeUpdateFromJSON,
    APIBUSINESSPARTNERABuPaAddressUsageTypeUpdateToJSON,
    CollectionOfABuPaAddressUsageTypeFromJSON,
    CollectionOfABuPaAddressUsageTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDeleteRequest {
    businessPartner: string;
    validityEndDate: Date;
    addressUsage: string;
    addressID: string;
}

export interface ABuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetRequest {
    businessPartner: string;
    validityEndDate: Date;
    addressUsage: string;
    addressID: string;
    $select?: Set<ABuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetSelectEnum>;
}

export interface ABuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatchRequest {
    businessPartner: string;
    validityEndDate: Date;
    addressUsage: string;
    addressID: string;
    aPIBUSINESSPARTNERABuPaAddressUsageTypeUpdate: APIBUSINESSPARTNERABuPaAddressUsageTypeUpdate;
}

export interface ABuPaAddressUsageGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABuPaAddressUsageGetOrderbyEnum>;
    $select?: Set<ABuPaAddressUsageGetSelectEnum>;
}

export interface ABuPaAddressUsagePostRequest {
    aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate: APIBUSINESSPARTNERABuPaAddressUsageTypeCreate;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetRequest {
    businessPartner: string;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetSelectEnum>;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostRequest {
    businessPartner: string;
    addressID: string;
    aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate: APIBUSINESSPARTNERABuPaAddressUsageTypeCreate;
}

/**
 * 
 */
export class AddressUsageApi extends runtime.BaseAPI {

    /**
     * Deletes address usage record by BusinessPartner, ValidityEndDate, AddressUsage and AddressID.
     * Deletes address usage record by using key fields.
     */
    async aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDeleteRaw(requestParameters: ABuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDelete.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDelete.');
        }

        if (requestParameters.addressUsage === null || requestParameters.addressUsage === undefined) {
            throw new runtime.RequiredError('addressUsage','Required parameter requestParameters.addressUsage was null or undefined when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDelete.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BuPaAddressUsage(BusinessPartner='{BusinessPartner}',ValidityEndDate={ValidityEndDate},AddressUsage='{AddressUsage}',AddressID='{AddressID}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressUsage"}}`, encodeURIComponent(String(requestParameters.addressUsage))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes address usage record by BusinessPartner, ValidityEndDate, AddressUsage and AddressID.
     * Deletes address usage record by using key fields.
     */
    async aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDelete(requestParameters: ABuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves address usage record linked to a business partner address by BusinessPartner, ValidityEndDate, AddressUsage and AddressID.
     * Retrieves address usage record by key fields.
     */
    async aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetRaw(requestParameters: ABuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABuPaAddressUsageType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGet.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGet.');
        }

        if (requestParameters.addressUsage === null || requestParameters.addressUsage === undefined) {
            throw new runtime.RequiredError('addressUsage','Required parameter requestParameters.addressUsage was null or undefined when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BuPaAddressUsage(BusinessPartner='{BusinessPartner}',ValidityEndDate={ValidityEndDate},AddressUsage='{AddressUsage}',AddressID='{AddressID}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressUsage"}}`, encodeURIComponent(String(requestParameters.addressUsage))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABuPaAddressUsageTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address usage record linked to a business partner address by BusinessPartner, ValidityEndDate, AddressUsage and AddressID.
     * Retrieves address usage record by key fields.
     */
    async aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGet(requestParameters: ABuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABuPaAddressUsageType> {
        const response = await this.aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates address usage record by BusinessPartner, ValidityEndDate, AddressUsage and AddressID.
     * Updates address usage record by using key fields.
     */
    async aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatchRaw(requestParameters: ABuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatch.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatch.');
        }

        if (requestParameters.addressUsage === null || requestParameters.addressUsage === undefined) {
            throw new runtime.RequiredError('addressUsage','Required parameter requestParameters.addressUsage was null or undefined when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatch.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABuPaAddressUsageTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERABuPaAddressUsageTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABuPaAddressUsageTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERABuPaAddressUsageTypeUpdate was null or undefined when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BuPaAddressUsage(BusinessPartner='{BusinessPartner}',ValidityEndDate={ValidityEndDate},AddressUsage='{AddressUsage}',AddressID='{AddressID}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressUsage"}}`, encodeURIComponent(String(requestParameters.addressUsage))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABuPaAddressUsageTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERABuPaAddressUsageTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates address usage record by BusinessPartner, ValidityEndDate, AddressUsage and AddressID.
     * Updates address usage record by using key fields.
     */
    async aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatch(requestParameters: ABuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all the address usage records linked to all business partner address records in the system.
     * Retrieves address usage linked to business partner address.
     */
    async aBuPaAddressUsageGetRaw(requestParameters: ABuPaAddressUsageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABuPaAddressUsageType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BuPaAddressUsage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABuPaAddressUsageTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the address usage records linked to all business partner address records in the system.
     * Retrieves address usage linked to business partner address.
     */
    async aBuPaAddressUsageGet(requestParameters: ABuPaAddressUsageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABuPaAddressUsageType> {
        const response = await this.aBuPaAddressUsageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns address usage data to existing business partner address.
     * Creates an address usage record linked to a existing business partner address.
     */
    async aBuPaAddressUsagePostRaw(requestParameters: ABuPaAddressUsagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABuPaAddressUsageType>> {
        if (requestParameters.aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate was null or undefined when calling aBuPaAddressUsagePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BuPaAddressUsage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABuPaAddressUsageTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABuPaAddressUsageTypeFromJSON(jsonValue));
    }

    /**
     * Assigns address usage data to existing business partner address.
     * Creates an address usage record linked to a existing business partner address.
     */
    async aBuPaAddressUsagePost(requestParameters: ABuPaAddressUsagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABuPaAddressUsageType> {
        const response = await this.aBuPaAddressUsagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the address usage records linked to all business partner address records in the system.
     * Retrieves address usage linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABuPaAddressUsageType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_AddressUsage`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABuPaAddressUsageTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the address usage records linked to all business partner address records in the system.
     * Retrieves address usage linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABuPaAddressUsageType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns address usage data to existing business partner address.
     * Creates an address usage record linked to a existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABuPaAddressUsageType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_AddressUsage`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABuPaAddressUsageTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABuPaAddressUsageTypeFromJSON(jsonValue));
    }

    /**
     * Assigns address usage data to existing business partner address.
     * Creates an address usage record linked to a existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABuPaAddressUsageType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    ValidityEndDate: 'ValidityEndDate',
    AddressUsage: 'AddressUsage',
    AddressId: 'AddressID',
    ValidityStartDate: 'ValidityStartDate',
    StandardUsage: 'StandardUsage',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ABuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetSelectEnum = typeof ABuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetSelectEnum[keyof typeof ABuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetSelectEnum];
/**
 * @export
 */
export const ABuPaAddressUsageGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    AddressUsage: 'AddressUsage',
    AddressUsageDesc: 'AddressUsage desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    StandardUsage: 'StandardUsage',
    StandardUsageDesc: 'StandardUsage desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ABuPaAddressUsageGetOrderbyEnum = typeof ABuPaAddressUsageGetOrderbyEnum[keyof typeof ABuPaAddressUsageGetOrderbyEnum];
/**
 * @export
 */
export const ABuPaAddressUsageGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    ValidityEndDate: 'ValidityEndDate',
    AddressUsage: 'AddressUsage',
    AddressId: 'AddressID',
    ValidityStartDate: 'ValidityStartDate',
    StandardUsage: 'StandardUsage',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ABuPaAddressUsageGetSelectEnum = typeof ABuPaAddressUsageGetSelectEnum[keyof typeof ABuPaAddressUsageGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    AddressUsage: 'AddressUsage',
    AddressUsageDesc: 'AddressUsage desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    StandardUsage: 'StandardUsage',
    StandardUsageDesc: 'StandardUsage desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetOrderbyEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetOrderbyEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    ValidityEndDate: 'ValidityEndDate',
    AddressUsage: 'AddressUsage',
    AddressId: 'AddressID',
    ValidityStartDate: 'ValidityStartDate',
    StandardUsage: 'StandardUsage',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetSelectEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetSelectEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetSelectEnum];
