/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERASupplierCompanyTextType,
  APIBUSINESSPARTNERASupplierCompanyTextTypeCreate,
  CollectionOfASupplierCompanyTextType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERASupplierCompanyTextTypeFromJSON,
    APIBUSINESSPARTNERASupplierCompanyTextTypeToJSON,
    APIBUSINESSPARTNERASupplierCompanyTextTypeCreateFromJSON,
    APIBUSINESSPARTNERASupplierCompanyTextTypeCreateToJSON,
    CollectionOfASupplierCompanyTextTypeFromJSON,
    CollectionOfASupplierCompanyTextTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetRequest {
    supplier: string;
    companyCode: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum>;
    $select?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetSelectEnum>;
}

export interface ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPostRequest {
    supplier: string;
    companyCode: string;
    aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate: APIBUSINESSPARTNERASupplierCompanyTextTypeCreate;
}

export interface ASupplierCompanyTextGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierCompanyTextGetOrderbyEnum>;
    $select?: Set<ASupplierCompanyTextGetSelectEnum>;
}

export interface ASupplierCompanyTextPostRequest {
    aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate: APIBUSINESSPARTNERASupplierCompanyTextTypeCreate;
}

export interface ASupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteRequest {
    supplier: string;
    companyCode: string;
    language: string;
    longTextID: string;
}

export interface ASupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetRequest {
    supplier: string;
    companyCode: string;
    language: string;
    longTextID: string;
    $select?: Set<ASupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetSelectEnum>;
}

export interface ASupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchRequest {
    supplier: string;
    companyCode: string;
    language: string;
    longTextID: string;
    body: object;
}

/**
 * 
 */
export class SupplierCompanyTextApi extends runtime.BaseAPI {

    /**
     * Retrieves all the supplier company text data attached to supplier company in the system.
     * Retrieves supplier company text data attached to company data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetRaw(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierCompanyTextType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany(Supplier='{Supplier}',CompanyCode='{CompanyCode}')/to_CompanyText`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierCompanyTextTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the supplier company text data attached to supplier company in the system.
     * Retrieves supplier company text data attached to company data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGet(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierCompanyTextType> {
        const response = await this.aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates text data attached to a supplier company in the system.
     * Creates supplier company text data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPostRaw(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierCompanyTextType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPost.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany(Supplier='{Supplier}',CompanyCode='{CompanyCode}')/to_CompanyText`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierCompanyTextTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierCompanyTextTypeFromJSON(jsonValue));
    }

    /**
     * Creates text data attached to a supplier company in the system.
     * Creates supplier company text data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPost(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierCompanyTextType> {
        const response = await this.aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the supplier company text data attached to supplier company in the system.
     * Retrieves supplier company text data attached to company data.
     */
    async aSupplierCompanyTextGetRaw(requestParameters: ASupplierCompanyTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierCompanyTextType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompanyText`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierCompanyTextTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the supplier company text data attached to supplier company in the system.
     * Retrieves supplier company text data attached to company data.
     */
    async aSupplierCompanyTextGet(requestParameters: ASupplierCompanyTextGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierCompanyTextType> {
        const response = await this.aSupplierCompanyTextGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates text data attached to a supplier company in the system.
     * Creates supplier company text data.
     */
    async aSupplierCompanyTextPostRaw(requestParameters: ASupplierCompanyTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierCompanyTextType>> {
        if (requestParameters.aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate was null or undefined when calling aSupplierCompanyTextPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompanyText`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierCompanyTextTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierCompanyTextTypeFromJSON(jsonValue));
    }

    /**
     * Creates text data attached to a supplier company in the system.
     * Creates supplier company text data.
     */
    async aSupplierCompanyTextPost(requestParameters: ASupplierCompanyTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierCompanyTextType> {
        const response = await this.aSupplierCompanyTextPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes text record linked to supplier company by Supplier, CompanyCode, Language, and LongTextID fields.
     * Deletes supplier company text data.
     */
    async aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteRaw(requestParameters: ASupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete.');
        }

        if (requestParameters.longTextID === null || requestParameters.longTextID === undefined) {
            throw new runtime.RequiredError('longTextID','Required parameter requestParameters.longTextID was null or undefined when calling aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompanyText(Supplier='{Supplier}',CompanyCode='{CompanyCode}',Language='{Language}',LongTextID='{LongTextID}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"Language"}}`, encodeURIComponent(String(requestParameters.language))).replace(`{${"LongTextID"}}`, encodeURIComponent(String(requestParameters.longTextID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes text record linked to supplier company by Supplier, CompanyCode, Language, and LongTextID fields.
     * Deletes supplier company text data.
     */
    async aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete(requestParameters: ASupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves supplier company text data by using Supplier, CompanyCode, Language and LongTextID fields.
     * Retrieves supplier company text data by using the key fields.
     */
    async aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetRaw(requestParameters: ASupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierCompanyTextType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet.');
        }

        if (requestParameters.longTextID === null || requestParameters.longTextID === undefined) {
            throw new runtime.RequiredError('longTextID','Required parameter requestParameters.longTextID was null or undefined when calling aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompanyText(Supplier='{Supplier}',CompanyCode='{CompanyCode}',Language='{Language}',LongTextID='{LongTextID}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"Language"}}`, encodeURIComponent(String(requestParameters.language))).replace(`{${"LongTextID"}}`, encodeURIComponent(String(requestParameters.longTextID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierCompanyTextTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves supplier company text data by using Supplier, CompanyCode, Language and LongTextID fields.
     * Retrieves supplier company text data by using the key fields.
     */
    async aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet(requestParameters: ASupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierCompanyTextType> {
        const response = await this.aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates text data linked to supplier company by using Supplier, CompanyCode, Language, and LongTextID fields.
     * Updates supplier company text data.
     */
    async aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchRaw(requestParameters: ASupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch.');
        }

        if (requestParameters.longTextID === null || requestParameters.longTextID === undefined) {
            throw new runtime.RequiredError('longTextID','Required parameter requestParameters.longTextID was null or undefined when calling aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompanyText(Supplier='{Supplier}',CompanyCode='{CompanyCode}',Language='{Language}',LongTextID='{LongTextID}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"Language"}}`, encodeURIComponent(String(requestParameters.language))).replace(`{${"LongTextID"}}`, encodeURIComponent(String(requestParameters.longTextID))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates text data linked to supplier company by using Supplier, CompanyCode, Language, and LongTextID fields.
     * Updates supplier company text data.
     */
    async aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch(requestParameters: ASupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aSupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    LongTextId: 'LongTextID',
    LongTextIdDesc: 'LongTextID desc'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetSelectEnum = {
    Supplier: 'Supplier',
    CompanyCode: 'CompanyCode',
    Language: 'Language',
    LongTextId: 'LongTextID',
    LongText: 'LongText'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetSelectEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetSelectEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetSelectEnum];
/**
 * @export
 */
export const ASupplierCompanyTextGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    LongTextId: 'LongTextID',
    LongTextIdDesc: 'LongTextID desc'
} as const;
export type ASupplierCompanyTextGetOrderbyEnum = typeof ASupplierCompanyTextGetOrderbyEnum[keyof typeof ASupplierCompanyTextGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierCompanyTextGetSelectEnum = {
    Supplier: 'Supplier',
    CompanyCode: 'CompanyCode',
    Language: 'Language',
    LongTextId: 'LongTextID',
    LongText: 'LongText'
} as const;
export type ASupplierCompanyTextGetSelectEnum = typeof ASupplierCompanyTextGetSelectEnum[keyof typeof ASupplierCompanyTextGetSelectEnum];
/**
 * @export
 */
export const ASupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetSelectEnum = {
    Supplier: 'Supplier',
    CompanyCode: 'CompanyCode',
    Language: 'Language',
    LongTextId: 'LongTextID',
    LongText: 'LongText'
} as const;
export type ASupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetSelectEnum = typeof ASupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetSelectEnum[keyof typeof ASupplierCompanyTextSupplierSupplierCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetSelectEnum];
