/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERAAddressHomePageURLType,
  APIBUSINESSPARTNERAAddressHomePageURLTypeCreate,
  APIBUSINESSPARTNERAAddressHomePageURLTypeUpdate,
  CollectionOfAAddressHomePageURLType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERAAddressHomePageURLTypeFromJSON,
    APIBUSINESSPARTNERAAddressHomePageURLTypeToJSON,
    APIBUSINESSPARTNERAAddressHomePageURLTypeCreateFromJSON,
    APIBUSINESSPARTNERAAddressHomePageURLTypeCreateToJSON,
    APIBUSINESSPARTNERAAddressHomePageURLTypeUpdateFromJSON,
    APIBUSINESSPARTNERAAddressHomePageURLTypeUpdateToJSON,
    CollectionOfAAddressHomePageURLTypeFromJSON,
    CollectionOfAAddressHomePageURLTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface AAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressDeleteRequest {
    addressID: string;
    person: string;
    ordinalNumber: string;
    validityStartDate: Date;
    isDefaultURLAddress: boolean;
}

export interface AAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressGetRequest {
    addressID: string;
    person: string;
    ordinalNumber: string;
    validityStartDate: Date;
    isDefaultURLAddress: boolean;
    $select?: Set<AAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressGetSelectEnum>;
}

export interface AAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressPatchRequest {
    addressID: string;
    person: string;
    ordinalNumber: string;
    validityStartDate: Date;
    isDefaultURLAddress: boolean;
    aPIBUSINESSPARTNERAAddressHomePageURLTypeUpdate: APIBUSINESSPARTNERAAddressHomePageURLTypeUpdate;
}

export interface AAddressHomePageURLGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<AAddressHomePageURLGetOrderbyEnum>;
    $select?: Set<AAddressHomePageURLGetSelectEnum>;
}

export interface AAddressHomePageURLPostRequest {
    aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate: APIBUSINESSPARTNERAAddressHomePageURLTypeCreate;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetOrderbyEnum>;
    $select?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetSelectEnum>;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPostRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate: APIBUSINESSPARTNERAAddressHomePageURLTypeCreate;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetRequest {
    businessPartner: string;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetSelectEnum>;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostRequest {
    businessPartner: string;
    addressID: string;
    aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate: APIBUSINESSPARTNERAAddressHomePageURLTypeCreate;
}

/**
 * 
 */
export class HomePageURLApi extends runtime.BaseAPI {

    /**
     * Deletes business Partner home page URL address data of the record identified by AddressID, Person, and OrdinalNumber
     * Deletes home page URL address record by key fields.
     */
    async aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressDeleteRaw(requestParameters: AAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressDelete.');
        }

        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressDelete.');
        }

        if (requestParameters.ordinalNumber === null || requestParameters.ordinalNumber === undefined) {
            throw new runtime.RequiredError('ordinalNumber','Required parameter requestParameters.ordinalNumber was null or undefined when calling aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressDelete.');
        }

        if (requestParameters.validityStartDate === null || requestParameters.validityStartDate === undefined) {
            throw new runtime.RequiredError('validityStartDate','Required parameter requestParameters.validityStartDate was null or undefined when calling aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressDelete.');
        }

        if (requestParameters.isDefaultURLAddress === null || requestParameters.isDefaultURLAddress === undefined) {
            throw new runtime.RequiredError('isDefaultURLAddress','Required parameter requestParameters.isDefaultURLAddress was null or undefined when calling aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_AddressHomePageURL(AddressID='{AddressID}',Person='{Person}',OrdinalNumber='{OrdinalNumber}',ValidityStartDate={ValidityStartDate},IsDefaultURLAddress={IsDefaultURLAddress})`.replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"Person"}}`, encodeURIComponent(String(requestParameters.person))).replace(`{${"OrdinalNumber"}}`, encodeURIComponent(String(requestParameters.ordinalNumber))).replace(`{${"ValidityStartDate"}}`, encodeURIComponent(String(requestParameters.validityStartDate))).replace(`{${"IsDefaultURLAddress"}}`, encodeURIComponent(String(requestParameters.isDefaultURLAddress))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes business Partner home page URL address data of the record identified by AddressID, Person, and OrdinalNumber
     * Deletes home page URL address record by key fields.
     */
    async aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressDelete(requestParameters: AAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves home page URL address records by using AddressID, Person, and OrdinalNumber fields.
     * Retrieves home page URL address records by using key fields.
     */
    async aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressGetRaw(requestParameters: AAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressHomePageURLType>> {
        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressGet.');
        }

        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressGet.');
        }

        if (requestParameters.ordinalNumber === null || requestParameters.ordinalNumber === undefined) {
            throw new runtime.RequiredError('ordinalNumber','Required parameter requestParameters.ordinalNumber was null or undefined when calling aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressGet.');
        }

        if (requestParameters.validityStartDate === null || requestParameters.validityStartDate === undefined) {
            throw new runtime.RequiredError('validityStartDate','Required parameter requestParameters.validityStartDate was null or undefined when calling aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressGet.');
        }

        if (requestParameters.isDefaultURLAddress === null || requestParameters.isDefaultURLAddress === undefined) {
            throw new runtime.RequiredError('isDefaultURLAddress','Required parameter requestParameters.isDefaultURLAddress was null or undefined when calling aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_AddressHomePageURL(AddressID='{AddressID}',Person='{Person}',OrdinalNumber='{OrdinalNumber}',ValidityStartDate={ValidityStartDate},IsDefaultURLAddress={IsDefaultURLAddress})`.replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"Person"}}`, encodeURIComponent(String(requestParameters.person))).replace(`{${"OrdinalNumber"}}`, encodeURIComponent(String(requestParameters.ordinalNumber))).replace(`{${"ValidityStartDate"}}`, encodeURIComponent(String(requestParameters.validityStartDate))).replace(`{${"IsDefaultURLAddress"}}`, encodeURIComponent(String(requestParameters.isDefaultURLAddress))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressHomePageURLTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves home page URL address records by using AddressID, Person, and OrdinalNumber fields.
     * Retrieves home page URL address records by using key fields.
     */
    async aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressGet(requestParameters: AAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressHomePageURLType> {
        const response = await this.aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates business partner home page URL address data of the record identified by AddressID, Person, and OrdinalNumber.
     * Updates home page URL address record by key fields.
     */
    async aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressPatchRaw(requestParameters: AAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressPatch.');
        }

        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressPatch.');
        }

        if (requestParameters.ordinalNumber === null || requestParameters.ordinalNumber === undefined) {
            throw new runtime.RequiredError('ordinalNumber','Required parameter requestParameters.ordinalNumber was null or undefined when calling aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressPatch.');
        }

        if (requestParameters.validityStartDate === null || requestParameters.validityStartDate === undefined) {
            throw new runtime.RequiredError('validityStartDate','Required parameter requestParameters.validityStartDate was null or undefined when calling aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressPatch.');
        }

        if (requestParameters.isDefaultURLAddress === null || requestParameters.isDefaultURLAddress === undefined) {
            throw new runtime.RequiredError('isDefaultURLAddress','Required parameter requestParameters.isDefaultURLAddress was null or undefined when calling aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressHomePageURLTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeUpdate was null or undefined when calling aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_AddressHomePageURL(AddressID='{AddressID}',Person='{Person}',OrdinalNumber='{OrdinalNumber}',ValidityStartDate={ValidityStartDate},IsDefaultURLAddress={IsDefaultURLAddress})`.replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"Person"}}`, encodeURIComponent(String(requestParameters.person))).replace(`{${"OrdinalNumber"}}`, encodeURIComponent(String(requestParameters.ordinalNumber))).replace(`{${"ValidityStartDate"}}`, encodeURIComponent(String(requestParameters.validityStartDate))).replace(`{${"IsDefaultURLAddress"}}`, encodeURIComponent(String(requestParameters.isDefaultURLAddress))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressHomePageURLTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates business partner home page URL address data of the record identified by AddressID, Person, and OrdinalNumber.
     * Updates home page URL address record by key fields.
     */
    async aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressPatch(requestParameters: AAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all the home page URL address records linked to all business partner address records in the system.
     * Retrieves home page URL address records linked to business partner address.
     */
    async aAddressHomePageURLGetRaw(requestParameters: AAddressHomePageURLGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressHomePageURLType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_AddressHomePageURL`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressHomePageURLTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the home page URL address records linked to all business partner address records in the system.
     * Retrieves home page URL address records linked to business partner address.
     */
    async aAddressHomePageURLGet(requestParameters: AAddressHomePageURLGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressHomePageURLType> {
        const response = await this.aAddressHomePageURLGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new home page URL to the existing business partner address record. Multiple URLs can be linked to an address record.
     * Creates a new home page URL address record to the existing business partner address.
     */
    async aAddressHomePageURLPostRaw(requestParameters: AAddressHomePageURLPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressHomePageURLType>> {
        if (requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate was null or undefined when calling aAddressHomePageURLPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_AddressHomePageURL`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressHomePageURLTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressHomePageURLTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new home page URL to the existing business partner address record. Multiple URLs can be linked to an address record.
     * Creates a new home page URL address record to the existing business partner address.
     */
    async aAddressHomePageURLPost(requestParameters: AAddressHomePageURLPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressHomePageURLType> {
        const response = await this.aAddressHomePageURLPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the home page URL address records linked to all business partner address records in the system.
     * Retrieves home page URL address records linked to business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressHomePageURLType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGet.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGet.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGet.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_URLAddress`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressHomePageURLTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the home page URL address records linked to all business partner address records in the system.
     * Retrieves home page URL address records linked to business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGet(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressHomePageURLType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new home page URL to the existing business partner address record. Multiple URLs can be linked to an address record.
     * Creates a new home page URL address record to the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPostRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressHomePageURLType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPost.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPost.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPost.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_URLAddress`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressHomePageURLTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressHomePageURLTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new home page URL to the existing business partner address record. Multiple URLs can be linked to an address record.
     * Creates a new home page URL address record to the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPost(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressHomePageURLType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the home page URL address records linked to all business partner address records in the system.
     * Retrieves home page URL address records linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressHomePageURLType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_URLAddress`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressHomePageURLTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the home page URL address records linked to all business partner address records in the system.
     * Retrieves home page URL address records linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressHomePageURLType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new home page URL to the existing business partner address record. Multiple URLs can be linked to an address record.
     * Creates a new home page URL address record to the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressHomePageURLType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_URLAddress`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressHomePageURLTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressHomePageURLTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new home page URL to the existing business partner address record. Multiple URLs can be linked to an address record.
     * Creates a new home page URL address record to the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressHomePageURLType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    ValidityStartDate: 'ValidityStartDate',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    SearchUrlAddress: 'SearchURLAddress',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    UrlFieldLength: 'URLFieldLength',
    WebsiteUrl: 'WebsiteURL'
} as const;
export type AAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressGetSelectEnum = typeof AAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressGetSelectEnum[keyof typeof AAddressHomePageURLAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberValidityStartDateValidityStartDateIsDefaultURLAddressIsDefaultURLAddressGetSelectEnum];
/**
 * @export
 */
export const AAddressHomePageURLGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    IsDefaultUrlAddressDesc: 'IsDefaultURLAddress desc',
    SearchUrlAddress: 'SearchURLAddress',
    SearchUrlAddressDesc: 'SearchURLAddress desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc',
    UrlFieldLength: 'URLFieldLength',
    UrlFieldLengthDesc: 'URLFieldLength desc',
    WebsiteUrl: 'WebsiteURL',
    WebsiteUrlDesc: 'WebsiteURL desc'
} as const;
export type AAddressHomePageURLGetOrderbyEnum = typeof AAddressHomePageURLGetOrderbyEnum[keyof typeof AAddressHomePageURLGetOrderbyEnum];
/**
 * @export
 */
export const AAddressHomePageURLGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    ValidityStartDate: 'ValidityStartDate',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    SearchUrlAddress: 'SearchURLAddress',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    UrlFieldLength: 'URLFieldLength',
    WebsiteUrl: 'WebsiteURL'
} as const;
export type AAddressHomePageURLGetSelectEnum = typeof AAddressHomePageURLGetSelectEnum[keyof typeof AAddressHomePageURLGetSelectEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    IsDefaultUrlAddressDesc: 'IsDefaultURLAddress desc',
    SearchUrlAddress: 'SearchURLAddress',
    SearchUrlAddressDesc: 'SearchURLAddress desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc',
    UrlFieldLength: 'URLFieldLength',
    UrlFieldLengthDesc: 'URLFieldLength desc',
    WebsiteUrl: 'WebsiteURL',
    WebsiteUrlDesc: 'WebsiteURL desc'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetOrderbyEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetOrderbyEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetOrderbyEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    ValidityStartDate: 'ValidityStartDate',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    SearchUrlAddress: 'SearchURLAddress',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    UrlFieldLength: 'URLFieldLength',
    WebsiteUrl: 'WebsiteURL'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetSelectEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetSelectEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    IsDefaultUrlAddressDesc: 'IsDefaultURLAddress desc',
    SearchUrlAddress: 'SearchURLAddress',
    SearchUrlAddressDesc: 'SearchURLAddress desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc',
    UrlFieldLength: 'URLFieldLength',
    UrlFieldLengthDesc: 'URLFieldLength desc',
    WebsiteUrl: 'WebsiteURL',
    WebsiteUrlDesc: 'WebsiteURL desc'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetOrderbyEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetOrderbyEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    ValidityStartDate: 'ValidityStartDate',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    SearchUrlAddress: 'SearchURLAddress',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    UrlFieldLength: 'URLFieldLength',
    WebsiteUrl: 'WebsiteURL'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetSelectEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetSelectEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetSelectEnum];
