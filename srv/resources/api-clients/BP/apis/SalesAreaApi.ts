/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERACustSalesPartnerFuncType,
  APIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate,
  APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType,
  APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate,
  APIBUSINESSPARTNERACustomerSalesAreaTaxType,
  APIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate,
  APIBUSINESSPARTNERACustomerSalesAreaTextType,
  APIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate,
  APIBUSINESSPARTNERACustomerSalesAreaType,
  APIBUSINESSPARTNERACustomerSalesAreaTypeCreate,
  APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate,
  CollectionOfACustSalesPartnerFuncType,
  CollectionOfACustSlsAreaAddrDepdntInfoType,
  CollectionOfACustomerSalesAreaTaxType,
  CollectionOfACustomerSalesAreaTextType,
  CollectionOfACustomerSalesAreaType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERACustSalesPartnerFuncTypeFromJSON,
    APIBUSINESSPARTNERACustSalesPartnerFuncTypeToJSON,
    APIBUSINESSPARTNERACustSalesPartnerFuncTypeCreateFromJSON,
    APIBUSINESSPARTNERACustSalesPartnerFuncTypeCreateToJSON,
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeFromJSON,
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeToJSON,
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreateFromJSON,
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreateToJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTaxTypeFromJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTaxTypeToJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreateFromJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreateToJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTextTypeFromJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTextTypeToJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTextTypeCreateFromJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTextTypeCreateToJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTypeFromJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTypeToJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTypeCreateFromJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTypeCreateToJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTypeUpdateFromJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTypeUpdateToJSON,
    CollectionOfACustSalesPartnerFuncTypeFromJSON,
    CollectionOfACustSalesPartnerFuncTypeToJSON,
    CollectionOfACustSlsAreaAddrDepdntInfoTypeFromJSON,
    CollectionOfACustSlsAreaAddrDepdntInfoTypeToJSON,
    CollectionOfACustomerSalesAreaTaxTypeFromJSON,
    CollectionOfACustomerSalesAreaTaxTypeToJSON,
    CollectionOfACustomerSalesAreaTextTypeFromJSON,
    CollectionOfACustomerSalesAreaTextTypeToJSON,
    CollectionOfACustomerSalesAreaTypeFromJSON,
    CollectionOfACustomerSalesAreaTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ACustomerCustomerToCustomerSalesAreaGetRequest {
    customer: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCustomerToCustomerSalesAreaGetOrderbyEnum>;
    $select?: Set<ACustomerCustomerToCustomerSalesAreaGetSelectEnum>;
    $expand?: Set<ACustomerCustomerToCustomerSalesAreaGetExpandEnum>;
}

export interface ACustomerCustomerToCustomerSalesAreaPostRequest {
    customer: string;
    aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate: APIBUSINESSPARTNERACustomerSalesAreaTypeCreate;
}

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    $select?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetSelectEnum>;
    $expand?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetExpandEnum>;
}

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatchRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    aPIBUSINESSPARTNERACustomerSalesAreaTypeUpdate: APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate;
}

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetOrderbyEnum>;
    $select?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetSelectEnum>;
}

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate: APIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate;
}

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetOrderbyEnum>;
    $select?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetSelectEnum>;
    $expand?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetExpandEnum>;
}

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate: APIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate;
}

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetOrderbyEnum>;
    $select?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetSelectEnum>;
}

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate: APIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate;
}

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetOrderbyEnum>;
    $select?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetSelectEnum>;
}

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate: APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate;
}

export interface ACustomerSalesAreaGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerSalesAreaGetOrderbyEnum>;
    $select?: Set<ACustomerSalesAreaGetSelectEnum>;
    $expand?: Set<ACustomerSalesAreaGetExpandEnum>;
}

export interface ACustomerSalesAreaPostRequest {
    aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate: APIBUSINESSPARTNERACustomerSalesAreaTypeCreate;
}

/**
 * 
 */
export class SalesAreaApi extends runtime.BaseAPI {

    /**
     * Retrieves customer sales area data fields of all the available records in the system.
     * Retrieves customer sales area data.
     */
    async aCustomerCustomerToCustomerSalesAreaGetRaw(requestParameters: ACustomerCustomerToCustomerSalesAreaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerSalesAreaType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustomerSalesAreaGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustomerSalesArea`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerSalesAreaTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer sales area data fields of all the available records in the system.
     * Retrieves customer sales area data.
     */
    async aCustomerCustomerToCustomerSalesAreaGet(requestParameters: ACustomerCustomerToCustomerSalesAreaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerSalesAreaType> {
        const response = await this.aCustomerCustomerToCustomerSalesAreaGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates sales data linked to a customer including Sales Area Tax, Partner Functions, and Sales Area Text.
     * Creates customer sales data.
     */
    async aCustomerCustomerToCustomerSalesAreaPostRaw(requestParameters: ACustomerCustomerToCustomerSalesAreaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerSalesAreaType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustomerSalesAreaPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate was null or undefined when calling aCustomerCustomerToCustomerSalesAreaPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustomerSalesArea`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerSalesAreaTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerSalesAreaTypeFromJSON(jsonValue));
    }

    /**
     * Creates sales data linked to a customer including Sales Area Tax, Partner Functions, and Sales Area Text.
     * Creates customer sales data.
     */
    async aCustomerCustomerToCustomerSalesAreaPost(requestParameters: ACustomerCustomerToCustomerSalesAreaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerSalesAreaType> {
        const response = await this.aCustomerCustomerToCustomerSalesAreaPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves customer sales area data by using Customer, SalesOrganization, DistributionChannel and Division.
     * Retrieves customer sales area data by key fields.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerSalesAreaType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerSalesAreaTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer sales area data by using Customer, SalesOrganization, DistributionChannel and Division.
     * Retrieves customer sales area data by key fields.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerSalesAreaType> {
        const response = await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates sales data identified by Customer, SalesOrganization, DistributionChannel and Division.
     * Updates customer sales data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatchRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerSalesAreaTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTypeUpdate was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerSalesAreaTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates sales data identified by Customer, SalesOrganization, DistributionChannel and Division.
     * Updates customer sales data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves partner function fields of all the available records in the system linked to customer sales areas.
     * Retrieves customer sales area partner function records.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustSalesPartnerFuncType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')/to_PartnerFunction`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustSalesPartnerFuncTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves partner function fields of all the available records in the system linked to customer sales areas.
     * Retrieves customer sales area partner function records.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustSalesPartnerFuncType> {
        const response = await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new partner function record. Partner counter will be automatically determined if a similar partner function already exist.
     * Creates a new partner function record linked to customer sales area.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustSalesPartnerFuncType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')/to_PartnerFunction`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustSalesPartnerFuncTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustSalesPartnerFuncTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new partner function record. Partner counter will be automatically determined if a similar partner function already exist.
     * Creates a new partner function record linked to customer sales area.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustSalesPartnerFuncType> {
        const response = await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves customer sales area data fields of all the available records in the system.
     * Retrieves customer sales area data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerSalesAreaTaxType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')/to_SalesAreaTax`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerSalesAreaTaxTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer sales area data fields of all the available records in the system.
     * Retrieves customer sales area data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerSalesAreaTaxType> {
        const response = await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves customer sales area tax data fields of all the available records in the system.
     * Retrieves customer sales area tax data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerSalesAreaTaxType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')/to_SalesAreaTax`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerSalesAreaTaxTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer sales area tax data fields of all the available records in the system.
     * Retrieves customer sales area tax data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerSalesAreaTaxType> {
        const response = await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves customer sales area text  fields of all the available records in the system linked to customer sales areas.
     * Retrieves customer sales area text data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerSalesAreaTextType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')/to_SalesAreaText`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerSalesAreaTextTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer sales area text  fields of all the available records in the system linked to customer sales areas.
     * Retrieves customer sales area text data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerSalesAreaTextType> {
        const response = await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds new sales area text record in the language specified. If no language is specified, the text will be created in system language.
     * Creates a new customer sales area text data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerSalesAreaTextType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')/to_SalesAreaText`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerSalesAreaTextTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerSalesAreaTextTypeFromJSON(jsonValue));
    }

    /**
     * Adds new sales area text record in the language specified. If no language is specified, the text will be created in system language.
     * Creates a new customer sales area text data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerSalesAreaTextType> {
        const response = await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves address dependent customer sales area data fields of all the available records in the system.
     * Retrieves address dependent customer sales area data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustSlsAreaAddrDepdntInfoType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')/to_SlsAreaAddrDepdntInfo`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustSlsAreaAddrDepdntInfoTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent customer sales area data fields of all the available records in the system.
     * Retrieves address dependent customer sales area data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustSlsAreaAddrDepdntInfoType> {
        const response = await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new address dependent customer sales area data.
     * Creates new address dependent customer sales area data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')/to_SlsAreaAddrDepdntInfo`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeFromJSON(jsonValue));
    }

    /**
     * Creates new address dependent customer sales area data.
     * Creates new address dependent customer sales area data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType> {
        const response = await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves customer sales area data fields of all the available records in the system.
     * Retrieves customer sales area data.
     */
    async aCustomerSalesAreaGetRaw(requestParameters: ACustomerSalesAreaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerSalesAreaType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerSalesAreaTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer sales area data fields of all the available records in the system.
     * Retrieves customer sales area data.
     */
    async aCustomerSalesAreaGet(requestParameters: ACustomerSalesAreaGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerSalesAreaType> {
        const response = await this.aCustomerSalesAreaGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates sales data linked to a customer including Sales Area Tax, Partner Functions, and Sales Area Text.
     * Creates customer sales data.
     */
    async aCustomerSalesAreaPostRaw(requestParameters: ACustomerSalesAreaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerSalesAreaType>> {
        if (requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate was null or undefined when calling aCustomerSalesAreaPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerSalesAreaTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerSalesAreaTypeFromJSON(jsonValue));
    }

    /**
     * Creates sales data linked to a customer including Sales Area Tax, Partner Functions, and Sales Area Text.
     * Creates customer sales data.
     */
    async aCustomerSalesAreaPost(requestParameters: ACustomerSalesAreaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerSalesAreaType> {
        const response = await this.aCustomerSalesAreaPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ACustomerCustomerToCustomerSalesAreaGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    AccountByCustomer: 'AccountByCustomer',
    AccountByCustomerDesc: 'AccountByCustomer desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    BillingIsBlockedForCustomer: 'BillingIsBlockedForCustomer',
    BillingIsBlockedForCustomerDesc: 'BillingIsBlockedForCustomer desc',
    CompleteDeliveryIsDefined: 'CompleteDeliveryIsDefined',
    CompleteDeliveryIsDefinedDesc: 'CompleteDeliveryIsDefined desc',
    CreditControlArea: 'CreditControlArea',
    CreditControlAreaDesc: 'CreditControlArea desc',
    Currency: 'Currency',
    CurrencyDesc: 'Currency desc',
    CustIsRlvtForSettlmtMgmt: 'CustIsRlvtForSettlmtMgmt',
    CustIsRlvtForSettlmtMgmtDesc: 'CustIsRlvtForSettlmtMgmt desc',
    CustomerAbcClassification: 'CustomerABCClassification',
    CustomerAbcClassificationDesc: 'CustomerABCClassification desc',
    CustomerAccountAssignmentGroup: 'CustomerAccountAssignmentGroup',
    CustomerAccountAssignmentGroupDesc: 'CustomerAccountAssignmentGroup desc',
    CustomerGroup: 'CustomerGroup',
    CustomerGroupDesc: 'CustomerGroup desc',
    CustomerIsRebateRelevant: 'CustomerIsRebateRelevant',
    CustomerIsRebateRelevantDesc: 'CustomerIsRebateRelevant desc',
    CustomerPaymentTerms: 'CustomerPaymentTerms',
    CustomerPaymentTermsDesc: 'CustomerPaymentTerms desc',
    CustomerPriceGroup: 'CustomerPriceGroup',
    CustomerPriceGroupDesc: 'CustomerPriceGroup desc',
    CustomerPricingProcedure: 'CustomerPricingProcedure',
    CustomerPricingProcedureDesc: 'CustomerPricingProcedure desc',
    CustProdProposalProcedure: 'CustProdProposalProcedure',
    CustProdProposalProcedureDesc: 'CustProdProposalProcedure desc',
    DeliveryIsBlockedForCustomer: 'DeliveryIsBlockedForCustomer',
    DeliveryIsBlockedForCustomerDesc: 'DeliveryIsBlockedForCustomer desc',
    DeliveryPriority: 'DeliveryPriority',
    DeliveryPriorityDesc: 'DeliveryPriority desc',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsClassificationDesc: 'IncotermsClassification desc',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsLocation2Desc: 'IncotermsLocation2 desc',
    IncotermsVersion: 'IncotermsVersion',
    IncotermsVersionDesc: 'IncotermsVersion desc',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsLocation1Desc: 'IncotermsLocation1 desc',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc1AddlUuidDesc: 'IncotermsSupChnLoc1AddlUUID desc',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnLoc2AddlUuidDesc: 'IncotermsSupChnLoc2AddlUUID desc',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    IncotermsSupChnDvtgLocAddlUuidDesc: 'IncotermsSupChnDvtgLocAddlUUID desc',
    DeletionIndicator: 'DeletionIndicator',
    DeletionIndicatorDesc: 'DeletionIndicator desc',
    IncotermsTransferLocation: 'IncotermsTransferLocation',
    IncotermsTransferLocationDesc: 'IncotermsTransferLocation desc',
    InspSbstHasNoTimeOrQuantity: 'InspSbstHasNoTimeOrQuantity',
    InspSbstHasNoTimeOrQuantityDesc: 'InspSbstHasNoTimeOrQuantity desc',
    InvoiceDate: 'InvoiceDate',
    InvoiceDateDesc: 'InvoiceDate desc',
    ItemOrderProbabilityInPercent: 'ItemOrderProbabilityInPercent',
    ItemOrderProbabilityInPercentDesc: 'ItemOrderProbabilityInPercent desc',
    ManualInvoiceMaintIsRelevant: 'ManualInvoiceMaintIsRelevant',
    ManualInvoiceMaintIsRelevantDesc: 'ManualInvoiceMaintIsRelevant desc',
    MaxNmbrOfPartialDelivery: 'MaxNmbrOfPartialDelivery',
    MaxNmbrOfPartialDeliveryDesc: 'MaxNmbrOfPartialDelivery desc',
    OrderCombinationIsAllowed: 'OrderCombinationIsAllowed',
    OrderCombinationIsAllowedDesc: 'OrderCombinationIsAllowed desc',
    OrderIsBlockedForCustomer: 'OrderIsBlockedForCustomer',
    OrderIsBlockedForCustomerDesc: 'OrderIsBlockedForCustomer desc',
    OverdelivTolrtdLmtRatioInPct: 'OverdelivTolrtdLmtRatioInPct',
    OverdelivTolrtdLmtRatioInPctDesc: 'OverdelivTolrtdLmtRatioInPct desc',
    PartialDeliveryIsAllowed: 'PartialDeliveryIsAllowed',
    PartialDeliveryIsAllowedDesc: 'PartialDeliveryIsAllowed desc',
    PriceListType: 'PriceListType',
    PriceListTypeDesc: 'PriceListType desc',
    ProductUnitGroup: 'ProductUnitGroup',
    ProductUnitGroupDesc: 'ProductUnitGroup desc',
    ProofOfDeliveryTimeValue: 'ProofOfDeliveryTimeValue',
    ProofOfDeliveryTimeValueDesc: 'ProofOfDeliveryTimeValue desc',
    SalesGroup: 'SalesGroup',
    SalesGroupDesc: 'SalesGroup desc',
    SalesItemProposal: 'SalesItemProposal',
    SalesItemProposalDesc: 'SalesItemProposal desc',
    SalesOffice: 'SalesOffice',
    SalesOfficeDesc: 'SalesOffice desc',
    ShippingCondition: 'ShippingCondition',
    ShippingConditionDesc: 'ShippingCondition desc',
    SlsDocIsRlvtForProofOfDeliv: 'SlsDocIsRlvtForProofOfDeliv',
    SlsDocIsRlvtForProofOfDelivDesc: 'SlsDocIsRlvtForProofOfDeliv desc',
    SlsUnlmtdOvrdelivIsAllwd: 'SlsUnlmtdOvrdelivIsAllwd',
    SlsUnlmtdOvrdelivIsAllwdDesc: 'SlsUnlmtdOvrdelivIsAllwd desc',
    SupplyingPlant: 'SupplyingPlant',
    SupplyingPlantDesc: 'SupplyingPlant desc',
    SalesDistrict: 'SalesDistrict',
    SalesDistrictDesc: 'SalesDistrict desc',
    UnderdelivTolrtdLmtRatioInPct: 'UnderdelivTolrtdLmtRatioInPct',
    UnderdelivTolrtdLmtRatioInPctDesc: 'UnderdelivTolrtdLmtRatioInPct desc',
    InvoiceListSchedule: 'InvoiceListSchedule',
    InvoiceListScheduleDesc: 'InvoiceListSchedule desc',
    ExchangeRateType: 'ExchangeRateType',
    ExchangeRateTypeDesc: 'ExchangeRateType desc',
    AdditionalCustomerGroup1: 'AdditionalCustomerGroup1',
    AdditionalCustomerGroup1Desc: 'AdditionalCustomerGroup1 desc',
    AdditionalCustomerGroup2: 'AdditionalCustomerGroup2',
    AdditionalCustomerGroup2Desc: 'AdditionalCustomerGroup2 desc',
    AdditionalCustomerGroup3: 'AdditionalCustomerGroup3',
    AdditionalCustomerGroup3Desc: 'AdditionalCustomerGroup3 desc',
    AdditionalCustomerGroup4: 'AdditionalCustomerGroup4',
    AdditionalCustomerGroup4Desc: 'AdditionalCustomerGroup4 desc',
    AdditionalCustomerGroup5: 'AdditionalCustomerGroup5',
    AdditionalCustomerGroup5Desc: 'AdditionalCustomerGroup5 desc',
    PaymentGuaranteeProcedure: 'PaymentGuaranteeProcedure',
    PaymentGuaranteeProcedureDesc: 'PaymentGuaranteeProcedure desc',
    CustomerAccountGroup: 'CustomerAccountGroup',
    CustomerAccountGroupDesc: 'CustomerAccountGroup desc'
} as const;
export type ACustomerCustomerToCustomerSalesAreaGetOrderbyEnum = typeof ACustomerCustomerToCustomerSalesAreaGetOrderbyEnum[keyof typeof ACustomerCustomerToCustomerSalesAreaGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerSalesAreaGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    AccountByCustomer: 'AccountByCustomer',
    AuthorizationGroup: 'AuthorizationGroup',
    BillingIsBlockedForCustomer: 'BillingIsBlockedForCustomer',
    CompleteDeliveryIsDefined: 'CompleteDeliveryIsDefined',
    CreditControlArea: 'CreditControlArea',
    Currency: 'Currency',
    CustIsRlvtForSettlmtMgmt: 'CustIsRlvtForSettlmtMgmt',
    CustomerAbcClassification: 'CustomerABCClassification',
    CustomerAccountAssignmentGroup: 'CustomerAccountAssignmentGroup',
    CustomerGroup: 'CustomerGroup',
    CustomerIsRebateRelevant: 'CustomerIsRebateRelevant',
    CustomerPaymentTerms: 'CustomerPaymentTerms',
    CustomerPriceGroup: 'CustomerPriceGroup',
    CustomerPricingProcedure: 'CustomerPricingProcedure',
    CustProdProposalProcedure: 'CustProdProposalProcedure',
    DeliveryIsBlockedForCustomer: 'DeliveryIsBlockedForCustomer',
    DeliveryPriority: 'DeliveryPriority',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsVersion: 'IncotermsVersion',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    DeletionIndicator: 'DeletionIndicator',
    IncotermsTransferLocation: 'IncotermsTransferLocation',
    InspSbstHasNoTimeOrQuantity: 'InspSbstHasNoTimeOrQuantity',
    InvoiceDate: 'InvoiceDate',
    ItemOrderProbabilityInPercent: 'ItemOrderProbabilityInPercent',
    ManualInvoiceMaintIsRelevant: 'ManualInvoiceMaintIsRelevant',
    MaxNmbrOfPartialDelivery: 'MaxNmbrOfPartialDelivery',
    OrderCombinationIsAllowed: 'OrderCombinationIsAllowed',
    OrderIsBlockedForCustomer: 'OrderIsBlockedForCustomer',
    OverdelivTolrtdLmtRatioInPct: 'OverdelivTolrtdLmtRatioInPct',
    PartialDeliveryIsAllowed: 'PartialDeliveryIsAllowed',
    PriceListType: 'PriceListType',
    ProductUnitGroup: 'ProductUnitGroup',
    ProofOfDeliveryTimeValue: 'ProofOfDeliveryTimeValue',
    SalesGroup: 'SalesGroup',
    SalesItemProposal: 'SalesItemProposal',
    SalesOffice: 'SalesOffice',
    ShippingCondition: 'ShippingCondition',
    SlsDocIsRlvtForProofOfDeliv: 'SlsDocIsRlvtForProofOfDeliv',
    SlsUnlmtdOvrdelivIsAllwd: 'SlsUnlmtdOvrdelivIsAllwd',
    SupplyingPlant: 'SupplyingPlant',
    SalesDistrict: 'SalesDistrict',
    UnderdelivTolrtdLmtRatioInPct: 'UnderdelivTolrtdLmtRatioInPct',
    InvoiceListSchedule: 'InvoiceListSchedule',
    ExchangeRateType: 'ExchangeRateType',
    AdditionalCustomerGroup1: 'AdditionalCustomerGroup1',
    AdditionalCustomerGroup2: 'AdditionalCustomerGroup2',
    AdditionalCustomerGroup3: 'AdditionalCustomerGroup3',
    AdditionalCustomerGroup4: 'AdditionalCustomerGroup4',
    AdditionalCustomerGroup5: 'AdditionalCustomerGroup5',
    PaymentGuaranteeProcedure: 'PaymentGuaranteeProcedure',
    CustomerAccountGroup: 'CustomerAccountGroup'
} as const;
export type ACustomerCustomerToCustomerSalesAreaGetSelectEnum = typeof ACustomerCustomerToCustomerSalesAreaGetSelectEnum[keyof typeof ACustomerCustomerToCustomerSalesAreaGetSelectEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerSalesAreaGetExpandEnum = {
    Star: '*',
    ToPartnerFunction: 'to_PartnerFunction',
    ToSalesAreaTax: 'to_SalesAreaTax',
    ToSalesAreaText: 'to_SalesAreaText',
    ToSlsAreaAddrDepdntInfo: 'to_SlsAreaAddrDepdntInfo'
} as const;
export type ACustomerCustomerToCustomerSalesAreaGetExpandEnum = typeof ACustomerCustomerToCustomerSalesAreaGetExpandEnum[keyof typeof ACustomerCustomerToCustomerSalesAreaGetExpandEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    AccountByCustomer: 'AccountByCustomer',
    AuthorizationGroup: 'AuthorizationGroup',
    BillingIsBlockedForCustomer: 'BillingIsBlockedForCustomer',
    CompleteDeliveryIsDefined: 'CompleteDeliveryIsDefined',
    CreditControlArea: 'CreditControlArea',
    Currency: 'Currency',
    CustIsRlvtForSettlmtMgmt: 'CustIsRlvtForSettlmtMgmt',
    CustomerAbcClassification: 'CustomerABCClassification',
    CustomerAccountAssignmentGroup: 'CustomerAccountAssignmentGroup',
    CustomerGroup: 'CustomerGroup',
    CustomerIsRebateRelevant: 'CustomerIsRebateRelevant',
    CustomerPaymentTerms: 'CustomerPaymentTerms',
    CustomerPriceGroup: 'CustomerPriceGroup',
    CustomerPricingProcedure: 'CustomerPricingProcedure',
    CustProdProposalProcedure: 'CustProdProposalProcedure',
    DeliveryIsBlockedForCustomer: 'DeliveryIsBlockedForCustomer',
    DeliveryPriority: 'DeliveryPriority',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsVersion: 'IncotermsVersion',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    DeletionIndicator: 'DeletionIndicator',
    IncotermsTransferLocation: 'IncotermsTransferLocation',
    InspSbstHasNoTimeOrQuantity: 'InspSbstHasNoTimeOrQuantity',
    InvoiceDate: 'InvoiceDate',
    ItemOrderProbabilityInPercent: 'ItemOrderProbabilityInPercent',
    ManualInvoiceMaintIsRelevant: 'ManualInvoiceMaintIsRelevant',
    MaxNmbrOfPartialDelivery: 'MaxNmbrOfPartialDelivery',
    OrderCombinationIsAllowed: 'OrderCombinationIsAllowed',
    OrderIsBlockedForCustomer: 'OrderIsBlockedForCustomer',
    OverdelivTolrtdLmtRatioInPct: 'OverdelivTolrtdLmtRatioInPct',
    PartialDeliveryIsAllowed: 'PartialDeliveryIsAllowed',
    PriceListType: 'PriceListType',
    ProductUnitGroup: 'ProductUnitGroup',
    ProofOfDeliveryTimeValue: 'ProofOfDeliveryTimeValue',
    SalesGroup: 'SalesGroup',
    SalesItemProposal: 'SalesItemProposal',
    SalesOffice: 'SalesOffice',
    ShippingCondition: 'ShippingCondition',
    SlsDocIsRlvtForProofOfDeliv: 'SlsDocIsRlvtForProofOfDeliv',
    SlsUnlmtdOvrdelivIsAllwd: 'SlsUnlmtdOvrdelivIsAllwd',
    SupplyingPlant: 'SupplyingPlant',
    SalesDistrict: 'SalesDistrict',
    UnderdelivTolrtdLmtRatioInPct: 'UnderdelivTolrtdLmtRatioInPct',
    InvoiceListSchedule: 'InvoiceListSchedule',
    ExchangeRateType: 'ExchangeRateType',
    AdditionalCustomerGroup1: 'AdditionalCustomerGroup1',
    AdditionalCustomerGroup2: 'AdditionalCustomerGroup2',
    AdditionalCustomerGroup3: 'AdditionalCustomerGroup3',
    AdditionalCustomerGroup4: 'AdditionalCustomerGroup4',
    AdditionalCustomerGroup5: 'AdditionalCustomerGroup5',
    PaymentGuaranteeProcedure: 'PaymentGuaranteeProcedure',
    CustomerAccountGroup: 'CustomerAccountGroup'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetSelectEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetSelectEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetSelectEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetExpandEnum = {
    Star: '*',
    ToPartnerFunction: 'to_PartnerFunction',
    ToSalesAreaTax: 'to_SalesAreaTax',
    ToSalesAreaText: 'to_SalesAreaText',
    ToSlsAreaAddrDepdntInfo: 'to_SlsAreaAddrDepdntInfo'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetExpandEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetExpandEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetExpandEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    PartnerCounter: 'PartnerCounter',
    PartnerCounterDesc: 'PartnerCounter desc',
    PartnerFunction: 'PartnerFunction',
    PartnerFunctionDesc: 'PartnerFunction desc',
    BpCustomerNumber: 'BPCustomerNumber',
    BpCustomerNumberDesc: 'BPCustomerNumber desc',
    CustomerPartnerDescription: 'CustomerPartnerDescription',
    CustomerPartnerDescriptionDesc: 'CustomerPartnerDescription desc',
    DefaultPartner: 'DefaultPartner',
    DefaultPartnerDesc: 'DefaultPartner desc',
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    PersonnelNumber: 'PersonnelNumber',
    PersonnelNumberDesc: 'PersonnelNumber desc',
    ContactPerson: 'ContactPerson',
    ContactPersonDesc: 'ContactPerson desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetOrderbyEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetOrderbyEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    PartnerCounter: 'PartnerCounter',
    PartnerFunction: 'PartnerFunction',
    BpCustomerNumber: 'BPCustomerNumber',
    CustomerPartnerDescription: 'CustomerPartnerDescription',
    DefaultPartner: 'DefaultPartner',
    Supplier: 'Supplier',
    PersonnelNumber: 'PersonnelNumber',
    ContactPerson: 'ContactPerson',
    AddressId: 'AddressID',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetSelectEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetSelectEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetSelectEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    DepartureCountry: 'DepartureCountry',
    DepartureCountryDesc: 'DepartureCountry desc',
    CustomerTaxCategory: 'CustomerTaxCategory',
    CustomerTaxCategoryDesc: 'CustomerTaxCategory desc',
    CustomerTaxClassification: 'CustomerTaxClassification',
    CustomerTaxClassificationDesc: 'CustomerTaxClassification desc'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetOrderbyEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetOrderbyEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    DepartureCountry: 'DepartureCountry',
    CustomerTaxCategory: 'CustomerTaxCategory',
    CustomerTaxClassification: 'CustomerTaxClassification'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetSelectEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetSelectEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetSelectEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetExpandEnum = {
    Star: '*',
    ToSlsAreaAddrDepdntTax: 'to_SlsAreaAddrDepdntTax'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetExpandEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetExpandEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetExpandEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    LongTextId: 'LongTextID',
    LongTextIdDesc: 'LongTextID desc'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetOrderbyEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetOrderbyEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    Language: 'Language',
    LongTextId: 'LongTextID',
    LongText: 'LongText'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetSelectEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetSelectEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetSelectEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsClassificationDesc: 'IncotermsClassification desc',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsLocation1Desc: 'IncotermsLocation1 desc',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsLocation2Desc: 'IncotermsLocation2 desc',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc1AddlUuidDesc: 'IncotermsSupChnLoc1AddlUUID desc',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnLoc2AddlUuidDesc: 'IncotermsSupChnLoc2AddlUUID desc',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    IncotermsSupChnDvtgLocAddlUuidDesc: 'IncotermsSupChnDvtgLocAddlUUID desc',
    DeliveryIsBlocked: 'DeliveryIsBlocked',
    DeliveryIsBlockedDesc: 'DeliveryIsBlocked desc',
    SalesOffice: 'SalesOffice',
    SalesOfficeDesc: 'SalesOffice desc',
    SalesGroup: 'SalesGroup',
    SalesGroupDesc: 'SalesGroup desc',
    ShippingCondition: 'ShippingCondition',
    ShippingConditionDesc: 'ShippingCondition desc',
    SupplyingPlant: 'SupplyingPlant',
    SupplyingPlantDesc: 'SupplyingPlant desc',
    IncotermsVersion: 'IncotermsVersion',
    IncotermsVersionDesc: 'IncotermsVersion desc'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetOrderbyEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetOrderbyEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    AddressId: 'AddressID',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    DeliveryIsBlocked: 'DeliveryIsBlocked',
    SalesOffice: 'SalesOffice',
    SalesGroup: 'SalesGroup',
    ShippingCondition: 'ShippingCondition',
    SupplyingPlant: 'SupplyingPlant',
    IncotermsVersion: 'IncotermsVersion'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetSelectEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetSelectEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetSelectEnum];
/**
 * @export
 */
export const ACustomerSalesAreaGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    AccountByCustomer: 'AccountByCustomer',
    AccountByCustomerDesc: 'AccountByCustomer desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    BillingIsBlockedForCustomer: 'BillingIsBlockedForCustomer',
    BillingIsBlockedForCustomerDesc: 'BillingIsBlockedForCustomer desc',
    CompleteDeliveryIsDefined: 'CompleteDeliveryIsDefined',
    CompleteDeliveryIsDefinedDesc: 'CompleteDeliveryIsDefined desc',
    CreditControlArea: 'CreditControlArea',
    CreditControlAreaDesc: 'CreditControlArea desc',
    Currency: 'Currency',
    CurrencyDesc: 'Currency desc',
    CustIsRlvtForSettlmtMgmt: 'CustIsRlvtForSettlmtMgmt',
    CustIsRlvtForSettlmtMgmtDesc: 'CustIsRlvtForSettlmtMgmt desc',
    CustomerAbcClassification: 'CustomerABCClassification',
    CustomerAbcClassificationDesc: 'CustomerABCClassification desc',
    CustomerAccountAssignmentGroup: 'CustomerAccountAssignmentGroup',
    CustomerAccountAssignmentGroupDesc: 'CustomerAccountAssignmentGroup desc',
    CustomerGroup: 'CustomerGroup',
    CustomerGroupDesc: 'CustomerGroup desc',
    CustomerIsRebateRelevant: 'CustomerIsRebateRelevant',
    CustomerIsRebateRelevantDesc: 'CustomerIsRebateRelevant desc',
    CustomerPaymentTerms: 'CustomerPaymentTerms',
    CustomerPaymentTermsDesc: 'CustomerPaymentTerms desc',
    CustomerPriceGroup: 'CustomerPriceGroup',
    CustomerPriceGroupDesc: 'CustomerPriceGroup desc',
    CustomerPricingProcedure: 'CustomerPricingProcedure',
    CustomerPricingProcedureDesc: 'CustomerPricingProcedure desc',
    CustProdProposalProcedure: 'CustProdProposalProcedure',
    CustProdProposalProcedureDesc: 'CustProdProposalProcedure desc',
    DeliveryIsBlockedForCustomer: 'DeliveryIsBlockedForCustomer',
    DeliveryIsBlockedForCustomerDesc: 'DeliveryIsBlockedForCustomer desc',
    DeliveryPriority: 'DeliveryPriority',
    DeliveryPriorityDesc: 'DeliveryPriority desc',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsClassificationDesc: 'IncotermsClassification desc',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsLocation2Desc: 'IncotermsLocation2 desc',
    IncotermsVersion: 'IncotermsVersion',
    IncotermsVersionDesc: 'IncotermsVersion desc',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsLocation1Desc: 'IncotermsLocation1 desc',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc1AddlUuidDesc: 'IncotermsSupChnLoc1AddlUUID desc',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnLoc2AddlUuidDesc: 'IncotermsSupChnLoc2AddlUUID desc',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    IncotermsSupChnDvtgLocAddlUuidDesc: 'IncotermsSupChnDvtgLocAddlUUID desc',
    DeletionIndicator: 'DeletionIndicator',
    DeletionIndicatorDesc: 'DeletionIndicator desc',
    IncotermsTransferLocation: 'IncotermsTransferLocation',
    IncotermsTransferLocationDesc: 'IncotermsTransferLocation desc',
    InspSbstHasNoTimeOrQuantity: 'InspSbstHasNoTimeOrQuantity',
    InspSbstHasNoTimeOrQuantityDesc: 'InspSbstHasNoTimeOrQuantity desc',
    InvoiceDate: 'InvoiceDate',
    InvoiceDateDesc: 'InvoiceDate desc',
    ItemOrderProbabilityInPercent: 'ItemOrderProbabilityInPercent',
    ItemOrderProbabilityInPercentDesc: 'ItemOrderProbabilityInPercent desc',
    ManualInvoiceMaintIsRelevant: 'ManualInvoiceMaintIsRelevant',
    ManualInvoiceMaintIsRelevantDesc: 'ManualInvoiceMaintIsRelevant desc',
    MaxNmbrOfPartialDelivery: 'MaxNmbrOfPartialDelivery',
    MaxNmbrOfPartialDeliveryDesc: 'MaxNmbrOfPartialDelivery desc',
    OrderCombinationIsAllowed: 'OrderCombinationIsAllowed',
    OrderCombinationIsAllowedDesc: 'OrderCombinationIsAllowed desc',
    OrderIsBlockedForCustomer: 'OrderIsBlockedForCustomer',
    OrderIsBlockedForCustomerDesc: 'OrderIsBlockedForCustomer desc',
    OverdelivTolrtdLmtRatioInPct: 'OverdelivTolrtdLmtRatioInPct',
    OverdelivTolrtdLmtRatioInPctDesc: 'OverdelivTolrtdLmtRatioInPct desc',
    PartialDeliveryIsAllowed: 'PartialDeliveryIsAllowed',
    PartialDeliveryIsAllowedDesc: 'PartialDeliveryIsAllowed desc',
    PriceListType: 'PriceListType',
    PriceListTypeDesc: 'PriceListType desc',
    ProductUnitGroup: 'ProductUnitGroup',
    ProductUnitGroupDesc: 'ProductUnitGroup desc',
    ProofOfDeliveryTimeValue: 'ProofOfDeliveryTimeValue',
    ProofOfDeliveryTimeValueDesc: 'ProofOfDeliveryTimeValue desc',
    SalesGroup: 'SalesGroup',
    SalesGroupDesc: 'SalesGroup desc',
    SalesItemProposal: 'SalesItemProposal',
    SalesItemProposalDesc: 'SalesItemProposal desc',
    SalesOffice: 'SalesOffice',
    SalesOfficeDesc: 'SalesOffice desc',
    ShippingCondition: 'ShippingCondition',
    ShippingConditionDesc: 'ShippingCondition desc',
    SlsDocIsRlvtForProofOfDeliv: 'SlsDocIsRlvtForProofOfDeliv',
    SlsDocIsRlvtForProofOfDelivDesc: 'SlsDocIsRlvtForProofOfDeliv desc',
    SlsUnlmtdOvrdelivIsAllwd: 'SlsUnlmtdOvrdelivIsAllwd',
    SlsUnlmtdOvrdelivIsAllwdDesc: 'SlsUnlmtdOvrdelivIsAllwd desc',
    SupplyingPlant: 'SupplyingPlant',
    SupplyingPlantDesc: 'SupplyingPlant desc',
    SalesDistrict: 'SalesDistrict',
    SalesDistrictDesc: 'SalesDistrict desc',
    UnderdelivTolrtdLmtRatioInPct: 'UnderdelivTolrtdLmtRatioInPct',
    UnderdelivTolrtdLmtRatioInPctDesc: 'UnderdelivTolrtdLmtRatioInPct desc',
    InvoiceListSchedule: 'InvoiceListSchedule',
    InvoiceListScheduleDesc: 'InvoiceListSchedule desc',
    ExchangeRateType: 'ExchangeRateType',
    ExchangeRateTypeDesc: 'ExchangeRateType desc',
    AdditionalCustomerGroup1: 'AdditionalCustomerGroup1',
    AdditionalCustomerGroup1Desc: 'AdditionalCustomerGroup1 desc',
    AdditionalCustomerGroup2: 'AdditionalCustomerGroup2',
    AdditionalCustomerGroup2Desc: 'AdditionalCustomerGroup2 desc',
    AdditionalCustomerGroup3: 'AdditionalCustomerGroup3',
    AdditionalCustomerGroup3Desc: 'AdditionalCustomerGroup3 desc',
    AdditionalCustomerGroup4: 'AdditionalCustomerGroup4',
    AdditionalCustomerGroup4Desc: 'AdditionalCustomerGroup4 desc',
    AdditionalCustomerGroup5: 'AdditionalCustomerGroup5',
    AdditionalCustomerGroup5Desc: 'AdditionalCustomerGroup5 desc',
    PaymentGuaranteeProcedure: 'PaymentGuaranteeProcedure',
    PaymentGuaranteeProcedureDesc: 'PaymentGuaranteeProcedure desc',
    CustomerAccountGroup: 'CustomerAccountGroup',
    CustomerAccountGroupDesc: 'CustomerAccountGroup desc'
} as const;
export type ACustomerSalesAreaGetOrderbyEnum = typeof ACustomerSalesAreaGetOrderbyEnum[keyof typeof ACustomerSalesAreaGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerSalesAreaGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    AccountByCustomer: 'AccountByCustomer',
    AuthorizationGroup: 'AuthorizationGroup',
    BillingIsBlockedForCustomer: 'BillingIsBlockedForCustomer',
    CompleteDeliveryIsDefined: 'CompleteDeliveryIsDefined',
    CreditControlArea: 'CreditControlArea',
    Currency: 'Currency',
    CustIsRlvtForSettlmtMgmt: 'CustIsRlvtForSettlmtMgmt',
    CustomerAbcClassification: 'CustomerABCClassification',
    CustomerAccountAssignmentGroup: 'CustomerAccountAssignmentGroup',
    CustomerGroup: 'CustomerGroup',
    CustomerIsRebateRelevant: 'CustomerIsRebateRelevant',
    CustomerPaymentTerms: 'CustomerPaymentTerms',
    CustomerPriceGroup: 'CustomerPriceGroup',
    CustomerPricingProcedure: 'CustomerPricingProcedure',
    CustProdProposalProcedure: 'CustProdProposalProcedure',
    DeliveryIsBlockedForCustomer: 'DeliveryIsBlockedForCustomer',
    DeliveryPriority: 'DeliveryPriority',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsVersion: 'IncotermsVersion',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    DeletionIndicator: 'DeletionIndicator',
    IncotermsTransferLocation: 'IncotermsTransferLocation',
    InspSbstHasNoTimeOrQuantity: 'InspSbstHasNoTimeOrQuantity',
    InvoiceDate: 'InvoiceDate',
    ItemOrderProbabilityInPercent: 'ItemOrderProbabilityInPercent',
    ManualInvoiceMaintIsRelevant: 'ManualInvoiceMaintIsRelevant',
    MaxNmbrOfPartialDelivery: 'MaxNmbrOfPartialDelivery',
    OrderCombinationIsAllowed: 'OrderCombinationIsAllowed',
    OrderIsBlockedForCustomer: 'OrderIsBlockedForCustomer',
    OverdelivTolrtdLmtRatioInPct: 'OverdelivTolrtdLmtRatioInPct',
    PartialDeliveryIsAllowed: 'PartialDeliveryIsAllowed',
    PriceListType: 'PriceListType',
    ProductUnitGroup: 'ProductUnitGroup',
    ProofOfDeliveryTimeValue: 'ProofOfDeliveryTimeValue',
    SalesGroup: 'SalesGroup',
    SalesItemProposal: 'SalesItemProposal',
    SalesOffice: 'SalesOffice',
    ShippingCondition: 'ShippingCondition',
    SlsDocIsRlvtForProofOfDeliv: 'SlsDocIsRlvtForProofOfDeliv',
    SlsUnlmtdOvrdelivIsAllwd: 'SlsUnlmtdOvrdelivIsAllwd',
    SupplyingPlant: 'SupplyingPlant',
    SalesDistrict: 'SalesDistrict',
    UnderdelivTolrtdLmtRatioInPct: 'UnderdelivTolrtdLmtRatioInPct',
    InvoiceListSchedule: 'InvoiceListSchedule',
    ExchangeRateType: 'ExchangeRateType',
    AdditionalCustomerGroup1: 'AdditionalCustomerGroup1',
    AdditionalCustomerGroup2: 'AdditionalCustomerGroup2',
    AdditionalCustomerGroup3: 'AdditionalCustomerGroup3',
    AdditionalCustomerGroup4: 'AdditionalCustomerGroup4',
    AdditionalCustomerGroup5: 'AdditionalCustomerGroup5',
    PaymentGuaranteeProcedure: 'PaymentGuaranteeProcedure',
    CustomerAccountGroup: 'CustomerAccountGroup'
} as const;
export type ACustomerSalesAreaGetSelectEnum = typeof ACustomerSalesAreaGetSelectEnum[keyof typeof ACustomerSalesAreaGetSelectEnum];
/**
 * @export
 */
export const ACustomerSalesAreaGetExpandEnum = {
    Star: '*',
    ToPartnerFunction: 'to_PartnerFunction',
    ToSalesAreaTax: 'to_SalesAreaTax',
    ToSalesAreaText: 'to_SalesAreaText',
    ToSlsAreaAddrDepdntInfo: 'to_SlsAreaAddrDepdntInfo'
} as const;
export type ACustomerSalesAreaGetExpandEnum = typeof ACustomerSalesAreaGetExpandEnum[keyof typeof ACustomerSalesAreaGetExpandEnum];
