/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERABPCreditWorthinessType,
  APIBUSINESSPARTNERABPCreditWorthinessTypeCreate,
  APIBUSINESSPARTNERABPCreditWorthinessTypeUpdate,
  CollectionOfABPCreditWorthinessType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERABPCreditWorthinessTypeFromJSON,
    APIBUSINESSPARTNERABPCreditWorthinessTypeToJSON,
    APIBUSINESSPARTNERABPCreditWorthinessTypeCreateFromJSON,
    APIBUSINESSPARTNERABPCreditWorthinessTypeCreateToJSON,
    APIBUSINESSPARTNERABPCreditWorthinessTypeUpdateFromJSON,
    APIBUSINESSPARTNERABPCreditWorthinessTypeUpdateToJSON,
    CollectionOfABPCreditWorthinessTypeFromJSON,
    CollectionOfABPCreditWorthinessTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABPCreditWorthinessBusinessPartnerGetRequest {
    businessPartner: string;
    $select?: Set<ABPCreditWorthinessBusinessPartnerGetSelectEnum>;
}

export interface ABPCreditWorthinessBusinessPartnerPatchRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABPCreditWorthinessTypeUpdate: APIBUSINESSPARTNERABPCreditWorthinessTypeUpdate;
}

export interface ABPCreditWorthinessGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPCreditWorthinessGetOrderbyEnum>;
    $select?: Set<ABPCreditWorthinessGetSelectEnum>;
}

export interface ABPCreditWorthinessPostRequest {
    aPIBUSINESSPARTNERABPCreditWorthinessTypeCreate: APIBUSINESSPARTNERABPCreditWorthinessTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBPCreditWorthinessGetRequest {
    businessPartner: string;
    $select?: Set<ABusinessPartnerBusinessPartnerToBPCreditWorthinessGetSelectEnum>;
}

/**
 * 
 */
export class CreditWorthinessApi extends runtime.BaseAPI {

    /**
     * Get entity from A_BPCreditWorthiness by key
     */
    async aBPCreditWorthinessBusinessPartnerGetRaw(requestParameters: ABPCreditWorthinessBusinessPartnerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPCreditWorthinessType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPCreditWorthinessBusinessPartnerGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPCreditWorthiness('{BusinessPartner}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPCreditWorthinessTypeFromJSON(jsonValue));
    }

    /**
     * Get entity from A_BPCreditWorthiness by key
     */
    async aBPCreditWorthinessBusinessPartnerGet(requestParameters: ABPCreditWorthinessBusinessPartnerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPCreditWorthinessType> {
        const response = await this.aBPCreditWorthinessBusinessPartnerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates business partner credit worthiness data identified by business partner number.
     * Updates business partner credit worthiness data.
     */
    async aBPCreditWorthinessBusinessPartnerPatchRaw(requestParameters: ABPCreditWorthinessBusinessPartnerPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPCreditWorthinessBusinessPartnerPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPCreditWorthinessTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERABPCreditWorthinessTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPCreditWorthinessTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERABPCreditWorthinessTypeUpdate was null or undefined when calling aBPCreditWorthinessBusinessPartnerPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPCreditWorthiness('{BusinessPartner}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPCreditWorthinessTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERABPCreditWorthinessTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates business partner credit worthiness data identified by business partner number.
     * Updates business partner credit worthiness data.
     */
    async aBPCreditWorthinessBusinessPartnerPatch(requestParameters: ABPCreditWorthinessBusinessPartnerPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBPCreditWorthinessBusinessPartnerPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves business partner credit worthiness data of all the available records linked to business partners in the system.
     * Retrieves business partner credit worthiness data.
     */
    async aBPCreditWorthinessGetRaw(requestParameters: ABPCreditWorthinessGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPCreditWorthinessType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPCreditWorthiness`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPCreditWorthinessTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner credit worthiness data of all the available records linked to business partners in the system.
     * Retrieves business partner credit worthiness data.
     */
    async aBPCreditWorthinessGet(requestParameters: ABPCreditWorthinessGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPCreditWorthinessType> {
        const response = await this.aBPCreditWorthinessGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates business partner credit worthiness data linked to an existing business partner.
     * Creates business partner credit worthiness data.
     */
    async aBPCreditWorthinessPostRaw(requestParameters: ABPCreditWorthinessPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPCreditWorthinessType>> {
        if (requestParameters.aPIBUSINESSPARTNERABPCreditWorthinessTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPCreditWorthinessTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPCreditWorthinessTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPCreditWorthinessTypeCreate was null or undefined when calling aBPCreditWorthinessPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPCreditWorthiness`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPCreditWorthinessTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPCreditWorthinessTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPCreditWorthinessTypeFromJSON(jsonValue));
    }

    /**
     * Creates business partner credit worthiness data linked to an existing business partner.
     * Creates business partner credit worthiness data.
     */
    async aBPCreditWorthinessPost(requestParameters: ABPCreditWorthinessPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPCreditWorthinessType> {
        const response = await this.aBPCreditWorthinessPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner credit worthiness data of all the available records linked to business partners in the system.
     * Retrieves business partner credit worthiness data.
     */
    async aBusinessPartnerBusinessPartnerToBPCreditWorthinessGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBPCreditWorthinessGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPCreditWorthinessType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBPCreditWorthinessGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BPCreditWorthiness`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPCreditWorthinessTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner credit worthiness data of all the available records linked to business partners in the system.
     * Retrieves business partner credit worthiness data.
     */
    async aBusinessPartnerBusinessPartnerToBPCreditWorthinessGet(requestParameters: ABusinessPartnerBusinessPartnerToBPCreditWorthinessGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPCreditWorthinessType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBPCreditWorthinessGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABPCreditWorthinessBusinessPartnerGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BusPartCreditStanding: 'BusPartCreditStanding',
    BpCreditStandingStatus: 'BPCreditStandingStatus',
    CreditRatingAgency: 'CreditRatingAgency',
    BpCreditStandingComment: 'BPCreditStandingComment',
    BpCreditStandingDate: 'BPCreditStandingDate',
    BpCreditStandingRating: 'BPCreditStandingRating',
    BpLegalProceedingStatus: 'BPLegalProceedingStatus',
    BpLglProceedingInitiationDate: 'BPLglProceedingInitiationDate',
    BusinessPartnerIsUnderOath: 'BusinessPartnerIsUnderOath',
    BusinessPartnerOathDate: 'BusinessPartnerOathDate',
    BusinessPartnerIsBankrupt: 'BusinessPartnerIsBankrupt',
    BusinessPartnerBankruptcyDate: 'BusinessPartnerBankruptcyDate',
    BpForeclosureIsInitiated: 'BPForeclosureIsInitiated',
    BpForeclosureDate: 'BPForeclosureDate',
    BpCrdtWrthnssAccessChkIsActive: 'BPCrdtWrthnssAccessChkIsActive'
} as const;
export type ABPCreditWorthinessBusinessPartnerGetSelectEnum = typeof ABPCreditWorthinessBusinessPartnerGetSelectEnum[keyof typeof ABPCreditWorthinessBusinessPartnerGetSelectEnum];
/**
 * @export
 */
export const ABPCreditWorthinessGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    BusPartCreditStanding: 'BusPartCreditStanding',
    BusPartCreditStandingDesc: 'BusPartCreditStanding desc',
    BpCreditStandingStatus: 'BPCreditStandingStatus',
    BpCreditStandingStatusDesc: 'BPCreditStandingStatus desc',
    CreditRatingAgency: 'CreditRatingAgency',
    CreditRatingAgencyDesc: 'CreditRatingAgency desc',
    BpCreditStandingComment: 'BPCreditStandingComment',
    BpCreditStandingCommentDesc: 'BPCreditStandingComment desc',
    BpCreditStandingDate: 'BPCreditStandingDate',
    BpCreditStandingDateDesc: 'BPCreditStandingDate desc',
    BpCreditStandingRating: 'BPCreditStandingRating',
    BpCreditStandingRatingDesc: 'BPCreditStandingRating desc',
    BpLegalProceedingStatus: 'BPLegalProceedingStatus',
    BpLegalProceedingStatusDesc: 'BPLegalProceedingStatus desc',
    BpLglProceedingInitiationDate: 'BPLglProceedingInitiationDate',
    BpLglProceedingInitiationDateDesc: 'BPLglProceedingInitiationDate desc',
    BusinessPartnerIsUnderOath: 'BusinessPartnerIsUnderOath',
    BusinessPartnerIsUnderOathDesc: 'BusinessPartnerIsUnderOath desc',
    BusinessPartnerOathDate: 'BusinessPartnerOathDate',
    BusinessPartnerOathDateDesc: 'BusinessPartnerOathDate desc',
    BusinessPartnerIsBankrupt: 'BusinessPartnerIsBankrupt',
    BusinessPartnerIsBankruptDesc: 'BusinessPartnerIsBankrupt desc',
    BusinessPartnerBankruptcyDate: 'BusinessPartnerBankruptcyDate',
    BusinessPartnerBankruptcyDateDesc: 'BusinessPartnerBankruptcyDate desc',
    BpForeclosureIsInitiated: 'BPForeclosureIsInitiated',
    BpForeclosureIsInitiatedDesc: 'BPForeclosureIsInitiated desc',
    BpForeclosureDate: 'BPForeclosureDate',
    BpForeclosureDateDesc: 'BPForeclosureDate desc',
    BpCrdtWrthnssAccessChkIsActive: 'BPCrdtWrthnssAccessChkIsActive',
    BpCrdtWrthnssAccessChkIsActiveDesc: 'BPCrdtWrthnssAccessChkIsActive desc'
} as const;
export type ABPCreditWorthinessGetOrderbyEnum = typeof ABPCreditWorthinessGetOrderbyEnum[keyof typeof ABPCreditWorthinessGetOrderbyEnum];
/**
 * @export
 */
export const ABPCreditWorthinessGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BusPartCreditStanding: 'BusPartCreditStanding',
    BpCreditStandingStatus: 'BPCreditStandingStatus',
    CreditRatingAgency: 'CreditRatingAgency',
    BpCreditStandingComment: 'BPCreditStandingComment',
    BpCreditStandingDate: 'BPCreditStandingDate',
    BpCreditStandingRating: 'BPCreditStandingRating',
    BpLegalProceedingStatus: 'BPLegalProceedingStatus',
    BpLglProceedingInitiationDate: 'BPLglProceedingInitiationDate',
    BusinessPartnerIsUnderOath: 'BusinessPartnerIsUnderOath',
    BusinessPartnerOathDate: 'BusinessPartnerOathDate',
    BusinessPartnerIsBankrupt: 'BusinessPartnerIsBankrupt',
    BusinessPartnerBankruptcyDate: 'BusinessPartnerBankruptcyDate',
    BpForeclosureIsInitiated: 'BPForeclosureIsInitiated',
    BpForeclosureDate: 'BPForeclosureDate',
    BpCrdtWrthnssAccessChkIsActive: 'BPCrdtWrthnssAccessChkIsActive'
} as const;
export type ABPCreditWorthinessGetSelectEnum = typeof ABPCreditWorthinessGetSelectEnum[keyof typeof ABPCreditWorthinessGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBPCreditWorthinessGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BusPartCreditStanding: 'BusPartCreditStanding',
    BpCreditStandingStatus: 'BPCreditStandingStatus',
    CreditRatingAgency: 'CreditRatingAgency',
    BpCreditStandingComment: 'BPCreditStandingComment',
    BpCreditStandingDate: 'BPCreditStandingDate',
    BpCreditStandingRating: 'BPCreditStandingRating',
    BpLegalProceedingStatus: 'BPLegalProceedingStatus',
    BpLglProceedingInitiationDate: 'BPLglProceedingInitiationDate',
    BusinessPartnerIsUnderOath: 'BusinessPartnerIsUnderOath',
    BusinessPartnerOathDate: 'BusinessPartnerOathDate',
    BusinessPartnerIsBankrupt: 'BusinessPartnerIsBankrupt',
    BusinessPartnerBankruptcyDate: 'BusinessPartnerBankruptcyDate',
    BpForeclosureIsInitiated: 'BPForeclosureIsInitiated',
    BpForeclosureDate: 'BPForeclosureDate',
    BpCrdtWrthnssAccessChkIsActive: 'BPCrdtWrthnssAccessChkIsActive'
} as const;
export type ABusinessPartnerBusinessPartnerToBPCreditWorthinessGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBPCreditWorthinessGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBPCreditWorthinessGetSelectEnum];
