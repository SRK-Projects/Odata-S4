/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERABPAddressIndependentWebsiteType,
  APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate,
  APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeUpdate,
  CollectionOfABPAddressIndependentWebsiteType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeFromJSON,
    APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeToJSON,
    APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreateFromJSON,
    APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreateToJSON,
    APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeUpdateFromJSON,
    APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeUpdateToJSON,
    CollectionOfABPAddressIndependentWebsiteTypeFromJSON,
    CollectionOfABPAddressIndependentWebsiteTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRequest {
    businessPartner: string;
    addressID: string;
    person: string;
    ordinalNumber: string;
}

export interface ABPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRequest {
    businessPartner: string;
    addressID: string;
    person: string;
    ordinalNumber: string;
    $select?: Set<ABPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetSelectEnum>;
}

export interface ABPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRequest {
    businessPartner: string;
    addressID: string;
    person: string;
    ordinalNumber: string;
    aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeUpdate: APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeUpdate;
}

export interface ABPAddressIndependentWebsiteGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPAddressIndependentWebsiteGetOrderbyEnum>;
    $select?: Set<ABPAddressIndependentWebsiteGetSelectEnum>;
}

export interface ABPAddressIndependentWebsitePostRequest {
    aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate: APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToAddressIndependentWebsitePostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate: APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate;
}

/**
 * 
 */
export class AddressIndependentWebsiteApi extends runtime.BaseAPI {

    /**
     * Deletes an address-independent URL address identified by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Removes an address-independent URL address from a Business Partner.
     */
    async aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRaw(requestParameters: ABPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete.');
        }

        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete.');
        }

        if (requestParameters.ordinalNumber === null || requestParameters.ordinalNumber === undefined) {
            throw new runtime.RequiredError('ordinalNumber','Required parameter requestParameters.ordinalNumber was null or undefined when calling aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPAddressIndependentWebsite(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}',Person='{Person}',OrdinalNumber='{OrdinalNumber}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"Person"}}`, encodeURIComponent(String(requestParameters.person))).replace(`{${"OrdinalNumber"}}`, encodeURIComponent(String(requestParameters.ordinalNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an address-independent URL address identified by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Removes an address-independent URL address from a Business Partner.
     */
    async aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete(requestParameters: ABPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves address-independent Business Partner URL addresses by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Retrieves address-independent Business Partner URL addresses.
     */
    async aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRaw(requestParameters: ABPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPAddressIndependentWebsiteType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet.');
        }

        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet.');
        }

        if (requestParameters.ordinalNumber === null || requestParameters.ordinalNumber === undefined) {
            throw new runtime.RequiredError('ordinalNumber','Required parameter requestParameters.ordinalNumber was null or undefined when calling aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPAddressIndependentWebsite(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}',Person='{Person}',OrdinalNumber='{OrdinalNumber}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"Person"}}`, encodeURIComponent(String(requestParameters.person))).replace(`{${"OrdinalNumber"}}`, encodeURIComponent(String(requestParameters.ordinalNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address-independent Business Partner URL addresses by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Retrieves address-independent Business Partner URL addresses.
     */
    async aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet(requestParameters: ABPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPAddressIndependentWebsiteType> {
        const response = await this.aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an address-independent Business Partner URL address identified by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Updates an address-independent Business Partner URL address.
     */
    async aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRaw(requestParameters: ABPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch.');
        }

        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch.');
        }

        if (requestParameters.ordinalNumber === null || requestParameters.ordinalNumber === undefined) {
            throw new runtime.RequiredError('ordinalNumber','Required parameter requestParameters.ordinalNumber was null or undefined when calling aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeUpdate was null or undefined when calling aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPAddressIndependentWebsite(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}',Person='{Person}',OrdinalNumber='{OrdinalNumber}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"Person"}}`, encodeURIComponent(String(requestParameters.person))).replace(`{${"OrdinalNumber"}}`, encodeURIComponent(String(requestParameters.ordinalNumber))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an address-independent Business Partner URL address identified by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Updates an address-independent Business Partner URL address.
     */
    async aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch(requestParameters: ABPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves address-independent Business Partner URL addresses by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Retrieves address-independent Business Partner URL addresses.
     */
    async aBPAddressIndependentWebsiteGetRaw(requestParameters: ABPAddressIndependentWebsiteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPAddressIndependentWebsiteType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPAddressIndependentWebsite`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPAddressIndependentWebsiteTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address-independent Business Partner URL addresses by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Retrieves address-independent Business Partner URL addresses.
     */
    async aBPAddressIndependentWebsiteGet(requestParameters: ABPAddressIndependentWebsiteGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPAddressIndependentWebsiteType> {
        const response = await this.aBPAddressIndependentWebsiteGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an address-independent Business Partner URL address linked to an existing Business Partner.
     * Creates an address-independent Business Partner URL address.
     */
    async aBPAddressIndependentWebsitePostRaw(requestParameters: ABPAddressIndependentWebsitePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPAddressIndependentWebsiteType>> {
        if (requestParameters.aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate was null or undefined when calling aBPAddressIndependentWebsitePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPAddressIndependentWebsite`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeFromJSON(jsonValue));
    }

    /**
     * Creates an address-independent Business Partner URL address linked to an existing Business Partner.
     * Creates an address-independent Business Partner URL address.
     */
    async aBPAddressIndependentWebsitePost(requestParameters: ABPAddressIndependentWebsitePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPAddressIndependentWebsiteType> {
        const response = await this.aBPAddressIndependentWebsitePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves address-independent Business Partner URL addresses by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Retrieves address-independent Business Partner URL addresses.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPAddressIndependentWebsiteType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentWebsiteGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_AddressIndependentWebsite`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPAddressIndependentWebsiteTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address-independent Business Partner URL addresses by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Retrieves address-independent Business Partner URL addresses.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentWebsiteGet(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPAddressIndependentWebsiteType> {
        const response = await this.aBusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an address-independent Business Partner URL address linked to an existing Business Partner.
     * Creates an address-independent Business Partner URL address.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentWebsitePostRaw(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentWebsitePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPAddressIndependentWebsiteType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentWebsitePost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentWebsitePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_AddressIndependentWebsite`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeFromJSON(jsonValue));
    }

    /**
     * Creates an address-independent Business Partner URL address linked to an existing Business Partner.
     * Creates an address-independent Business Partner URL address.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentWebsitePost(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentWebsitePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPAddressIndependentWebsiteType> {
        const response = await this.aBusinessPartnerBusinessPartnerToAddressIndependentWebsitePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    UrlFieldLength: 'URLFieldLength',
    WebsiteUrl: 'WebsiteURL'
} as const;
export type ABPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetSelectEnum = typeof ABPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetSelectEnum[keyof typeof ABPAddressIndependentWebsiteBusinessPartnerBusinessPartnerAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetSelectEnum];
/**
 * @export
 */
export const ABPAddressIndependentWebsiteGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    IsDefaultUrlAddressDesc: 'IsDefaultURLAddress desc',
    UrlFieldLength: 'URLFieldLength',
    UrlFieldLengthDesc: 'URLFieldLength desc'
} as const;
export type ABPAddressIndependentWebsiteGetOrderbyEnum = typeof ABPAddressIndependentWebsiteGetOrderbyEnum[keyof typeof ABPAddressIndependentWebsiteGetOrderbyEnum];
/**
 * @export
 */
export const ABPAddressIndependentWebsiteGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    UrlFieldLength: 'URLFieldLength',
    WebsiteUrl: 'WebsiteURL'
} as const;
export type ABPAddressIndependentWebsiteGetSelectEnum = typeof ABPAddressIndependentWebsiteGetSelectEnum[keyof typeof ABPAddressIndependentWebsiteGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    IsDefaultUrlAddressDesc: 'IsDefaultURLAddress desc',
    UrlFieldLength: 'URLFieldLength',
    UrlFieldLengthDesc: 'URLFieldLength desc'
} as const;
export type ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    UrlFieldLength: 'URLFieldLength',
    WebsiteUrl: 'WebsiteURL'
} as const;
export type ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetSelectEnum];
