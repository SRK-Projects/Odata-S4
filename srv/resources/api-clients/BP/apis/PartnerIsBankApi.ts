/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERABusinessPartnerIsBankType,
  APIBUSINESSPARTNERABusinessPartnerIsBankTypeCreate,
  APIBUSINESSPARTNERABusinessPartnerIsBankTypeUpdate,
  CollectionOfABusinessPartnerIsBankType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERABusinessPartnerIsBankTypeFromJSON,
    APIBUSINESSPARTNERABusinessPartnerIsBankTypeToJSON,
    APIBUSINESSPARTNERABusinessPartnerIsBankTypeCreateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerIsBankTypeCreateToJSON,
    APIBUSINESSPARTNERABusinessPartnerIsBankTypeUpdateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerIsBankTypeUpdateToJSON,
    CollectionOfABusinessPartnerIsBankTypeFromJSON,
    CollectionOfABusinessPartnerIsBankTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetRequest {
    businessPartner: string;
    $select?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetSelectEnum>;
}

export interface ABusinessPartnerIsBankBusinessPartnerGetRequest {
    businessPartner: string;
    $select?: Set<ABusinessPartnerIsBankBusinessPartnerGetSelectEnum>;
}

export interface ABusinessPartnerIsBankBusinessPartnerPatchRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABusinessPartnerIsBankTypeUpdate: APIBUSINESSPARTNERABusinessPartnerIsBankTypeUpdate;
}

export interface ABusinessPartnerIsBankGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerIsBankGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerIsBankGetSelectEnum>;
}

export interface ABusinessPartnerIsBankPostRequest {
    aPIBUSINESSPARTNERABusinessPartnerIsBankTypeCreate: APIBUSINESSPARTNERABusinessPartnerIsBankTypeCreate;
}

/**
 * 
 */
export class PartnerIsBankApi extends runtime.BaseAPI {

    /**
     * Provides the bank key if the business partner is a bank.
     * Provides the bank key if the business partner is a bank.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerIsBankType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerIsBankGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerIsBank`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerIsBankTypeFromJSON(jsonValue));
    }

    /**
     * Provides the bank key if the business partner is a bank.
     * Provides the bank key if the business partner is a bank.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerIsBankGet(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerIsBankType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides the bank key if the business partner is a bank.
     * Provides the bank key if the business partner is a bank.
     */
    async aBusinessPartnerIsBankBusinessPartnerGetRaw(requestParameters: ABusinessPartnerIsBankBusinessPartnerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerIsBankType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerIsBankBusinessPartnerGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerIsBank('{BusinessPartner}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerIsBankTypeFromJSON(jsonValue));
    }

    /**
     * Provides the bank key if the business partner is a bank.
     * Provides the bank key if the business partner is a bank.
     */
    async aBusinessPartnerIsBankBusinessPartnerGet(requestParameters: ABusinessPartnerIsBankBusinessPartnerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerIsBankType> {
        const response = await this.aBusinessPartnerIsBankBusinessPartnerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the information about the bank key for a business partner that is a bank.
     * Updates the information about the bank key for a business partner that is a bank.
     */
    async aBusinessPartnerIsBankBusinessPartnerPatchRaw(requestParameters: ABusinessPartnerIsBankBusinessPartnerPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerIsBankBusinessPartnerPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerIsBankTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerIsBankTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerIsBankTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerIsBankTypeUpdate was null or undefined when calling aBusinessPartnerIsBankBusinessPartnerPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerIsBank('{BusinessPartner}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerIsBankTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerIsBankTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the information about the bank key for a business partner that is a bank.
     * Updates the information about the bank key for a business partner that is a bank.
     */
    async aBusinessPartnerIsBankBusinessPartnerPatch(requestParameters: ABusinessPartnerIsBankBusinessPartnerPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBusinessPartnerIsBankBusinessPartnerPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Provides the bank key if the business partner is a bank.
     * Provides the bank key if the business partner is a bank.
     */
    async aBusinessPartnerIsBankGetRaw(requestParameters: ABusinessPartnerIsBankGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerIsBankType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerIsBank`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerIsBankTypeFromJSON(jsonValue));
    }

    /**
     * Provides the bank key if the business partner is a bank.
     * Provides the bank key if the business partner is a bank.
     */
    async aBusinessPartnerIsBankGet(requestParameters: ABusinessPartnerIsBankGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerIsBankType> {
        const response = await this.aBusinessPartnerIsBankGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates the information about the bank key for a business partner that is a bank.
     * Creates the information about the bank key for a business partner that is a bank.
     */
    async aBusinessPartnerIsBankPostRaw(requestParameters: ABusinessPartnerIsBankPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerIsBankType>> {
        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerIsBankTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerIsBankTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerIsBankTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerIsBankTypeCreate was null or undefined when calling aBusinessPartnerIsBankPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerIsBank`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerIsBankTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerIsBankTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerIsBankTypeFromJSON(jsonValue));
    }

    /**
     * Creates the information about the bank key for a business partner that is a bank.
     * Creates the information about the bank key for a business partner that is a bank.
     */
    async aBusinessPartnerIsBankPost(requestParameters: ABusinessPartnerIsBankPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerIsBankType> {
        const response = await this.aBusinessPartnerIsBankPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BankKey: 'BankKey',
    BankCountry: 'BankCountry',
    BpMinimumReserve: 'BPMinimumReserve'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerIsBankBusinessPartnerGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BankKey: 'BankKey',
    BankCountry: 'BankCountry',
    BpMinimumReserve: 'BPMinimumReserve'
} as const;
export type ABusinessPartnerIsBankBusinessPartnerGetSelectEnum = typeof ABusinessPartnerIsBankBusinessPartnerGetSelectEnum[keyof typeof ABusinessPartnerIsBankBusinessPartnerGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerIsBankGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    BankKey: 'BankKey',
    BankKeyDesc: 'BankKey desc',
    BankCountry: 'BankCountry',
    BankCountryDesc: 'BankCountry desc',
    BpMinimumReserve: 'BPMinimumReserve',
    BpMinimumReserveDesc: 'BPMinimumReserve desc'
} as const;
export type ABusinessPartnerIsBankGetOrderbyEnum = typeof ABusinessPartnerIsBankGetOrderbyEnum[keyof typeof ABusinessPartnerIsBankGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerIsBankGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BankKey: 'BankKey',
    BankCountry: 'BankCountry',
    BpMinimumReserve: 'BPMinimumReserve'
} as const;
export type ABusinessPartnerIsBankGetSelectEnum = typeof ABusinessPartnerIsBankGetSelectEnum[keyof typeof ABusinessPartnerIsBankGetSelectEnum];
