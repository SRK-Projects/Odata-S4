/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERABPFinancialServicesReportingType,
  APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate,
  APIBUSINESSPARTNERABPFinancialServicesReportingTypeUpdate,
  CollectionOfABPFinancialServicesReportingType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERABPFinancialServicesReportingTypeFromJSON,
    APIBUSINESSPARTNERABPFinancialServicesReportingTypeToJSON,
    APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreateFromJSON,
    APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreateToJSON,
    APIBUSINESSPARTNERABPFinancialServicesReportingTypeUpdateFromJSON,
    APIBUSINESSPARTNERABPFinancialServicesReportingTypeUpdateToJSON,
    CollectionOfABPFinancialServicesReportingTypeFromJSON,
    CollectionOfABPFinancialServicesReportingTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABPFinancialServicesReportingBusinessPartnerGetRequest {
    businessPartner: string;
    $select?: Set<ABPFinancialServicesReportingBusinessPartnerGetSelectEnum>;
}

export interface ABPFinancialServicesReportingBusinessPartnerPatchRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABPFinancialServicesReportingTypeUpdate: APIBUSINESSPARTNERABPFinancialServicesReportingTypeUpdate;
}

export interface ABPFinancialServicesReportingGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPFinancialServicesReportingGetOrderbyEnum>;
    $select?: Set<ABPFinancialServicesReportingGetSelectEnum>;
}

export interface ABPFinancialServicesReportingPostRequest {
    aPIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate: APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBPFinServicesReportingGetRequest {
    businessPartner: string;
    $select?: Set<ABusinessPartnerBusinessPartnerToBPFinServicesReportingGetSelectEnum>;
}

/**
 * 
 */
export class FinancialServicesReportingApi extends runtime.BaseAPI {

    /**
     * Retrieves financial services reporting attributes of all the available records linked to business partners in the system.
     * Retrieves business partner financial services reporting attributes.
     */
    async aBPFinancialServicesReportingBusinessPartnerGetRaw(requestParameters: ABPFinancialServicesReportingBusinessPartnerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPFinancialServicesReportingType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPFinancialServicesReportingBusinessPartnerGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPFinancialServicesReporting('{BusinessPartner}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPFinancialServicesReportingTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves financial services reporting attributes of all the available records linked to business partners in the system.
     * Retrieves business partner financial services reporting attributes.
     */
    async aBPFinancialServicesReportingBusinessPartnerGet(requestParameters: ABPFinancialServicesReportingBusinessPartnerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPFinancialServicesReportingType> {
        const response = await this.aBPFinancialServicesReportingBusinessPartnerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates financial services reporting attributes identified by business partner number.
     * Updates business partner financial services reporting attributes.
     */
    async aBPFinancialServicesReportingBusinessPartnerPatchRaw(requestParameters: ABPFinancialServicesReportingBusinessPartnerPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPFinancialServicesReportingBusinessPartnerPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPFinancialServicesReportingTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERABPFinancialServicesReportingTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPFinancialServicesReportingTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERABPFinancialServicesReportingTypeUpdate was null or undefined when calling aBPFinancialServicesReportingBusinessPartnerPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPFinancialServicesReporting('{BusinessPartner}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPFinancialServicesReportingTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERABPFinancialServicesReportingTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates financial services reporting attributes identified by business partner number.
     * Updates business partner financial services reporting attributes.
     */
    async aBPFinancialServicesReportingBusinessPartnerPatch(requestParameters: ABPFinancialServicesReportingBusinessPartnerPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBPFinancialServicesReportingBusinessPartnerPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves financial services reporting attributes of all the available records linked to business partners in the system.
     * Retrieves business partner financial services reporting attributes.
     */
    async aBPFinancialServicesReportingGetRaw(requestParameters: ABPFinancialServicesReportingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPFinancialServicesReportingType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPFinancialServicesReporting`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPFinancialServicesReportingTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves financial services reporting attributes of all the available records linked to business partners in the system.
     * Retrieves business partner financial services reporting attributes.
     */
    async aBPFinancialServicesReportingGet(requestParameters: ABPFinancialServicesReportingGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPFinancialServicesReportingType> {
        const response = await this.aBPFinancialServicesReportingGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates financial services business partner attributes linked to an existing business partner.
     * Creates financial services business partner attributes.
     */
    async aBPFinancialServicesReportingPostRaw(requestParameters: ABPFinancialServicesReportingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPFinancialServicesReportingType>> {
        if (requestParameters.aPIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate was null or undefined when calling aBPFinancialServicesReportingPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPFinancialServicesReporting`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPFinancialServicesReportingTypeFromJSON(jsonValue));
    }

    /**
     * Creates financial services business partner attributes linked to an existing business partner.
     * Creates financial services business partner attributes.
     */
    async aBPFinancialServicesReportingPost(requestParameters: ABPFinancialServicesReportingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPFinancialServicesReportingType> {
        const response = await this.aBPFinancialServicesReportingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get related to_BPFinServicesReporting
     */
    async aBusinessPartnerBusinessPartnerToBPFinServicesReportingGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBPFinServicesReportingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPFinancialServicesReportingType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBPFinServicesReportingGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BPFinServicesReporting`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPFinancialServicesReportingTypeFromJSON(jsonValue));
    }

    /**
     * Get related to_BPFinServicesReporting
     */
    async aBusinessPartnerBusinessPartnerToBPFinServicesReportingGet(requestParameters: ABusinessPartnerBusinessPartnerToBPFinServicesReportingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPFinancialServicesReportingType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBPFinServicesReportingGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABPFinancialServicesReportingBusinessPartnerGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BpisNonResident: 'BPIsNonResident',
    BpNonResidencyStartDate: 'BPNonResidencyStartDate',
    BpisMultimillionLoanRecipient: 'BPIsMultimillionLoanRecipient',
    BpLoanReportingBorrowerNumber: 'BPLoanReportingBorrowerNumber',
    BpLoanRptgBorrowerEntityNumber: 'BPLoanRptgBorrowerEntityNumber',
    BpCreditStandingReview: 'BPCreditStandingReview',
    BpCreditStandingReviewDate: 'BPCreditStandingReviewDate',
    BusinessPartnerLoanToManager: 'BusinessPartnerLoanToManager',
    BpCompanyRelationship: 'BPCompanyRelationship',
    BpLoanReportingCreditorNumber: 'BPLoanReportingCreditorNumber',
    BpoeNbIdentNumber: 'BPOeNBIdentNumber',
    BpoeNbTargetGroup: 'BPOeNBTargetGroup',
    BpoeNbIdentNumberAssigned: 'BPOeNBIdentNumberAssigned',
    BpoeNbInstituteNumber: 'BPOeNBInstituteNumber',
    BusinessPartnerIsOeNbInstitute: 'BusinessPartnerIsOeNBInstitute',
    BusinessPartnerGroup: 'BusinessPartnerGroup',
    BpGroupAssignmentCategory: 'BPGroupAssignmentCategory',
    BusinessPartnerGroupName: 'BusinessPartnerGroupName',
    BusinessPartnerLegalEntity: 'BusinessPartnerLegalEntity',
    BpGerAstRglnRestrictedAstQuota: 'BPGerAstRglnRestrictedAstQuota',
    BusinessPartnerDebtorGroup: 'BusinessPartnerDebtorGroup',
    BusinessPartnerBusinessPurpose: 'BusinessPartnerBusinessPurpose',
    BusinessPartnerRiskGroup: 'BusinessPartnerRiskGroup',
    BpRiskGroupingDate: 'BPRiskGroupingDate',
    BpHasGroupAffiliation: 'BPHasGroupAffiliation',
    BpisMonetaryFinInstitution: 'BPIsMonetaryFinInstitution',
    BpCrdtStandingReviewIsRequired: 'BPCrdtStandingReviewIsRequired',
    BpLoanMonitoringIsRequired: 'BPLoanMonitoringIsRequired',
    BpHasCreditingRelief: 'BPHasCreditingRelief',
    BpInvestInRstrcdAstIsAuthzd: 'BPInvestInRstrcdAstIsAuthzd',
    BpCentralBankCountryRegion: 'BPCentralBankCountryRegion'
} as const;
export type ABPFinancialServicesReportingBusinessPartnerGetSelectEnum = typeof ABPFinancialServicesReportingBusinessPartnerGetSelectEnum[keyof typeof ABPFinancialServicesReportingBusinessPartnerGetSelectEnum];
/**
 * @export
 */
export const ABPFinancialServicesReportingGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    BpisNonResident: 'BPIsNonResident',
    BpisNonResidentDesc: 'BPIsNonResident desc',
    BpNonResidencyStartDate: 'BPNonResidencyStartDate',
    BpNonResidencyStartDateDesc: 'BPNonResidencyStartDate desc',
    BpisMultimillionLoanRecipient: 'BPIsMultimillionLoanRecipient',
    BpisMultimillionLoanRecipientDesc: 'BPIsMultimillionLoanRecipient desc',
    BpLoanReportingBorrowerNumber: 'BPLoanReportingBorrowerNumber',
    BpLoanReportingBorrowerNumberDesc: 'BPLoanReportingBorrowerNumber desc',
    BpLoanRptgBorrowerEntityNumber: 'BPLoanRptgBorrowerEntityNumber',
    BpLoanRptgBorrowerEntityNumberDesc: 'BPLoanRptgBorrowerEntityNumber desc',
    BpCreditStandingReview: 'BPCreditStandingReview',
    BpCreditStandingReviewDesc: 'BPCreditStandingReview desc',
    BpCreditStandingReviewDate: 'BPCreditStandingReviewDate',
    BpCreditStandingReviewDateDesc: 'BPCreditStandingReviewDate desc',
    BusinessPartnerLoanToManager: 'BusinessPartnerLoanToManager',
    BusinessPartnerLoanToManagerDesc: 'BusinessPartnerLoanToManager desc',
    BpCompanyRelationship: 'BPCompanyRelationship',
    BpCompanyRelationshipDesc: 'BPCompanyRelationship desc',
    BpLoanReportingCreditorNumber: 'BPLoanReportingCreditorNumber',
    BpLoanReportingCreditorNumberDesc: 'BPLoanReportingCreditorNumber desc',
    BpoeNbIdentNumber: 'BPOeNBIdentNumber',
    BpoeNbIdentNumberDesc: 'BPOeNBIdentNumber desc',
    BpoeNbTargetGroup: 'BPOeNBTargetGroup',
    BpoeNbTargetGroupDesc: 'BPOeNBTargetGroup desc',
    BpoeNbIdentNumberAssigned: 'BPOeNBIdentNumberAssigned',
    BpoeNbIdentNumberAssignedDesc: 'BPOeNBIdentNumberAssigned desc',
    BpoeNbInstituteNumber: 'BPOeNBInstituteNumber',
    BpoeNbInstituteNumberDesc: 'BPOeNBInstituteNumber desc',
    BusinessPartnerIsOeNbInstitute: 'BusinessPartnerIsOeNBInstitute',
    BusinessPartnerIsOeNbInstituteDesc: 'BusinessPartnerIsOeNBInstitute desc',
    BusinessPartnerGroup: 'BusinessPartnerGroup',
    BusinessPartnerGroupDesc: 'BusinessPartnerGroup desc',
    BpGroupAssignmentCategory: 'BPGroupAssignmentCategory',
    BpGroupAssignmentCategoryDesc: 'BPGroupAssignmentCategory desc',
    BusinessPartnerGroupName: 'BusinessPartnerGroupName',
    BusinessPartnerGroupNameDesc: 'BusinessPartnerGroupName desc',
    BusinessPartnerLegalEntity: 'BusinessPartnerLegalEntity',
    BusinessPartnerLegalEntityDesc: 'BusinessPartnerLegalEntity desc',
    BpGerAstRglnRestrictedAstQuota: 'BPGerAstRglnRestrictedAstQuota',
    BpGerAstRglnRestrictedAstQuotaDesc: 'BPGerAstRglnRestrictedAstQuota desc',
    BusinessPartnerDebtorGroup: 'BusinessPartnerDebtorGroup',
    BusinessPartnerDebtorGroupDesc: 'BusinessPartnerDebtorGroup desc',
    BusinessPartnerBusinessPurpose: 'BusinessPartnerBusinessPurpose',
    BusinessPartnerBusinessPurposeDesc: 'BusinessPartnerBusinessPurpose desc',
    BusinessPartnerRiskGroup: 'BusinessPartnerRiskGroup',
    BusinessPartnerRiskGroupDesc: 'BusinessPartnerRiskGroup desc',
    BpRiskGroupingDate: 'BPRiskGroupingDate',
    BpRiskGroupingDateDesc: 'BPRiskGroupingDate desc',
    BpHasGroupAffiliation: 'BPHasGroupAffiliation',
    BpHasGroupAffiliationDesc: 'BPHasGroupAffiliation desc',
    BpisMonetaryFinInstitution: 'BPIsMonetaryFinInstitution',
    BpisMonetaryFinInstitutionDesc: 'BPIsMonetaryFinInstitution desc',
    BpCrdtStandingReviewIsRequired: 'BPCrdtStandingReviewIsRequired',
    BpCrdtStandingReviewIsRequiredDesc: 'BPCrdtStandingReviewIsRequired desc',
    BpLoanMonitoringIsRequired: 'BPLoanMonitoringIsRequired',
    BpLoanMonitoringIsRequiredDesc: 'BPLoanMonitoringIsRequired desc',
    BpHasCreditingRelief: 'BPHasCreditingRelief',
    BpHasCreditingReliefDesc: 'BPHasCreditingRelief desc',
    BpInvestInRstrcdAstIsAuthzd: 'BPInvestInRstrcdAstIsAuthzd',
    BpInvestInRstrcdAstIsAuthzdDesc: 'BPInvestInRstrcdAstIsAuthzd desc',
    BpCentralBankCountryRegion: 'BPCentralBankCountryRegion',
    BpCentralBankCountryRegionDesc: 'BPCentralBankCountryRegion desc'
} as const;
export type ABPFinancialServicesReportingGetOrderbyEnum = typeof ABPFinancialServicesReportingGetOrderbyEnum[keyof typeof ABPFinancialServicesReportingGetOrderbyEnum];
/**
 * @export
 */
export const ABPFinancialServicesReportingGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BpisNonResident: 'BPIsNonResident',
    BpNonResidencyStartDate: 'BPNonResidencyStartDate',
    BpisMultimillionLoanRecipient: 'BPIsMultimillionLoanRecipient',
    BpLoanReportingBorrowerNumber: 'BPLoanReportingBorrowerNumber',
    BpLoanRptgBorrowerEntityNumber: 'BPLoanRptgBorrowerEntityNumber',
    BpCreditStandingReview: 'BPCreditStandingReview',
    BpCreditStandingReviewDate: 'BPCreditStandingReviewDate',
    BusinessPartnerLoanToManager: 'BusinessPartnerLoanToManager',
    BpCompanyRelationship: 'BPCompanyRelationship',
    BpLoanReportingCreditorNumber: 'BPLoanReportingCreditorNumber',
    BpoeNbIdentNumber: 'BPOeNBIdentNumber',
    BpoeNbTargetGroup: 'BPOeNBTargetGroup',
    BpoeNbIdentNumberAssigned: 'BPOeNBIdentNumberAssigned',
    BpoeNbInstituteNumber: 'BPOeNBInstituteNumber',
    BusinessPartnerIsOeNbInstitute: 'BusinessPartnerIsOeNBInstitute',
    BusinessPartnerGroup: 'BusinessPartnerGroup',
    BpGroupAssignmentCategory: 'BPGroupAssignmentCategory',
    BusinessPartnerGroupName: 'BusinessPartnerGroupName',
    BusinessPartnerLegalEntity: 'BusinessPartnerLegalEntity',
    BpGerAstRglnRestrictedAstQuota: 'BPGerAstRglnRestrictedAstQuota',
    BusinessPartnerDebtorGroup: 'BusinessPartnerDebtorGroup',
    BusinessPartnerBusinessPurpose: 'BusinessPartnerBusinessPurpose',
    BusinessPartnerRiskGroup: 'BusinessPartnerRiskGroup',
    BpRiskGroupingDate: 'BPRiskGroupingDate',
    BpHasGroupAffiliation: 'BPHasGroupAffiliation',
    BpisMonetaryFinInstitution: 'BPIsMonetaryFinInstitution',
    BpCrdtStandingReviewIsRequired: 'BPCrdtStandingReviewIsRequired',
    BpLoanMonitoringIsRequired: 'BPLoanMonitoringIsRequired',
    BpHasCreditingRelief: 'BPHasCreditingRelief',
    BpInvestInRstrcdAstIsAuthzd: 'BPInvestInRstrcdAstIsAuthzd',
    BpCentralBankCountryRegion: 'BPCentralBankCountryRegion'
} as const;
export type ABPFinancialServicesReportingGetSelectEnum = typeof ABPFinancialServicesReportingGetSelectEnum[keyof typeof ABPFinancialServicesReportingGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBPFinServicesReportingGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BpisNonResident: 'BPIsNonResident',
    BpNonResidencyStartDate: 'BPNonResidencyStartDate',
    BpisMultimillionLoanRecipient: 'BPIsMultimillionLoanRecipient',
    BpLoanReportingBorrowerNumber: 'BPLoanReportingBorrowerNumber',
    BpLoanRptgBorrowerEntityNumber: 'BPLoanRptgBorrowerEntityNumber',
    BpCreditStandingReview: 'BPCreditStandingReview',
    BpCreditStandingReviewDate: 'BPCreditStandingReviewDate',
    BusinessPartnerLoanToManager: 'BusinessPartnerLoanToManager',
    BpCompanyRelationship: 'BPCompanyRelationship',
    BpLoanReportingCreditorNumber: 'BPLoanReportingCreditorNumber',
    BpoeNbIdentNumber: 'BPOeNBIdentNumber',
    BpoeNbTargetGroup: 'BPOeNBTargetGroup',
    BpoeNbIdentNumberAssigned: 'BPOeNBIdentNumberAssigned',
    BpoeNbInstituteNumber: 'BPOeNBInstituteNumber',
    BusinessPartnerIsOeNbInstitute: 'BusinessPartnerIsOeNBInstitute',
    BusinessPartnerGroup: 'BusinessPartnerGroup',
    BpGroupAssignmentCategory: 'BPGroupAssignmentCategory',
    BusinessPartnerGroupName: 'BusinessPartnerGroupName',
    BusinessPartnerLegalEntity: 'BusinessPartnerLegalEntity',
    BpGerAstRglnRestrictedAstQuota: 'BPGerAstRglnRestrictedAstQuota',
    BusinessPartnerDebtorGroup: 'BusinessPartnerDebtorGroup',
    BusinessPartnerBusinessPurpose: 'BusinessPartnerBusinessPurpose',
    BusinessPartnerRiskGroup: 'BusinessPartnerRiskGroup',
    BpRiskGroupingDate: 'BPRiskGroupingDate',
    BpHasGroupAffiliation: 'BPHasGroupAffiliation',
    BpisMonetaryFinInstitution: 'BPIsMonetaryFinInstitution',
    BpCrdtStandingReviewIsRequired: 'BPCrdtStandingReviewIsRequired',
    BpLoanMonitoringIsRequired: 'BPLoanMonitoringIsRequired',
    BpHasCreditingRelief: 'BPHasCreditingRelief',
    BpInvestInRstrcdAstIsAuthzd: 'BPInvestInRstrcdAstIsAuthzd',
    BpCentralBankCountryRegion: 'BPCentralBankCountryRegion'
} as const;
export type ABusinessPartnerBusinessPartnerToBPFinServicesReportingGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBPFinServicesReportingGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBPFinServicesReportingGetSelectEnum];
