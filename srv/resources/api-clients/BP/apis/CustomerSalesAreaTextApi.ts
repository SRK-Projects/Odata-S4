/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERACustomerSalesAreaTextType,
  APIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate,
  CollectionOfACustomerSalesAreaTextType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERACustomerSalesAreaTextTypeFromJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTextTypeToJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTextTypeCreateFromJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTextTypeCreateToJSON,
    CollectionOfACustomerSalesAreaTextTypeFromJSON,
    CollectionOfACustomerSalesAreaTextTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetOrderbyEnum>;
    $select?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetSelectEnum>;
}

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate: APIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate;
}

export interface ACustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDDeleteRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    language: string;
    longTextID: string;
}

export interface ACustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDGetRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    language: string;
    longTextID: string;
    $select?: Set<ACustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDGetSelectEnum>;
}

export interface ACustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDPatchRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    language: string;
    longTextID: string;
    body: object;
}

export interface ACustomerSalesAreaTextGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerSalesAreaTextGetOrderbyEnum>;
    $select?: Set<ACustomerSalesAreaTextGetSelectEnum>;
}

export interface ACustomerSalesAreaTextPostRequest {
    aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate: APIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate;
}

/**
 * 
 */
export class CustomerSalesAreaTextApi extends runtime.BaseAPI {

    /**
     * Retrieves customer sales area text  fields of all the available records in the system linked to customer sales areas.
     * Retrieves customer sales area text data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerSalesAreaTextType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')/to_SalesAreaText`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerSalesAreaTextTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer sales area text  fields of all the available records in the system linked to customer sales areas.
     * Retrieves customer sales area text data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerSalesAreaTextType> {
        const response = await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds new sales area text record in the language specified. If no language is specified, the text will be created in system language.
     * Creates a new customer sales area text data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerSalesAreaTextType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')/to_SalesAreaText`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerSalesAreaTextTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerSalesAreaTextTypeFromJSON(jsonValue));
    }

    /**
     * Adds new sales area text record in the language specified. If no language is specified, the text will be created in system language.
     * Creates a new customer sales area text data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerSalesAreaTextType> {
        const response = await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes customer sales area text data identified by Customer, SalesOrganization, DistributionChannel, Division, and Language.
     * Deletes sales area text data linked to customer sales area.
     */
    async aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDDeleteRaw(requestParameters: ACustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDDelete.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDDelete.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDDelete.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDDelete.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDDelete.');
        }

        if (requestParameters.longTextID === null || requestParameters.longTextID === undefined) {
            throw new runtime.RequiredError('longTextID','Required parameter requestParameters.longTextID was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesAreaText(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',Language='{Language}',LongTextID='{LongTextID}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"Language"}}`, encodeURIComponent(String(requestParameters.language))).replace(`{${"LongTextID"}}`, encodeURIComponent(String(requestParameters.longTextID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes customer sales area text data identified by Customer, SalesOrganization, DistributionChannel, Division, and Language.
     * Deletes sales area text data linked to customer sales area.
     */
    async aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDDelete(requestParameters: ACustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retreives customer sales area text data by Customer, SalesOrganization, DistributionChannel, Division, and Language.
     * Retrieves customer sales area text data by key fields.
     */
    async aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDGetRaw(requestParameters: ACustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerSalesAreaTextType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDGet.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDGet.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDGet.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDGet.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDGet.');
        }

        if (requestParameters.longTextID === null || requestParameters.longTextID === undefined) {
            throw new runtime.RequiredError('longTextID','Required parameter requestParameters.longTextID was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesAreaText(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',Language='{Language}',LongTextID='{LongTextID}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"Language"}}`, encodeURIComponent(String(requestParameters.language))).replace(`{${"LongTextID"}}`, encodeURIComponent(String(requestParameters.longTextID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerSalesAreaTextTypeFromJSON(jsonValue));
    }

    /**
     * Retreives customer sales area text data by Customer, SalesOrganization, DistributionChannel, Division, and Language.
     * Retrieves customer sales area text data by key fields.
     */
    async aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDGet(requestParameters: ACustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerSalesAreaTextType> {
        const response = await this.aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates customer sales area text data identified by Customer, SalesOrganization, DistributionChannel, Division and Language
     * Updates sales area text record linked to customer sales area.
     */
    async aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDPatchRaw(requestParameters: ACustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDPatch.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDPatch.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDPatch.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDPatch.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDPatch.');
        }

        if (requestParameters.longTextID === null || requestParameters.longTextID === undefined) {
            throw new runtime.RequiredError('longTextID','Required parameter requestParameters.longTextID was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDPatch.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesAreaText(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',Language='{Language}',LongTextID='{LongTextID}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"Language"}}`, encodeURIComponent(String(requestParameters.language))).replace(`{${"LongTextID"}}`, encodeURIComponent(String(requestParameters.longTextID))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates customer sales area text data identified by Customer, SalesOrganization, DistributionChannel, Division and Language
     * Updates sales area text record linked to customer sales area.
     */
    async aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDPatch(requestParameters: ACustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves customer sales area text  fields of all the available records in the system linked to customer sales areas.
     * Retrieves customer sales area text data.
     */
    async aCustomerSalesAreaTextGetRaw(requestParameters: ACustomerSalesAreaTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerSalesAreaTextType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesAreaText`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerSalesAreaTextTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer sales area text  fields of all the available records in the system linked to customer sales areas.
     * Retrieves customer sales area text data.
     */
    async aCustomerSalesAreaTextGet(requestParameters: ACustomerSalesAreaTextGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerSalesAreaTextType> {
        const response = await this.aCustomerSalesAreaTextGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds new sales area text record in the language specified. If no language is specified, the text will be created in system language.
     * Creates a new customer sales area text data.
     */
    async aCustomerSalesAreaTextPostRaw(requestParameters: ACustomerSalesAreaTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerSalesAreaTextType>> {
        if (requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate was null or undefined when calling aCustomerSalesAreaTextPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesAreaText`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerSalesAreaTextTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerSalesAreaTextTypeFromJSON(jsonValue));
    }

    /**
     * Adds new sales area text record in the language specified. If no language is specified, the text will be created in system language.
     * Creates a new customer sales area text data.
     */
    async aCustomerSalesAreaTextPost(requestParameters: ACustomerSalesAreaTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerSalesAreaTextType> {
        const response = await this.aCustomerSalesAreaTextPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    LongTextId: 'LongTextID',
    LongTextIdDesc: 'LongTextID desc'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetOrderbyEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetOrderbyEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    Language: 'Language',
    LongTextId: 'LongTextID',
    LongText: 'LongText'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetSelectEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetSelectEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetSelectEnum];
/**
 * @export
 */
export const ACustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    Language: 'Language',
    LongTextId: 'LongTextID',
    LongText: 'LongText'
} as const;
export type ACustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDGetSelectEnum = typeof ACustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDGetSelectEnum[keyof typeof ACustomerSalesAreaTextCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionLanguageLanguageLongTextIDLongTextIDGetSelectEnum];
/**
 * @export
 */
export const ACustomerSalesAreaTextGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    LongTextId: 'LongTextID',
    LongTextIdDesc: 'LongTextID desc'
} as const;
export type ACustomerSalesAreaTextGetOrderbyEnum = typeof ACustomerSalesAreaTextGetOrderbyEnum[keyof typeof ACustomerSalesAreaTextGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerSalesAreaTextGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    Language: 'Language',
    LongTextId: 'LongTextID',
    LongText: 'LongText'
} as const;
export type ACustomerSalesAreaTextGetSelectEnum = typeof ACustomerSalesAreaTextGetSelectEnum[keyof typeof ACustomerSalesAreaTextGetSelectEnum];
