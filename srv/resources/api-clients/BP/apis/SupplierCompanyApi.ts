/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERASupplierCompanyTextType,
  APIBUSINESSPARTNERASupplierCompanyTextTypeCreate,
  APIBUSINESSPARTNERASupplierCompanyType,
  APIBUSINESSPARTNERASupplierCompanyTypeCreate,
  APIBUSINESSPARTNERASupplierCompanyTypeUpdate,
  APIBUSINESSPARTNERASupplierDunningType,
  APIBUSINESSPARTNERASupplierDunningTypeCreate,
  APIBUSINESSPARTNERASupplierType,
  APIBUSINESSPARTNERASupplierWithHoldingTaxType,
  APIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate,
  CollectionOfASupplierCompanyTextType,
  CollectionOfASupplierCompanyType,
  CollectionOfASupplierDunningType,
  CollectionOfASupplierWithHoldingTaxType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERASupplierCompanyTextTypeFromJSON,
    APIBUSINESSPARTNERASupplierCompanyTextTypeToJSON,
    APIBUSINESSPARTNERASupplierCompanyTextTypeCreateFromJSON,
    APIBUSINESSPARTNERASupplierCompanyTextTypeCreateToJSON,
    APIBUSINESSPARTNERASupplierCompanyTypeFromJSON,
    APIBUSINESSPARTNERASupplierCompanyTypeToJSON,
    APIBUSINESSPARTNERASupplierCompanyTypeCreateFromJSON,
    APIBUSINESSPARTNERASupplierCompanyTypeCreateToJSON,
    APIBUSINESSPARTNERASupplierCompanyTypeUpdateFromJSON,
    APIBUSINESSPARTNERASupplierCompanyTypeUpdateToJSON,
    APIBUSINESSPARTNERASupplierDunningTypeFromJSON,
    APIBUSINESSPARTNERASupplierDunningTypeToJSON,
    APIBUSINESSPARTNERASupplierDunningTypeCreateFromJSON,
    APIBUSINESSPARTNERASupplierDunningTypeCreateToJSON,
    APIBUSINESSPARTNERASupplierTypeFromJSON,
    APIBUSINESSPARTNERASupplierTypeToJSON,
    APIBUSINESSPARTNERASupplierWithHoldingTaxTypeFromJSON,
    APIBUSINESSPARTNERASupplierWithHoldingTaxTypeToJSON,
    APIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreateFromJSON,
    APIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreateToJSON,
    CollectionOfASupplierCompanyTextTypeFromJSON,
    CollectionOfASupplierCompanyTextTypeToJSON,
    CollectionOfASupplierCompanyTypeFromJSON,
    CollectionOfASupplierCompanyTypeToJSON,
    CollectionOfASupplierDunningTypeFromJSON,
    CollectionOfASupplierDunningTypeToJSON,
    CollectionOfASupplierWithHoldingTaxTypeFromJSON,
    CollectionOfASupplierWithHoldingTaxTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ASupplierCompanyGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierCompanyGetOrderbyEnum>;
    $select?: Set<ASupplierCompanyGetSelectEnum>;
    $expand?: Set<ASupplierCompanyGetExpandEnum>;
}

export interface ASupplierCompanyPostRequest {
    aPIBUSINESSPARTNERASupplierCompanyTypeCreate: APIBUSINESSPARTNERASupplierCompanyTypeCreate;
}

export interface ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeGetRequest {
    supplier: string;
    companyCode: string;
    $select?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeGetSelectEnum>;
    $expand?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeGetExpandEnum>;
}

export interface ASupplierCompanySupplierSupplierCompanyCodeCompanyCodePatchRequest {
    supplier: string;
    companyCode: string;
    aPIBUSINESSPARTNERASupplierCompanyTypeUpdate: APIBUSINESSPARTNERASupplierCompanyTypeUpdate;
}

export interface ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetRequest {
    supplier: string;
    companyCode: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum>;
    $select?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetSelectEnum>;
}

export interface ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPostRequest {
    supplier: string;
    companyCode: string;
    aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate: APIBUSINESSPARTNERASupplierCompanyTextTypeCreate;
}

export interface ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetRequest {
    supplier: string;
    companyCode: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetOrderbyEnum>;
    $select?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetSelectEnum>;
}

export interface ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPostRequest {
    supplier: string;
    companyCode: string;
    aPIBUSINESSPARTNERASupplierDunningTypeCreate: APIBUSINESSPARTNERASupplierDunningTypeCreate;
}

export interface ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetRequest {
    supplier: string;
    companyCode: string;
    $select?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetSelectEnum>;
    $expand?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetExpandEnum>;
}

export interface ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetRequest {
    supplier: string;
    companyCode: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetOrderbyEnum>;
    $select?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetSelectEnum>;
}

export interface ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPostRequest {
    supplier: string;
    companyCode: string;
    aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate: APIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate;
}

export interface ASupplierSupplierToSupplierCompanyGetRequest {
    supplier: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierSupplierToSupplierCompanyGetOrderbyEnum>;
    $select?: Set<ASupplierSupplierToSupplierCompanyGetSelectEnum>;
    $expand?: Set<ASupplierSupplierToSupplierCompanyGetExpandEnum>;
}

export interface ASupplierSupplierToSupplierCompanyPostRequest {
    supplier: string;
    aPIBUSINESSPARTNERASupplierCompanyTypeCreate: APIBUSINESSPARTNERASupplierCompanyTypeCreate;
}

/**
 * 
 */
export class SupplierCompanyApi extends runtime.BaseAPI {

    /**
     * Retrieves all supplier company data available in the system.
     * Retrieves supplier company data.
     */
    async aSupplierCompanyGetRaw(requestParameters: ASupplierCompanyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierCompanyType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierCompanyTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all supplier company data available in the system.
     * Retrieves supplier company data.
     */
    async aSupplierCompanyGet(requestParameters: ASupplierCompanyGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierCompanyType> {
        const response = await this.aSupplierCompanyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates supplier company data including Dunning, WithholdingTax, and Text data.
     * Creates supplier company data.
     */
    async aSupplierCompanyPostRaw(requestParameters: ASupplierCompanyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierCompanyType>> {
        if (requestParameters.aPIBUSINESSPARTNERASupplierCompanyTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierCompanyTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierCompanyTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierCompanyTypeCreate was null or undefined when calling aSupplierCompanyPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierCompanyTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierCompanyTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierCompanyTypeFromJSON(jsonValue));
    }

    /**
     * Creates supplier company data including Dunning, WithholdingTax, and Text data.
     * Creates supplier company data.
     */
    async aSupplierCompanyPost(requestParameters: ASupplierCompanyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierCompanyType> {
        const response = await this.aSupplierCompanyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves supplier company data by using Supplier and CompanyCode fields.
     * Retrieves supplier company data using key fields.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeGetRaw(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierCompanyType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany(Supplier='{Supplier}',CompanyCode='{CompanyCode}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierCompanyTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves supplier company data by using Supplier and CompanyCode fields.
     * Retrieves supplier company data using key fields.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeGet(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierCompanyType> {
        const response = await this.aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates supplier company data by using Supplier and CompanyCode fields.
     * Updates supplier company data using key fields.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodePatchRaw(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodePatch.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodePatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierCompanyTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERASupplierCompanyTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierCompanyTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierCompanyTypeUpdate was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany(Supplier='{Supplier}',CompanyCode='{CompanyCode}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierCompanyTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierCompanyTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates supplier company data by using Supplier and CompanyCode fields.
     * Updates supplier company data using key fields.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodePatch(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aSupplierCompanySupplierSupplierCompanyCodeCompanyCodePatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all the supplier company text data attached to supplier company in the system.
     * Retrieves supplier company text data attached to company data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetRaw(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierCompanyTextType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany(Supplier='{Supplier}',CompanyCode='{CompanyCode}')/to_CompanyText`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierCompanyTextTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the supplier company text data attached to supplier company in the system.
     * Retrieves supplier company text data attached to company data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGet(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierCompanyTextType> {
        const response = await this.aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates text data attached to a supplier company in the system.
     * Creates supplier company text data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPostRaw(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierCompanyTextType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPost.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany(Supplier='{Supplier}',CompanyCode='{CompanyCode}')/to_CompanyText`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierCompanyTextTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierCompanyTextTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierCompanyTextTypeFromJSON(jsonValue));
    }

    /**
     * Creates text data attached to a supplier company in the system.
     * Creates supplier company text data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPost(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierCompanyTextType> {
        const response = await this.aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the dunning records attached to supplier company in the system.
     * Retrieves dunning records attached to supplier company data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetRaw(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierDunningType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany(Supplier='{Supplier}',CompanyCode='{CompanyCode}')/to_SupplierDunning`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierDunningTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the dunning records attached to supplier company in the system.
     * Retrieves dunning records attached to supplier company data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGet(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierDunningType> {
        const response = await this.aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns a new dunning records to a supplier company code.
     * Creates a new dunning records attached to supplier company.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPostRaw(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierDunningType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPost.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierDunningTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierDunningTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierDunningTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierDunningTypeCreate was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany(Supplier='{Supplier}',CompanyCode='{CompanyCode}')/to_SupplierDunning`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierDunningTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierDunningTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierDunningTypeFromJSON(jsonValue));
    }

    /**
     * Assigns a new dunning records to a supplier company code.
     * Creates a new dunning records attached to supplier company.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPost(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierDunningType> {
        const response = await this.aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves general data of all the supplier records available in the system.
     * Retrieves supplier general data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetRaw(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany(Supplier='{Supplier}',CompanyCode='{CompanyCode}')/to_Supplier`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves general data of all the supplier records available in the system.
     * Retrieves supplier general data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGet(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierType> {
        const response = await this.aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all withholding tax records attached to supplier company in the system.
     * Retrieves supplier withholding tax records.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetRaw(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierWithHoldingTaxType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany(Supplier='{Supplier}',CompanyCode='{CompanyCode}')/to_SupplierWithHoldingTax`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierWithHoldingTaxTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all withholding tax records attached to supplier company in the system.
     * Retrieves supplier withholding tax records.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGet(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierWithHoldingTaxType> {
        const response = await this.aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates supplier withholding tax record linked to supplier company data.
     * Creates new supplier witholding tax data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPostRaw(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierWithHoldingTaxType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPost.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany(Supplier='{Supplier}',CompanyCode='{CompanyCode}')/to_SupplierWithHoldingTax`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierWithHoldingTaxTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierWithHoldingTaxTypeFromJSON(jsonValue));
    }

    /**
     * Creates supplier withholding tax record linked to supplier company data.
     * Creates new supplier witholding tax data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPost(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierWithHoldingTaxType> {
        const response = await this.aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all supplier company data available in the system.
     * Retrieves supplier company data.
     */
    async aSupplierSupplierToSupplierCompanyGetRaw(requestParameters: ASupplierSupplierToSupplierCompanyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierCompanyType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierSupplierToSupplierCompanyGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Supplier('{Supplier}')/to_SupplierCompany`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierCompanyTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all supplier company data available in the system.
     * Retrieves supplier company data.
     */
    async aSupplierSupplierToSupplierCompanyGet(requestParameters: ASupplierSupplierToSupplierCompanyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierCompanyType> {
        const response = await this.aSupplierSupplierToSupplierCompanyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates supplier company data including Dunning, WithholdingTax, and Text data.
     * Creates supplier company data.
     */
    async aSupplierSupplierToSupplierCompanyPostRaw(requestParameters: ASupplierSupplierToSupplierCompanyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierCompanyType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierSupplierToSupplierCompanyPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierCompanyTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierCompanyTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierCompanyTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierCompanyTypeCreate was null or undefined when calling aSupplierSupplierToSupplierCompanyPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Supplier('{Supplier}')/to_SupplierCompany`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierCompanyTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierCompanyTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierCompanyTypeFromJSON(jsonValue));
    }

    /**
     * Creates supplier company data including Dunning, WithholdingTax, and Text data.
     * Creates supplier company data.
     */
    async aSupplierSupplierToSupplierCompanyPost(requestParameters: ASupplierSupplierToSupplierCompanyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierCompanyType> {
        const response = await this.aSupplierSupplierToSupplierCompanyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ASupplierCompanyGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    CompanyCodeName: 'CompanyCodeName',
    CompanyCodeNameDesc: 'CompanyCodeName desc',
    PaymentBlockingReason: 'PaymentBlockingReason',
    PaymentBlockingReasonDesc: 'PaymentBlockingReason desc',
    SupplierIsBlockedForPosting: 'SupplierIsBlockedForPosting',
    SupplierIsBlockedForPostingDesc: 'SupplierIsBlockedForPosting desc',
    AccountingClerk: 'AccountingClerk',
    AccountingClerkDesc: 'AccountingClerk desc',
    AccountingClerkFaxNumber: 'AccountingClerkFaxNumber',
    AccountingClerkFaxNumberDesc: 'AccountingClerkFaxNumber desc',
    AccountingClerkPhoneNumber: 'AccountingClerkPhoneNumber',
    AccountingClerkPhoneNumberDesc: 'AccountingClerkPhoneNumber desc',
    SupplierClerk: 'SupplierClerk',
    SupplierClerkDesc: 'SupplierClerk desc',
    SupplierClerkUrl: 'SupplierClerkURL',
    SupplierClerkUrlDesc: 'SupplierClerkURL desc',
    PaymentMethodsList: 'PaymentMethodsList',
    PaymentMethodsListDesc: 'PaymentMethodsList desc',
    PaymentReason: 'PaymentReason',
    PaymentReasonDesc: 'PaymentReason desc',
    PaymentTerms: 'PaymentTerms',
    PaymentTermsDesc: 'PaymentTerms desc',
    ClearCustomerSupplier: 'ClearCustomerSupplier',
    ClearCustomerSupplierDesc: 'ClearCustomerSupplier desc',
    IsToBeLocallyProcessed: 'IsToBeLocallyProcessed',
    IsToBeLocallyProcessedDesc: 'IsToBeLocallyProcessed desc',
    ItemIsToBePaidSeparately: 'ItemIsToBePaidSeparately',
    ItemIsToBePaidSeparatelyDesc: 'ItemIsToBePaidSeparately desc',
    PaymentIsToBeSentByEdi: 'PaymentIsToBeSentByEDI',
    PaymentIsToBeSentByEdiDesc: 'PaymentIsToBeSentByEDI desc',
    HouseBank: 'HouseBank',
    HouseBankDesc: 'HouseBank desc',
    CheckPaidDurationInDays: 'CheckPaidDurationInDays',
    CheckPaidDurationInDaysDesc: 'CheckPaidDurationInDays desc',
    Currency: 'Currency',
    CurrencyDesc: 'Currency desc',
    BillOfExchLmtAmtInCoCodeCrcy: 'BillOfExchLmtAmtInCoCodeCrcy',
    BillOfExchLmtAmtInCoCodeCrcyDesc: 'BillOfExchLmtAmtInCoCodeCrcy desc',
    SupplierClerkIdbySupplier: 'SupplierClerkIDBySupplier',
    SupplierClerkIdbySupplierDesc: 'SupplierClerkIDBySupplier desc',
    ReconciliationAccount: 'ReconciliationAccount',
    ReconciliationAccountDesc: 'ReconciliationAccount desc',
    InterestCalculationCode: 'InterestCalculationCode',
    InterestCalculationCodeDesc: 'InterestCalculationCode desc',
    InterestCalculationDate: 'InterestCalculationDate',
    InterestCalculationDateDesc: 'InterestCalculationDate desc',
    IntrstCalcFrequencyInMonths: 'IntrstCalcFrequencyInMonths',
    IntrstCalcFrequencyInMonthsDesc: 'IntrstCalcFrequencyInMonths desc',
    SupplierHeadOffice: 'SupplierHeadOffice',
    SupplierHeadOfficeDesc: 'SupplierHeadOffice desc',
    AlternativePayee: 'AlternativePayee',
    AlternativePayeeDesc: 'AlternativePayee desc',
    LayoutSortingRule: 'LayoutSortingRule',
    LayoutSortingRuleDesc: 'LayoutSortingRule desc',
    AparToleranceGroup: 'APARToleranceGroup',
    AparToleranceGroupDesc: 'APARToleranceGroup desc',
    SupplierCertificationDate: 'SupplierCertificationDate',
    SupplierCertificationDateDesc: 'SupplierCertificationDate desc',
    SupplierAccountNote: 'SupplierAccountNote',
    SupplierAccountNoteDesc: 'SupplierAccountNote desc',
    WithholdingTaxCountry: 'WithholdingTaxCountry',
    WithholdingTaxCountryDesc: 'WithholdingTaxCountry desc',
    DeletionIndicator: 'DeletionIndicator',
    DeletionIndicatorDesc: 'DeletionIndicator desc',
    CashPlanningGroup: 'CashPlanningGroup',
    CashPlanningGroupDesc: 'CashPlanningGroup desc',
    IsToBeCheckedForDuplicates: 'IsToBeCheckedForDuplicates',
    IsToBeCheckedForDuplicatesDesc: 'IsToBeCheckedForDuplicates desc',
    MinorityGroup: 'MinorityGroup',
    MinorityGroupDesc: 'MinorityGroup desc',
    SupplierAccountGroup: 'SupplierAccountGroup',
    SupplierAccountGroupDesc: 'SupplierAccountGroup desc'
} as const;
export type ASupplierCompanyGetOrderbyEnum = typeof ASupplierCompanyGetOrderbyEnum[keyof typeof ASupplierCompanyGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierCompanyGetSelectEnum = {
    Supplier: 'Supplier',
    CompanyCode: 'CompanyCode',
    AuthorizationGroup: 'AuthorizationGroup',
    CompanyCodeName: 'CompanyCodeName',
    PaymentBlockingReason: 'PaymentBlockingReason',
    SupplierIsBlockedForPosting: 'SupplierIsBlockedForPosting',
    AccountingClerk: 'AccountingClerk',
    AccountingClerkFaxNumber: 'AccountingClerkFaxNumber',
    AccountingClerkPhoneNumber: 'AccountingClerkPhoneNumber',
    SupplierClerk: 'SupplierClerk',
    SupplierClerkUrl: 'SupplierClerkURL',
    PaymentMethodsList: 'PaymentMethodsList',
    PaymentReason: 'PaymentReason',
    PaymentTerms: 'PaymentTerms',
    ClearCustomerSupplier: 'ClearCustomerSupplier',
    IsToBeLocallyProcessed: 'IsToBeLocallyProcessed',
    ItemIsToBePaidSeparately: 'ItemIsToBePaidSeparately',
    PaymentIsToBeSentByEdi: 'PaymentIsToBeSentByEDI',
    HouseBank: 'HouseBank',
    CheckPaidDurationInDays: 'CheckPaidDurationInDays',
    Currency: 'Currency',
    BillOfExchLmtAmtInCoCodeCrcy: 'BillOfExchLmtAmtInCoCodeCrcy',
    SupplierClerkIdbySupplier: 'SupplierClerkIDBySupplier',
    ReconciliationAccount: 'ReconciliationAccount',
    InterestCalculationCode: 'InterestCalculationCode',
    InterestCalculationDate: 'InterestCalculationDate',
    IntrstCalcFrequencyInMonths: 'IntrstCalcFrequencyInMonths',
    SupplierHeadOffice: 'SupplierHeadOffice',
    AlternativePayee: 'AlternativePayee',
    LayoutSortingRule: 'LayoutSortingRule',
    AparToleranceGroup: 'APARToleranceGroup',
    SupplierCertificationDate: 'SupplierCertificationDate',
    SupplierAccountNote: 'SupplierAccountNote',
    WithholdingTaxCountry: 'WithholdingTaxCountry',
    DeletionIndicator: 'DeletionIndicator',
    CashPlanningGroup: 'CashPlanningGroup',
    IsToBeCheckedForDuplicates: 'IsToBeCheckedForDuplicates',
    MinorityGroup: 'MinorityGroup',
    SupplierAccountGroup: 'SupplierAccountGroup'
} as const;
export type ASupplierCompanyGetSelectEnum = typeof ASupplierCompanyGetSelectEnum[keyof typeof ASupplierCompanyGetSelectEnum];
/**
 * @export
 */
export const ASupplierCompanyGetExpandEnum = {
    Star: '*',
    ToCompanyText: 'to_CompanyText',
    ToSupplier: 'to_Supplier',
    ToSupplierDunning: 'to_SupplierDunning',
    ToSupplierWithHoldingTax: 'to_SupplierWithHoldingTax'
} as const;
export type ASupplierCompanyGetExpandEnum = typeof ASupplierCompanyGetExpandEnum[keyof typeof ASupplierCompanyGetExpandEnum];
/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeGetSelectEnum = {
    Supplier: 'Supplier',
    CompanyCode: 'CompanyCode',
    AuthorizationGroup: 'AuthorizationGroup',
    CompanyCodeName: 'CompanyCodeName',
    PaymentBlockingReason: 'PaymentBlockingReason',
    SupplierIsBlockedForPosting: 'SupplierIsBlockedForPosting',
    AccountingClerk: 'AccountingClerk',
    AccountingClerkFaxNumber: 'AccountingClerkFaxNumber',
    AccountingClerkPhoneNumber: 'AccountingClerkPhoneNumber',
    SupplierClerk: 'SupplierClerk',
    SupplierClerkUrl: 'SupplierClerkURL',
    PaymentMethodsList: 'PaymentMethodsList',
    PaymentReason: 'PaymentReason',
    PaymentTerms: 'PaymentTerms',
    ClearCustomerSupplier: 'ClearCustomerSupplier',
    IsToBeLocallyProcessed: 'IsToBeLocallyProcessed',
    ItemIsToBePaidSeparately: 'ItemIsToBePaidSeparately',
    PaymentIsToBeSentByEdi: 'PaymentIsToBeSentByEDI',
    HouseBank: 'HouseBank',
    CheckPaidDurationInDays: 'CheckPaidDurationInDays',
    Currency: 'Currency',
    BillOfExchLmtAmtInCoCodeCrcy: 'BillOfExchLmtAmtInCoCodeCrcy',
    SupplierClerkIdbySupplier: 'SupplierClerkIDBySupplier',
    ReconciliationAccount: 'ReconciliationAccount',
    InterestCalculationCode: 'InterestCalculationCode',
    InterestCalculationDate: 'InterestCalculationDate',
    IntrstCalcFrequencyInMonths: 'IntrstCalcFrequencyInMonths',
    SupplierHeadOffice: 'SupplierHeadOffice',
    AlternativePayee: 'AlternativePayee',
    LayoutSortingRule: 'LayoutSortingRule',
    AparToleranceGroup: 'APARToleranceGroup',
    SupplierCertificationDate: 'SupplierCertificationDate',
    SupplierAccountNote: 'SupplierAccountNote',
    WithholdingTaxCountry: 'WithholdingTaxCountry',
    DeletionIndicator: 'DeletionIndicator',
    CashPlanningGroup: 'CashPlanningGroup',
    IsToBeCheckedForDuplicates: 'IsToBeCheckedForDuplicates',
    MinorityGroup: 'MinorityGroup',
    SupplierAccountGroup: 'SupplierAccountGroup'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeGetSelectEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeGetSelectEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeGetSelectEnum];
/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeGetExpandEnum = {
    Star: '*',
    ToCompanyText: 'to_CompanyText',
    ToSupplier: 'to_Supplier',
    ToSupplierDunning: 'to_SupplierDunning',
    ToSupplierWithHoldingTax: 'to_SupplierWithHoldingTax'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeGetExpandEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeGetExpandEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeGetExpandEnum];
/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    LongTextId: 'LongTextID',
    LongTextIdDesc: 'LongTextID desc'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetSelectEnum = {
    Supplier: 'Supplier',
    CompanyCode: 'CompanyCode',
    Language: 'Language',
    LongTextId: 'LongTextID',
    LongText: 'LongText'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetSelectEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetSelectEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToCompanyTextGetSelectEnum];
/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    DunningArea: 'DunningArea',
    DunningAreaDesc: 'DunningArea desc',
    DunningBlock: 'DunningBlock',
    DunningBlockDesc: 'DunningBlock desc',
    DunningLevel: 'DunningLevel',
    DunningLevelDesc: 'DunningLevel desc',
    DunningProcedure: 'DunningProcedure',
    DunningProcedureDesc: 'DunningProcedure desc',
    DunningRecipient: 'DunningRecipient',
    DunningRecipientDesc: 'DunningRecipient desc',
    LastDunnedOn: 'LastDunnedOn',
    LastDunnedOnDesc: 'LastDunnedOn desc',
    LegDunningProcedureOn: 'LegDunningProcedureOn',
    LegDunningProcedureOnDesc: 'LegDunningProcedureOn desc',
    DunningClerk: 'DunningClerk',
    DunningClerkDesc: 'DunningClerk desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    SupplierAccountGroup: 'SupplierAccountGroup',
    SupplierAccountGroupDesc: 'SupplierAccountGroup desc'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetOrderbyEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetOrderbyEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetSelectEnum = {
    Supplier: 'Supplier',
    CompanyCode: 'CompanyCode',
    DunningArea: 'DunningArea',
    DunningBlock: 'DunningBlock',
    DunningLevel: 'DunningLevel',
    DunningProcedure: 'DunningProcedure',
    DunningRecipient: 'DunningRecipient',
    LastDunnedOn: 'LastDunnedOn',
    LegDunningProcedureOn: 'LegDunningProcedureOn',
    DunningClerk: 'DunningClerk',
    AuthorizationGroup: 'AuthorizationGroup',
    SupplierAccountGroup: 'SupplierAccountGroup'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetSelectEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetSelectEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierDunningGetSelectEnum];
/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetSelectEnum = {
    Supplier: 'Supplier',
    AlternativePayeeAccountNumber: 'AlternativePayeeAccountNumber',
    AuthorizationGroup: 'AuthorizationGroup',
    BusinessPartnerPanNumber: 'BusinessPartnerPanNumber',
    CreatedByUser: 'CreatedByUser',
    CreationDate: 'CreationDate',
    Customer: 'Customer',
    PaymentIsBlockedForSupplier: 'PaymentIsBlockedForSupplier',
    PostingIsBlocked: 'PostingIsBlocked',
    PurchasingIsBlocked: 'PurchasingIsBlocked',
    SupplierAccountGroup: 'SupplierAccountGroup',
    SupplierFullName: 'SupplierFullName',
    SupplierName: 'SupplierName',
    VatRegistration: 'VATRegistration',
    BirthDate: 'BirthDate',
    ConcatenatedInternationalLocNo: 'ConcatenatedInternationalLocNo',
    DeletionIndicator: 'DeletionIndicator',
    FiscalAddress: 'FiscalAddress',
    Industry: 'Industry',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber3: 'InternationalLocationNumber3',
    IsNaturalPerson: 'IsNaturalPerson',
    PaymentReason: 'PaymentReason',
    ResponsibleType: 'ResponsibleType',
    SuplrQltyInProcmtCertfnValidTo: 'SuplrQltyInProcmtCertfnValidTo',
    SuplrQualityManagementSystem: 'SuplrQualityManagementSystem',
    SupplierCorporateGroup: 'SupplierCorporateGroup',
    SupplierProcurementBlock: 'SupplierProcurementBlock',
    TaxNumber1: 'TaxNumber1',
    TaxNumber2: 'TaxNumber2',
    TaxNumber3: 'TaxNumber3',
    TaxNumber4: 'TaxNumber4',
    TaxNumber5: 'TaxNumber5',
    TaxNumberResponsible: 'TaxNumberResponsible',
    TaxNumberType: 'TaxNumberType',
    SuplrProofOfDelivRlvtCode: 'SuplrProofOfDelivRlvtCode',
    BrTaxIsSplit: 'BR_TaxIsSplit',
    DataExchangeInstructionKey: 'DataExchangeInstructionKey'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetSelectEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetSelectEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetSelectEnum];
/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetExpandEnum = {
    Star: '*',
    ToSupplierCompany: 'to_SupplierCompany',
    ToSupplierPurchasingOrg: 'to_SupplierPurchasingOrg',
    ToSupplierText: 'to_SupplierText'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetExpandEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetExpandEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetExpandEnum];
/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    WithholdingTaxType: 'WithholdingTaxType',
    WithholdingTaxTypeDesc: 'WithholdingTaxType desc',
    ExemptionDateBegin: 'ExemptionDateBegin',
    ExemptionDateBeginDesc: 'ExemptionDateBegin desc',
    ExemptionDateEnd: 'ExemptionDateEnd',
    ExemptionDateEndDesc: 'ExemptionDateEnd desc',
    ExemptionReason: 'ExemptionReason',
    ExemptionReasonDesc: 'ExemptionReason desc',
    IsWithholdingTaxSubject: 'IsWithholdingTaxSubject',
    IsWithholdingTaxSubjectDesc: 'IsWithholdingTaxSubject desc',
    RecipientType: 'RecipientType',
    RecipientTypeDesc: 'RecipientType desc',
    WithholdingTaxCertificate: 'WithholdingTaxCertificate',
    WithholdingTaxCertificateDesc: 'WithholdingTaxCertificate desc',
    WithholdingTaxCode: 'WithholdingTaxCode',
    WithholdingTaxCodeDesc: 'WithholdingTaxCode desc',
    WithholdingTaxExmptPercent: 'WithholdingTaxExmptPercent',
    WithholdingTaxExmptPercentDesc: 'WithholdingTaxExmptPercent desc',
    WithholdingTaxNumber: 'WithholdingTaxNumber',
    WithholdingTaxNumberDesc: 'WithholdingTaxNumber desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetOrderbyEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetOrderbyEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetSelectEnum = {
    Supplier: 'Supplier',
    CompanyCode: 'CompanyCode',
    WithholdingTaxType: 'WithholdingTaxType',
    ExemptionDateBegin: 'ExemptionDateBegin',
    ExemptionDateEnd: 'ExemptionDateEnd',
    ExemptionReason: 'ExemptionReason',
    IsWithholdingTaxSubject: 'IsWithholdingTaxSubject',
    RecipientType: 'RecipientType',
    WithholdingTaxCertificate: 'WithholdingTaxCertificate',
    WithholdingTaxCode: 'WithholdingTaxCode',
    WithholdingTaxExmptPercent: 'WithholdingTaxExmptPercent',
    WithholdingTaxNumber: 'WithholdingTaxNumber',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetSelectEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetSelectEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierWithHoldingTaxGetSelectEnum];
/**
 * @export
 */
export const ASupplierSupplierToSupplierCompanyGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    CompanyCodeName: 'CompanyCodeName',
    CompanyCodeNameDesc: 'CompanyCodeName desc',
    PaymentBlockingReason: 'PaymentBlockingReason',
    PaymentBlockingReasonDesc: 'PaymentBlockingReason desc',
    SupplierIsBlockedForPosting: 'SupplierIsBlockedForPosting',
    SupplierIsBlockedForPostingDesc: 'SupplierIsBlockedForPosting desc',
    AccountingClerk: 'AccountingClerk',
    AccountingClerkDesc: 'AccountingClerk desc',
    AccountingClerkFaxNumber: 'AccountingClerkFaxNumber',
    AccountingClerkFaxNumberDesc: 'AccountingClerkFaxNumber desc',
    AccountingClerkPhoneNumber: 'AccountingClerkPhoneNumber',
    AccountingClerkPhoneNumberDesc: 'AccountingClerkPhoneNumber desc',
    SupplierClerk: 'SupplierClerk',
    SupplierClerkDesc: 'SupplierClerk desc',
    SupplierClerkUrl: 'SupplierClerkURL',
    SupplierClerkUrlDesc: 'SupplierClerkURL desc',
    PaymentMethodsList: 'PaymentMethodsList',
    PaymentMethodsListDesc: 'PaymentMethodsList desc',
    PaymentReason: 'PaymentReason',
    PaymentReasonDesc: 'PaymentReason desc',
    PaymentTerms: 'PaymentTerms',
    PaymentTermsDesc: 'PaymentTerms desc',
    ClearCustomerSupplier: 'ClearCustomerSupplier',
    ClearCustomerSupplierDesc: 'ClearCustomerSupplier desc',
    IsToBeLocallyProcessed: 'IsToBeLocallyProcessed',
    IsToBeLocallyProcessedDesc: 'IsToBeLocallyProcessed desc',
    ItemIsToBePaidSeparately: 'ItemIsToBePaidSeparately',
    ItemIsToBePaidSeparatelyDesc: 'ItemIsToBePaidSeparately desc',
    PaymentIsToBeSentByEdi: 'PaymentIsToBeSentByEDI',
    PaymentIsToBeSentByEdiDesc: 'PaymentIsToBeSentByEDI desc',
    HouseBank: 'HouseBank',
    HouseBankDesc: 'HouseBank desc',
    CheckPaidDurationInDays: 'CheckPaidDurationInDays',
    CheckPaidDurationInDaysDesc: 'CheckPaidDurationInDays desc',
    Currency: 'Currency',
    CurrencyDesc: 'Currency desc',
    BillOfExchLmtAmtInCoCodeCrcy: 'BillOfExchLmtAmtInCoCodeCrcy',
    BillOfExchLmtAmtInCoCodeCrcyDesc: 'BillOfExchLmtAmtInCoCodeCrcy desc',
    SupplierClerkIdbySupplier: 'SupplierClerkIDBySupplier',
    SupplierClerkIdbySupplierDesc: 'SupplierClerkIDBySupplier desc',
    ReconciliationAccount: 'ReconciliationAccount',
    ReconciliationAccountDesc: 'ReconciliationAccount desc',
    InterestCalculationCode: 'InterestCalculationCode',
    InterestCalculationCodeDesc: 'InterestCalculationCode desc',
    InterestCalculationDate: 'InterestCalculationDate',
    InterestCalculationDateDesc: 'InterestCalculationDate desc',
    IntrstCalcFrequencyInMonths: 'IntrstCalcFrequencyInMonths',
    IntrstCalcFrequencyInMonthsDesc: 'IntrstCalcFrequencyInMonths desc',
    SupplierHeadOffice: 'SupplierHeadOffice',
    SupplierHeadOfficeDesc: 'SupplierHeadOffice desc',
    AlternativePayee: 'AlternativePayee',
    AlternativePayeeDesc: 'AlternativePayee desc',
    LayoutSortingRule: 'LayoutSortingRule',
    LayoutSortingRuleDesc: 'LayoutSortingRule desc',
    AparToleranceGroup: 'APARToleranceGroup',
    AparToleranceGroupDesc: 'APARToleranceGroup desc',
    SupplierCertificationDate: 'SupplierCertificationDate',
    SupplierCertificationDateDesc: 'SupplierCertificationDate desc',
    SupplierAccountNote: 'SupplierAccountNote',
    SupplierAccountNoteDesc: 'SupplierAccountNote desc',
    WithholdingTaxCountry: 'WithholdingTaxCountry',
    WithholdingTaxCountryDesc: 'WithholdingTaxCountry desc',
    DeletionIndicator: 'DeletionIndicator',
    DeletionIndicatorDesc: 'DeletionIndicator desc',
    CashPlanningGroup: 'CashPlanningGroup',
    CashPlanningGroupDesc: 'CashPlanningGroup desc',
    IsToBeCheckedForDuplicates: 'IsToBeCheckedForDuplicates',
    IsToBeCheckedForDuplicatesDesc: 'IsToBeCheckedForDuplicates desc',
    MinorityGroup: 'MinorityGroup',
    MinorityGroupDesc: 'MinorityGroup desc',
    SupplierAccountGroup: 'SupplierAccountGroup',
    SupplierAccountGroupDesc: 'SupplierAccountGroup desc'
} as const;
export type ASupplierSupplierToSupplierCompanyGetOrderbyEnum = typeof ASupplierSupplierToSupplierCompanyGetOrderbyEnum[keyof typeof ASupplierSupplierToSupplierCompanyGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierSupplierToSupplierCompanyGetSelectEnum = {
    Supplier: 'Supplier',
    CompanyCode: 'CompanyCode',
    AuthorizationGroup: 'AuthorizationGroup',
    CompanyCodeName: 'CompanyCodeName',
    PaymentBlockingReason: 'PaymentBlockingReason',
    SupplierIsBlockedForPosting: 'SupplierIsBlockedForPosting',
    AccountingClerk: 'AccountingClerk',
    AccountingClerkFaxNumber: 'AccountingClerkFaxNumber',
    AccountingClerkPhoneNumber: 'AccountingClerkPhoneNumber',
    SupplierClerk: 'SupplierClerk',
    SupplierClerkUrl: 'SupplierClerkURL',
    PaymentMethodsList: 'PaymentMethodsList',
    PaymentReason: 'PaymentReason',
    PaymentTerms: 'PaymentTerms',
    ClearCustomerSupplier: 'ClearCustomerSupplier',
    IsToBeLocallyProcessed: 'IsToBeLocallyProcessed',
    ItemIsToBePaidSeparately: 'ItemIsToBePaidSeparately',
    PaymentIsToBeSentByEdi: 'PaymentIsToBeSentByEDI',
    HouseBank: 'HouseBank',
    CheckPaidDurationInDays: 'CheckPaidDurationInDays',
    Currency: 'Currency',
    BillOfExchLmtAmtInCoCodeCrcy: 'BillOfExchLmtAmtInCoCodeCrcy',
    SupplierClerkIdbySupplier: 'SupplierClerkIDBySupplier',
    ReconciliationAccount: 'ReconciliationAccount',
    InterestCalculationCode: 'InterestCalculationCode',
    InterestCalculationDate: 'InterestCalculationDate',
    IntrstCalcFrequencyInMonths: 'IntrstCalcFrequencyInMonths',
    SupplierHeadOffice: 'SupplierHeadOffice',
    AlternativePayee: 'AlternativePayee',
    LayoutSortingRule: 'LayoutSortingRule',
    AparToleranceGroup: 'APARToleranceGroup',
    SupplierCertificationDate: 'SupplierCertificationDate',
    SupplierAccountNote: 'SupplierAccountNote',
    WithholdingTaxCountry: 'WithholdingTaxCountry',
    DeletionIndicator: 'DeletionIndicator',
    CashPlanningGroup: 'CashPlanningGroup',
    IsToBeCheckedForDuplicates: 'IsToBeCheckedForDuplicates',
    MinorityGroup: 'MinorityGroup',
    SupplierAccountGroup: 'SupplierAccountGroup'
} as const;
export type ASupplierSupplierToSupplierCompanyGetSelectEnum = typeof ASupplierSupplierToSupplierCompanyGetSelectEnum[keyof typeof ASupplierSupplierToSupplierCompanyGetSelectEnum];
/**
 * @export
 */
export const ASupplierSupplierToSupplierCompanyGetExpandEnum = {
    Star: '*',
    ToCompanyText: 'to_CompanyText',
    ToSupplier: 'to_Supplier',
    ToSupplierDunning: 'to_SupplierDunning',
    ToSupplierWithHoldingTax: 'to_SupplierWithHoldingTax'
} as const;
export type ASupplierSupplierToSupplierCompanyGetExpandEnum = typeof ASupplierSupplierToSupplierCompanyGetExpandEnum[keyof typeof ASupplierSupplierToSupplierCompanyGetExpandEnum];
