/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoType,
  APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate,
  APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeUpdate,
  CollectionOfACustUnldgPtAddrDepdntInfoType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeFromJSON,
    APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeToJSON,
    APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreateFromJSON,
    APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreateToJSON,
    APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeUpdateFromJSON,
    APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeUpdateToJSON,
    CollectionOfACustUnldgPtAddrDepdntInfoTypeFromJSON,
    CollectionOfACustUnldgPtAddrDepdntInfoTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ACustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameDeleteRequest {
    customer: string;
    addressID: string;
    unloadingPointName: string;
}

export interface ACustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameGetRequest {
    customer: string;
    addressID: string;
    unloadingPointName: string;
    $select?: Set<ACustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameGetSelectEnum>;
}

export interface ACustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNamePatchRequest {
    customer: string;
    addressID: string;
    unloadingPointName: string;
    aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeUpdate: APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeUpdate;
}

export interface ACustUnldgPtAddrDepdntInfoGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustUnldgPtAddrDepdntInfoGetOrderbyEnum>;
    $select?: Set<ACustUnldgPtAddrDepdntInfoGetSelectEnum>;
}

export interface ACustUnldgPtAddrDepdntInfoPostRequest {
    aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate: APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate;
}

export interface ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetRequest {
    customer: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetOrderbyEnum>;
    $select?: Set<ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetSelectEnum>;
}

export interface ACustomerCustomerToCustUnldgPtAddrDepdntInfoPostRequest {
    customer: string;
    aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate: APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate;
}

/**
 * 
 */
export class CustomerUnloadingPointAddressDependentInformationApi extends runtime.BaseAPI {

    /**
     * Deletes address dependent customer unloading point data by using the key fields customer number, address ID, unloading point name.
     * Deletes address dependent customer unloading point data.
     */
    async aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameDeleteRaw(requestParameters: ACustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameDelete.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameDelete.');
        }

        if (requestParameters.unloadingPointName === null || requestParameters.unloadingPointName === undefined) {
            throw new runtime.RequiredError('unloadingPointName','Required parameter requestParameters.unloadingPointName was null or undefined when calling aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustUnldgPtAddrDepdntInfo(Customer='{Customer}',AddressID='{AddressID}',UnloadingPointName='{UnloadingPointName}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"UnloadingPointName"}}`, encodeURIComponent(String(requestParameters.unloadingPointName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes address dependent customer unloading point data by using the key fields customer number, address ID, unloading point name.
     * Deletes address dependent customer unloading point data.
     */
    async aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameDelete(requestParameters: ACustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves address dependent customer unloading point data by using the key fields customer number, address ID, unloading point name.
     * Retrieves address dependent customer unloading point data by using key fields.
     */
    async aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameGetRaw(requestParameters: ACustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameGet.');
        }

        if (requestParameters.unloadingPointName === null || requestParameters.unloadingPointName === undefined) {
            throw new runtime.RequiredError('unloadingPointName','Required parameter requestParameters.unloadingPointName was null or undefined when calling aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustUnldgPtAddrDepdntInfo(Customer='{Customer}',AddressID='{AddressID}',UnloadingPointName='{UnloadingPointName}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"UnloadingPointName"}}`, encodeURIComponent(String(requestParameters.unloadingPointName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent customer unloading point data by using the key fields customer number, address ID, unloading point name.
     * Retrieves address dependent customer unloading point data by using key fields.
     */
    async aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameGet(requestParameters: ACustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoType> {
        const response = await this.aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates address dependent customer unloading point data by using the key fields customer number, address ID, unloading point name.
     * Updates address dependent customer unloading point data.
     */
    async aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNamePatchRaw(requestParameters: ACustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNamePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNamePatch.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNamePatch.');
        }

        if (requestParameters.unloadingPointName === null || requestParameters.unloadingPointName === undefined) {
            throw new runtime.RequiredError('unloadingPointName','Required parameter requestParameters.unloadingPointName was null or undefined when calling aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNamePatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeUpdate was null or undefined when calling aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNamePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustUnldgPtAddrDepdntInfo(Customer='{Customer}',AddressID='{AddressID}',UnloadingPointName='{UnloadingPointName}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"UnloadingPointName"}}`, encodeURIComponent(String(requestParameters.unloadingPointName))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates address dependent customer unloading point data by using the key fields customer number, address ID, unloading point name.
     * Updates address dependent customer unloading point data.
     */
    async aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNamePatch(requestParameters: ACustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNamePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNamePatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves address dependent customer unloading point data fields of all the available records in the system.
     * Retrieves address dependent customer unloading point data.
     */
    async aCustUnldgPtAddrDepdntInfoGetRaw(requestParameters: ACustUnldgPtAddrDepdntInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustUnldgPtAddrDepdntInfoType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustUnldgPtAddrDepdntInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustUnldgPtAddrDepdntInfoTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent customer unloading point data fields of all the available records in the system.
     * Retrieves address dependent customer unloading point data.
     */
    async aCustUnldgPtAddrDepdntInfoGet(requestParameters: ACustUnldgPtAddrDepdntInfoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustUnldgPtAddrDepdntInfoType> {
        const response = await this.aCustUnldgPtAddrDepdntInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new address dependent customer unloading point data.
     * Creates new address dependent customer unloading point data.
     */
    async aCustUnldgPtAddrDepdntInfoPostRaw(requestParameters: ACustUnldgPtAddrDepdntInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoType>> {
        if (requestParameters.aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate was null or undefined when calling aCustUnldgPtAddrDepdntInfoPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustUnldgPtAddrDepdntInfo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeFromJSON(jsonValue));
    }

    /**
     * Creates new address dependent customer unloading point data.
     * Creates new address dependent customer unloading point data.
     */
    async aCustUnldgPtAddrDepdntInfoPost(requestParameters: ACustUnldgPtAddrDepdntInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoType> {
        const response = await this.aCustUnldgPtAddrDepdntInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves address dependent customer unloading point data fields of all the available records in the system.
     * Retrieves address dependent customer unloading point data.
     */
    async aCustomerCustomerToCustUnldgPtAddrDepdntInfoGetRaw(requestParameters: ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustUnldgPtAddrDepdntInfoType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustUnldgPtAddrDepdntInfoGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustUnldgPtAddrDepdntInfo`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustUnldgPtAddrDepdntInfoTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent customer unloading point data fields of all the available records in the system.
     * Retrieves address dependent customer unloading point data.
     */
    async aCustomerCustomerToCustUnldgPtAddrDepdntInfoGet(requestParameters: ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustUnldgPtAddrDepdntInfoType> {
        const response = await this.aCustomerCustomerToCustUnldgPtAddrDepdntInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new address dependent customer unloading point data.
     * Creates new address dependent customer unloading point data.
     */
    async aCustomerCustomerToCustUnldgPtAddrDepdntInfoPostRaw(requestParameters: ACustomerCustomerToCustUnldgPtAddrDepdntInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustUnldgPtAddrDepdntInfoPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate was null or undefined when calling aCustomerCustomerToCustUnldgPtAddrDepdntInfoPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustUnldgPtAddrDepdntInfo`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeFromJSON(jsonValue));
    }

    /**
     * Creates new address dependent customer unloading point data.
     * Creates new address dependent customer unloading point data.
     */
    async aCustomerCustomerToCustUnldgPtAddrDepdntInfoPost(requestParameters: ACustomerCustomerToCustUnldgPtAddrDepdntInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoType> {
        const response = await this.aCustomerCustomerToCustUnldgPtAddrDepdntInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ACustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameGetSelectEnum = {
    Customer: 'Customer',
    AddressId: 'AddressID',
    UnloadingPointName: 'UnloadingPointName',
    CustomerFactoryCalenderCode: 'CustomerFactoryCalenderCode',
    BpGoodsReceivingHoursCode: 'BPGoodsReceivingHoursCode',
    IsDfltBpUnloadingPoint: 'IsDfltBPUnloadingPoint',
    MondayMorningOpeningTime: 'MondayMorningOpeningTime',
    MondayMorningClosingTime: 'MondayMorningClosingTime',
    MondayAfternoonOpeningTime: 'MondayAfternoonOpeningTime',
    MondayAfternoonClosingTime: 'MondayAfternoonClosingTime',
    TuesdayMorningOpeningTime: 'TuesdayMorningOpeningTime',
    TuesdayMorningClosingTime: 'TuesdayMorningClosingTime',
    TuesdayAfternoonOpeningTime: 'TuesdayAfternoonOpeningTime',
    TuesdayAfternoonClosingTime: 'TuesdayAfternoonClosingTime',
    WednesdayMorningOpeningTime: 'WednesdayMorningOpeningTime',
    WednesdayMorningClosingTime: 'WednesdayMorningClosingTime',
    WednesdayAfternoonOpeningTime: 'WednesdayAfternoonOpeningTime',
    WednesdayAfternoonClosingTime: 'WednesdayAfternoonClosingTime',
    ThursdayMorningOpeningTime: 'ThursdayMorningOpeningTime',
    ThursdayMorningClosingTime: 'ThursdayMorningClosingTime',
    ThursdayAfternoonOpeningTime: 'ThursdayAfternoonOpeningTime',
    ThursdayAfternoonClosingTime: 'ThursdayAfternoonClosingTime',
    FridayMorningOpeningTime: 'FridayMorningOpeningTime',
    FridayMorningClosingTime: 'FridayMorningClosingTime',
    FridayAfternoonOpeningTime: 'FridayAfternoonOpeningTime',
    FridayAfternoonClosingTime: 'FridayAfternoonClosingTime',
    SaturdayMorningOpeningTime: 'SaturdayMorningOpeningTime',
    SaturdayMorningClosingTime: 'SaturdayMorningClosingTime',
    SaturdayAfternoonOpeningTime: 'SaturdayAfternoonOpeningTime',
    SaturdayAfternoonClosingTime: 'SaturdayAfternoonClosingTime',
    SundayMorningOpeningTime: 'SundayMorningOpeningTime',
    SundayMorningClosingTime: 'SundayMorningClosingTime',
    SundayAfternoonOpeningTime: 'SundayAfternoonOpeningTime',
    SundayAfternoonClosingTime: 'SundayAfternoonClosingTime'
} as const;
export type ACustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameGetSelectEnum = typeof ACustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameGetSelectEnum[keyof typeof ACustUnldgPtAddrDepdntInfoCustomerCustomerAddressIDAddressIDUnloadingPointNameUnloadingPointNameGetSelectEnum];
/**
 * @export
 */
export const ACustUnldgPtAddrDepdntInfoGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    UnloadingPointName: 'UnloadingPointName',
    UnloadingPointNameDesc: 'UnloadingPointName desc',
    CustomerFactoryCalenderCode: 'CustomerFactoryCalenderCode',
    CustomerFactoryCalenderCodeDesc: 'CustomerFactoryCalenderCode desc',
    BpGoodsReceivingHoursCode: 'BPGoodsReceivingHoursCode',
    BpGoodsReceivingHoursCodeDesc: 'BPGoodsReceivingHoursCode desc',
    IsDfltBpUnloadingPoint: 'IsDfltBPUnloadingPoint',
    IsDfltBpUnloadingPointDesc: 'IsDfltBPUnloadingPoint desc',
    MondayMorningOpeningTime: 'MondayMorningOpeningTime',
    MondayMorningOpeningTimeDesc: 'MondayMorningOpeningTime desc',
    MondayMorningClosingTime: 'MondayMorningClosingTime',
    MondayMorningClosingTimeDesc: 'MondayMorningClosingTime desc',
    MondayAfternoonOpeningTime: 'MondayAfternoonOpeningTime',
    MondayAfternoonOpeningTimeDesc: 'MondayAfternoonOpeningTime desc',
    MondayAfternoonClosingTime: 'MondayAfternoonClosingTime',
    MondayAfternoonClosingTimeDesc: 'MondayAfternoonClosingTime desc',
    TuesdayMorningOpeningTime: 'TuesdayMorningOpeningTime',
    TuesdayMorningOpeningTimeDesc: 'TuesdayMorningOpeningTime desc',
    TuesdayMorningClosingTime: 'TuesdayMorningClosingTime',
    TuesdayMorningClosingTimeDesc: 'TuesdayMorningClosingTime desc',
    TuesdayAfternoonOpeningTime: 'TuesdayAfternoonOpeningTime',
    TuesdayAfternoonOpeningTimeDesc: 'TuesdayAfternoonOpeningTime desc',
    TuesdayAfternoonClosingTime: 'TuesdayAfternoonClosingTime',
    TuesdayAfternoonClosingTimeDesc: 'TuesdayAfternoonClosingTime desc',
    WednesdayMorningOpeningTime: 'WednesdayMorningOpeningTime',
    WednesdayMorningOpeningTimeDesc: 'WednesdayMorningOpeningTime desc',
    WednesdayMorningClosingTime: 'WednesdayMorningClosingTime',
    WednesdayMorningClosingTimeDesc: 'WednesdayMorningClosingTime desc',
    WednesdayAfternoonOpeningTime: 'WednesdayAfternoonOpeningTime',
    WednesdayAfternoonOpeningTimeDesc: 'WednesdayAfternoonOpeningTime desc',
    WednesdayAfternoonClosingTime: 'WednesdayAfternoonClosingTime',
    WednesdayAfternoonClosingTimeDesc: 'WednesdayAfternoonClosingTime desc',
    ThursdayMorningOpeningTime: 'ThursdayMorningOpeningTime',
    ThursdayMorningOpeningTimeDesc: 'ThursdayMorningOpeningTime desc',
    ThursdayMorningClosingTime: 'ThursdayMorningClosingTime',
    ThursdayMorningClosingTimeDesc: 'ThursdayMorningClosingTime desc',
    ThursdayAfternoonOpeningTime: 'ThursdayAfternoonOpeningTime',
    ThursdayAfternoonOpeningTimeDesc: 'ThursdayAfternoonOpeningTime desc',
    ThursdayAfternoonClosingTime: 'ThursdayAfternoonClosingTime',
    ThursdayAfternoonClosingTimeDesc: 'ThursdayAfternoonClosingTime desc',
    FridayMorningOpeningTime: 'FridayMorningOpeningTime',
    FridayMorningOpeningTimeDesc: 'FridayMorningOpeningTime desc',
    FridayMorningClosingTime: 'FridayMorningClosingTime',
    FridayMorningClosingTimeDesc: 'FridayMorningClosingTime desc',
    FridayAfternoonOpeningTime: 'FridayAfternoonOpeningTime',
    FridayAfternoonOpeningTimeDesc: 'FridayAfternoonOpeningTime desc',
    FridayAfternoonClosingTime: 'FridayAfternoonClosingTime',
    FridayAfternoonClosingTimeDesc: 'FridayAfternoonClosingTime desc',
    SaturdayMorningOpeningTime: 'SaturdayMorningOpeningTime',
    SaturdayMorningOpeningTimeDesc: 'SaturdayMorningOpeningTime desc',
    SaturdayMorningClosingTime: 'SaturdayMorningClosingTime',
    SaturdayMorningClosingTimeDesc: 'SaturdayMorningClosingTime desc',
    SaturdayAfternoonOpeningTime: 'SaturdayAfternoonOpeningTime',
    SaturdayAfternoonOpeningTimeDesc: 'SaturdayAfternoonOpeningTime desc',
    SaturdayAfternoonClosingTime: 'SaturdayAfternoonClosingTime',
    SaturdayAfternoonClosingTimeDesc: 'SaturdayAfternoonClosingTime desc',
    SundayMorningOpeningTime: 'SundayMorningOpeningTime',
    SundayMorningOpeningTimeDesc: 'SundayMorningOpeningTime desc',
    SundayMorningClosingTime: 'SundayMorningClosingTime',
    SundayMorningClosingTimeDesc: 'SundayMorningClosingTime desc',
    SundayAfternoonOpeningTime: 'SundayAfternoonOpeningTime',
    SundayAfternoonOpeningTimeDesc: 'SundayAfternoonOpeningTime desc',
    SundayAfternoonClosingTime: 'SundayAfternoonClosingTime',
    SundayAfternoonClosingTimeDesc: 'SundayAfternoonClosingTime desc'
} as const;
export type ACustUnldgPtAddrDepdntInfoGetOrderbyEnum = typeof ACustUnldgPtAddrDepdntInfoGetOrderbyEnum[keyof typeof ACustUnldgPtAddrDepdntInfoGetOrderbyEnum];
/**
 * @export
 */
export const ACustUnldgPtAddrDepdntInfoGetSelectEnum = {
    Customer: 'Customer',
    AddressId: 'AddressID',
    UnloadingPointName: 'UnloadingPointName',
    CustomerFactoryCalenderCode: 'CustomerFactoryCalenderCode',
    BpGoodsReceivingHoursCode: 'BPGoodsReceivingHoursCode',
    IsDfltBpUnloadingPoint: 'IsDfltBPUnloadingPoint',
    MondayMorningOpeningTime: 'MondayMorningOpeningTime',
    MondayMorningClosingTime: 'MondayMorningClosingTime',
    MondayAfternoonOpeningTime: 'MondayAfternoonOpeningTime',
    MondayAfternoonClosingTime: 'MondayAfternoonClosingTime',
    TuesdayMorningOpeningTime: 'TuesdayMorningOpeningTime',
    TuesdayMorningClosingTime: 'TuesdayMorningClosingTime',
    TuesdayAfternoonOpeningTime: 'TuesdayAfternoonOpeningTime',
    TuesdayAfternoonClosingTime: 'TuesdayAfternoonClosingTime',
    WednesdayMorningOpeningTime: 'WednesdayMorningOpeningTime',
    WednesdayMorningClosingTime: 'WednesdayMorningClosingTime',
    WednesdayAfternoonOpeningTime: 'WednesdayAfternoonOpeningTime',
    WednesdayAfternoonClosingTime: 'WednesdayAfternoonClosingTime',
    ThursdayMorningOpeningTime: 'ThursdayMorningOpeningTime',
    ThursdayMorningClosingTime: 'ThursdayMorningClosingTime',
    ThursdayAfternoonOpeningTime: 'ThursdayAfternoonOpeningTime',
    ThursdayAfternoonClosingTime: 'ThursdayAfternoonClosingTime',
    FridayMorningOpeningTime: 'FridayMorningOpeningTime',
    FridayMorningClosingTime: 'FridayMorningClosingTime',
    FridayAfternoonOpeningTime: 'FridayAfternoonOpeningTime',
    FridayAfternoonClosingTime: 'FridayAfternoonClosingTime',
    SaturdayMorningOpeningTime: 'SaturdayMorningOpeningTime',
    SaturdayMorningClosingTime: 'SaturdayMorningClosingTime',
    SaturdayAfternoonOpeningTime: 'SaturdayAfternoonOpeningTime',
    SaturdayAfternoonClosingTime: 'SaturdayAfternoonClosingTime',
    SundayMorningOpeningTime: 'SundayMorningOpeningTime',
    SundayMorningClosingTime: 'SundayMorningClosingTime',
    SundayAfternoonOpeningTime: 'SundayAfternoonOpeningTime',
    SundayAfternoonClosingTime: 'SundayAfternoonClosingTime'
} as const;
export type ACustUnldgPtAddrDepdntInfoGetSelectEnum = typeof ACustUnldgPtAddrDepdntInfoGetSelectEnum[keyof typeof ACustUnldgPtAddrDepdntInfoGetSelectEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    UnloadingPointName: 'UnloadingPointName',
    UnloadingPointNameDesc: 'UnloadingPointName desc',
    CustomerFactoryCalenderCode: 'CustomerFactoryCalenderCode',
    CustomerFactoryCalenderCodeDesc: 'CustomerFactoryCalenderCode desc',
    BpGoodsReceivingHoursCode: 'BPGoodsReceivingHoursCode',
    BpGoodsReceivingHoursCodeDesc: 'BPGoodsReceivingHoursCode desc',
    IsDfltBpUnloadingPoint: 'IsDfltBPUnloadingPoint',
    IsDfltBpUnloadingPointDesc: 'IsDfltBPUnloadingPoint desc',
    MondayMorningOpeningTime: 'MondayMorningOpeningTime',
    MondayMorningOpeningTimeDesc: 'MondayMorningOpeningTime desc',
    MondayMorningClosingTime: 'MondayMorningClosingTime',
    MondayMorningClosingTimeDesc: 'MondayMorningClosingTime desc',
    MondayAfternoonOpeningTime: 'MondayAfternoonOpeningTime',
    MondayAfternoonOpeningTimeDesc: 'MondayAfternoonOpeningTime desc',
    MondayAfternoonClosingTime: 'MondayAfternoonClosingTime',
    MondayAfternoonClosingTimeDesc: 'MondayAfternoonClosingTime desc',
    TuesdayMorningOpeningTime: 'TuesdayMorningOpeningTime',
    TuesdayMorningOpeningTimeDesc: 'TuesdayMorningOpeningTime desc',
    TuesdayMorningClosingTime: 'TuesdayMorningClosingTime',
    TuesdayMorningClosingTimeDesc: 'TuesdayMorningClosingTime desc',
    TuesdayAfternoonOpeningTime: 'TuesdayAfternoonOpeningTime',
    TuesdayAfternoonOpeningTimeDesc: 'TuesdayAfternoonOpeningTime desc',
    TuesdayAfternoonClosingTime: 'TuesdayAfternoonClosingTime',
    TuesdayAfternoonClosingTimeDesc: 'TuesdayAfternoonClosingTime desc',
    WednesdayMorningOpeningTime: 'WednesdayMorningOpeningTime',
    WednesdayMorningOpeningTimeDesc: 'WednesdayMorningOpeningTime desc',
    WednesdayMorningClosingTime: 'WednesdayMorningClosingTime',
    WednesdayMorningClosingTimeDesc: 'WednesdayMorningClosingTime desc',
    WednesdayAfternoonOpeningTime: 'WednesdayAfternoonOpeningTime',
    WednesdayAfternoonOpeningTimeDesc: 'WednesdayAfternoonOpeningTime desc',
    WednesdayAfternoonClosingTime: 'WednesdayAfternoonClosingTime',
    WednesdayAfternoonClosingTimeDesc: 'WednesdayAfternoonClosingTime desc',
    ThursdayMorningOpeningTime: 'ThursdayMorningOpeningTime',
    ThursdayMorningOpeningTimeDesc: 'ThursdayMorningOpeningTime desc',
    ThursdayMorningClosingTime: 'ThursdayMorningClosingTime',
    ThursdayMorningClosingTimeDesc: 'ThursdayMorningClosingTime desc',
    ThursdayAfternoonOpeningTime: 'ThursdayAfternoonOpeningTime',
    ThursdayAfternoonOpeningTimeDesc: 'ThursdayAfternoonOpeningTime desc',
    ThursdayAfternoonClosingTime: 'ThursdayAfternoonClosingTime',
    ThursdayAfternoonClosingTimeDesc: 'ThursdayAfternoonClosingTime desc',
    FridayMorningOpeningTime: 'FridayMorningOpeningTime',
    FridayMorningOpeningTimeDesc: 'FridayMorningOpeningTime desc',
    FridayMorningClosingTime: 'FridayMorningClosingTime',
    FridayMorningClosingTimeDesc: 'FridayMorningClosingTime desc',
    FridayAfternoonOpeningTime: 'FridayAfternoonOpeningTime',
    FridayAfternoonOpeningTimeDesc: 'FridayAfternoonOpeningTime desc',
    FridayAfternoonClosingTime: 'FridayAfternoonClosingTime',
    FridayAfternoonClosingTimeDesc: 'FridayAfternoonClosingTime desc',
    SaturdayMorningOpeningTime: 'SaturdayMorningOpeningTime',
    SaturdayMorningOpeningTimeDesc: 'SaturdayMorningOpeningTime desc',
    SaturdayMorningClosingTime: 'SaturdayMorningClosingTime',
    SaturdayMorningClosingTimeDesc: 'SaturdayMorningClosingTime desc',
    SaturdayAfternoonOpeningTime: 'SaturdayAfternoonOpeningTime',
    SaturdayAfternoonOpeningTimeDesc: 'SaturdayAfternoonOpeningTime desc',
    SaturdayAfternoonClosingTime: 'SaturdayAfternoonClosingTime',
    SaturdayAfternoonClosingTimeDesc: 'SaturdayAfternoonClosingTime desc',
    SundayMorningOpeningTime: 'SundayMorningOpeningTime',
    SundayMorningOpeningTimeDesc: 'SundayMorningOpeningTime desc',
    SundayMorningClosingTime: 'SundayMorningClosingTime',
    SundayMorningClosingTimeDesc: 'SundayMorningClosingTime desc',
    SundayAfternoonOpeningTime: 'SundayAfternoonOpeningTime',
    SundayAfternoonOpeningTimeDesc: 'SundayAfternoonOpeningTime desc',
    SundayAfternoonClosingTime: 'SundayAfternoonClosingTime',
    SundayAfternoonClosingTimeDesc: 'SundayAfternoonClosingTime desc'
} as const;
export type ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetOrderbyEnum = typeof ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetOrderbyEnum[keyof typeof ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetSelectEnum = {
    Customer: 'Customer',
    AddressId: 'AddressID',
    UnloadingPointName: 'UnloadingPointName',
    CustomerFactoryCalenderCode: 'CustomerFactoryCalenderCode',
    BpGoodsReceivingHoursCode: 'BPGoodsReceivingHoursCode',
    IsDfltBpUnloadingPoint: 'IsDfltBPUnloadingPoint',
    MondayMorningOpeningTime: 'MondayMorningOpeningTime',
    MondayMorningClosingTime: 'MondayMorningClosingTime',
    MondayAfternoonOpeningTime: 'MondayAfternoonOpeningTime',
    MondayAfternoonClosingTime: 'MondayAfternoonClosingTime',
    TuesdayMorningOpeningTime: 'TuesdayMorningOpeningTime',
    TuesdayMorningClosingTime: 'TuesdayMorningClosingTime',
    TuesdayAfternoonOpeningTime: 'TuesdayAfternoonOpeningTime',
    TuesdayAfternoonClosingTime: 'TuesdayAfternoonClosingTime',
    WednesdayMorningOpeningTime: 'WednesdayMorningOpeningTime',
    WednesdayMorningClosingTime: 'WednesdayMorningClosingTime',
    WednesdayAfternoonOpeningTime: 'WednesdayAfternoonOpeningTime',
    WednesdayAfternoonClosingTime: 'WednesdayAfternoonClosingTime',
    ThursdayMorningOpeningTime: 'ThursdayMorningOpeningTime',
    ThursdayMorningClosingTime: 'ThursdayMorningClosingTime',
    ThursdayAfternoonOpeningTime: 'ThursdayAfternoonOpeningTime',
    ThursdayAfternoonClosingTime: 'ThursdayAfternoonClosingTime',
    FridayMorningOpeningTime: 'FridayMorningOpeningTime',
    FridayMorningClosingTime: 'FridayMorningClosingTime',
    FridayAfternoonOpeningTime: 'FridayAfternoonOpeningTime',
    FridayAfternoonClosingTime: 'FridayAfternoonClosingTime',
    SaturdayMorningOpeningTime: 'SaturdayMorningOpeningTime',
    SaturdayMorningClosingTime: 'SaturdayMorningClosingTime',
    SaturdayAfternoonOpeningTime: 'SaturdayAfternoonOpeningTime',
    SaturdayAfternoonClosingTime: 'SaturdayAfternoonClosingTime',
    SundayMorningOpeningTime: 'SundayMorningOpeningTime',
    SundayMorningClosingTime: 'SundayMorningClosingTime',
    SundayAfternoonOpeningTime: 'SundayAfternoonOpeningTime',
    SundayAfternoonClosingTime: 'SundayAfternoonClosingTime'
} as const;
export type ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetSelectEnum = typeof ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetSelectEnum[keyof typeof ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetSelectEnum];
