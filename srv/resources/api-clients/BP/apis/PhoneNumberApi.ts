/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERAAddressPhoneNumberType,
  APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate,
  APIBUSINESSPARTNERAAddressPhoneNumberTypeUpdate,
  CollectionOfAAddressPhoneNumberType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERAAddressPhoneNumberTypeFromJSON,
    APIBUSINESSPARTNERAAddressPhoneNumberTypeToJSON,
    APIBUSINESSPARTNERAAddressPhoneNumberTypeCreateFromJSON,
    APIBUSINESSPARTNERAAddressPhoneNumberTypeCreateToJSON,
    APIBUSINESSPARTNERAAddressPhoneNumberTypeUpdateFromJSON,
    APIBUSINESSPARTNERAAddressPhoneNumberTypeUpdateToJSON,
    CollectionOfAAddressPhoneNumberTypeFromJSON,
    CollectionOfAAddressPhoneNumberTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface AAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRequest {
    addressID: string;
    person: string;
    ordinalNumber: string;
}

export interface AAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRequest {
    addressID: string;
    person: string;
    ordinalNumber: string;
    $select?: Set<AAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetSelectEnum>;
}

export interface AAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRequest {
    addressID: string;
    person: string;
    ordinalNumber: string;
    aPIBUSINESSPARTNERAAddressPhoneNumberTypeUpdate: APIBUSINESSPARTNERAAddressPhoneNumberTypeUpdate;
}

export interface AAddressPhoneNumberGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<AAddressPhoneNumberGetOrderbyEnum>;
    $select?: Set<AAddressPhoneNumberGetSelectEnum>;
}

export interface AAddressPhoneNumberPostRequest {
    aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum>;
    $select?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetSelectEnum>;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPostRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetOrderbyEnum>;
    $select?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetSelectEnum>;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPostRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetRequest {
    businessPartner: string;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetSelectEnum>;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostRequest {
    businessPartner: string;
    addressID: string;
    aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetRequest {
    businessPartner: string;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetSelectEnum>;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostRequest {
    businessPartner: string;
    addressID: string;
    aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate;
}

/**
 * 
 */
export class PhoneNumberApi extends runtime.BaseAPI {

    /**
     * Delete business partner mobile/telephone address data of the record identified by AddressID, Person, and OrdinalNumber fields.
     * Deletes mobile/telephone address records by key fields.
     */
    async aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRaw(requestParameters: AAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete.');
        }

        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete.');
        }

        if (requestParameters.ordinalNumber === null || requestParameters.ordinalNumber === undefined) {
            throw new runtime.RequiredError('ordinalNumber','Required parameter requestParameters.ordinalNumber was null or undefined when calling aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_AddressPhoneNumber(AddressID='{AddressID}',Person='{Person}',OrdinalNumber='{OrdinalNumber}')`.replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"Person"}}`, encodeURIComponent(String(requestParameters.person))).replace(`{${"OrdinalNumber"}}`, encodeURIComponent(String(requestParameters.ordinalNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete business partner mobile/telephone address data of the record identified by AddressID, Person, and OrdinalNumber fields.
     * Deletes mobile/telephone address records by key fields.
     */
    async aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete(requestParameters: AAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retreives mobile/telephone address record by AddressID, Person and OrdinalNumber.
     * Retrieves mobile/telephone address record by key fields.
     */
    async aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRaw(requestParameters: AAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressPhoneNumberType>> {
        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet.');
        }

        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet.');
        }

        if (requestParameters.ordinalNumber === null || requestParameters.ordinalNumber === undefined) {
            throw new runtime.RequiredError('ordinalNumber','Required parameter requestParameters.ordinalNumber was null or undefined when calling aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_AddressPhoneNumber(AddressID='{AddressID}',Person='{Person}',OrdinalNumber='{OrdinalNumber}')`.replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"Person"}}`, encodeURIComponent(String(requestParameters.person))).replace(`{${"OrdinalNumber"}}`, encodeURIComponent(String(requestParameters.ordinalNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retreives mobile/telephone address record by AddressID, Person and OrdinalNumber.
     * Retrieves mobile/telephone address record by key fields.
     */
    async aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet(requestParameters: AAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressPhoneNumberType> {
        const response = await this.aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates business partner mobile/telephone address data of the record identified by AddressID, Person, and OrdinalNumber.
     * Updates mobile/telephone address records by key fields.
     */
    async aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRaw(requestParameters: AAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch.');
        }

        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch.');
        }

        if (requestParameters.ordinalNumber === null || requestParameters.ordinalNumber === undefined) {
            throw new runtime.RequiredError('ordinalNumber','Required parameter requestParameters.ordinalNumber was null or undefined when calling aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressPhoneNumberTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeUpdate was null or undefined when calling aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_AddressPhoneNumber(AddressID='{AddressID}',Person='{Person}',OrdinalNumber='{OrdinalNumber}')`.replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"Person"}}`, encodeURIComponent(String(requestParameters.person))).replace(`{${"OrdinalNumber"}}`, encodeURIComponent(String(requestParameters.ordinalNumber))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressPhoneNumberTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates business partner mobile/telephone address data of the record identified by AddressID, Person, and OrdinalNumber.
     * Updates mobile/telephone address records by key fields.
     */
    async aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch(requestParameters: AAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aAddressPhoneNumberGetRaw(requestParameters: AAddressPhoneNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressPhoneNumberType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_AddressPhoneNumber`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aAddressPhoneNumberGet(requestParameters: AAddressPhoneNumberGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressPhoneNumberType> {
        const response = await this.aAddressPhoneNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aAddressPhoneNumberPostRaw(requestParameters: AAddressPhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressPhoneNumberType>> {
        if (requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate was null or undefined when calling aAddressPhoneNumberPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_AddressPhoneNumber`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aAddressPhoneNumberPost(requestParameters: AAddressPhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressPhoneNumberType> {
        const response = await this.aAddressPhoneNumberPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressPhoneNumberType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGet.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGet.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGet.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_MobilePhoneNumber`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGet(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressPhoneNumberType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPostRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressPhoneNumberType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_MobilePhoneNumber`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPost(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressPhoneNumberType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressPhoneNumberType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGet.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGet.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGet.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_PhoneNumber`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGet(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressPhoneNumberType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPostRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressPhoneNumberType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPost.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPost.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPost.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_PhoneNumber`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPost(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressPhoneNumberType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressPhoneNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_MobilePhoneNumber`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressPhoneNumberType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressPhoneNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_MobilePhoneNumber`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressPhoneNumberType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressPhoneNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_PhoneNumber`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressPhoneNumberType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressPhoneNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_PhoneNumber`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressPhoneNumberType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    DestinationLocationCountry: 'DestinationLocationCountry',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberExtension: 'PhoneNumberExtension',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    PhoneNumberType: 'PhoneNumberType',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type AAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetSelectEnum = typeof AAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetSelectEnum[keyof typeof AAddressPhoneNumberAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetSelectEnum];
/**
 * @export
 */
export const AAddressPhoneNumberGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    DestinationLocationCountry: 'DestinationLocationCountry',
    DestinationLocationCountryDesc: 'DestinationLocationCountry desc',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    IsDefaultPhoneNumberDesc: 'IsDefaultPhoneNumber desc',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberDesc: 'PhoneNumber desc',
    PhoneNumberExtension: 'PhoneNumberExtension',
    PhoneNumberExtensionDesc: 'PhoneNumberExtension desc',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    InternationalPhoneNumberDesc: 'InternationalPhoneNumber desc',
    PhoneNumberType: 'PhoneNumberType',
    PhoneNumberTypeDesc: 'PhoneNumberType desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc'
} as const;
export type AAddressPhoneNumberGetOrderbyEnum = typeof AAddressPhoneNumberGetOrderbyEnum[keyof typeof AAddressPhoneNumberGetOrderbyEnum];
/**
 * @export
 */
export const AAddressPhoneNumberGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    DestinationLocationCountry: 'DestinationLocationCountry',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberExtension: 'PhoneNumberExtension',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    PhoneNumberType: 'PhoneNumberType',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type AAddressPhoneNumberGetSelectEnum = typeof AAddressPhoneNumberGetSelectEnum[keyof typeof AAddressPhoneNumberGetSelectEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    DestinationLocationCountry: 'DestinationLocationCountry',
    DestinationLocationCountryDesc: 'DestinationLocationCountry desc',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    IsDefaultPhoneNumberDesc: 'IsDefaultPhoneNumber desc',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberDesc: 'PhoneNumber desc',
    PhoneNumberExtension: 'PhoneNumberExtension',
    PhoneNumberExtensionDesc: 'PhoneNumberExtension desc',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    InternationalPhoneNumberDesc: 'InternationalPhoneNumber desc',
    PhoneNumberType: 'PhoneNumberType',
    PhoneNumberTypeDesc: 'PhoneNumberType desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    DestinationLocationCountry: 'DestinationLocationCountry',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberExtension: 'PhoneNumberExtension',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    PhoneNumberType: 'PhoneNumberType',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetSelectEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetSelectEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetSelectEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    DestinationLocationCountry: 'DestinationLocationCountry',
    DestinationLocationCountryDesc: 'DestinationLocationCountry desc',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    IsDefaultPhoneNumberDesc: 'IsDefaultPhoneNumber desc',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberDesc: 'PhoneNumber desc',
    PhoneNumberExtension: 'PhoneNumberExtension',
    PhoneNumberExtensionDesc: 'PhoneNumberExtension desc',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    InternationalPhoneNumberDesc: 'InternationalPhoneNumber desc',
    PhoneNumberType: 'PhoneNumberType',
    PhoneNumberTypeDesc: 'PhoneNumberType desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetOrderbyEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetOrderbyEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetOrderbyEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    DestinationLocationCountry: 'DestinationLocationCountry',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberExtension: 'PhoneNumberExtension',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    PhoneNumberType: 'PhoneNumberType',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetSelectEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetSelectEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    DestinationLocationCountry: 'DestinationLocationCountry',
    DestinationLocationCountryDesc: 'DestinationLocationCountry desc',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    IsDefaultPhoneNumberDesc: 'IsDefaultPhoneNumber desc',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberDesc: 'PhoneNumber desc',
    PhoneNumberExtension: 'PhoneNumberExtension',
    PhoneNumberExtensionDesc: 'PhoneNumberExtension desc',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    InternationalPhoneNumberDesc: 'InternationalPhoneNumber desc',
    PhoneNumberType: 'PhoneNumberType',
    PhoneNumberTypeDesc: 'PhoneNumberType desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    DestinationLocationCountry: 'DestinationLocationCountry',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberExtension: 'PhoneNumberExtension',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    PhoneNumberType: 'PhoneNumberType',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetSelectEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetSelectEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    DestinationLocationCountry: 'DestinationLocationCountry',
    DestinationLocationCountryDesc: 'DestinationLocationCountry desc',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    IsDefaultPhoneNumberDesc: 'IsDefaultPhoneNumber desc',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberDesc: 'PhoneNumber desc',
    PhoneNumberExtension: 'PhoneNumberExtension',
    PhoneNumberExtensionDesc: 'PhoneNumberExtension desc',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    InternationalPhoneNumberDesc: 'InternationalPhoneNumber desc',
    PhoneNumberType: 'PhoneNumberType',
    PhoneNumberTypeDesc: 'PhoneNumberType desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetOrderbyEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetOrderbyEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    DestinationLocationCountry: 'DestinationLocationCountry',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberExtension: 'PhoneNumberExtension',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    PhoneNumberType: 'PhoneNumberType',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetSelectEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetSelectEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetSelectEnum];
