/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERACustomerCompanyTextType,
  APIBUSINESSPARTNERACustomerCompanyTextTypeCreate,
  CollectionOfACustomerCompanyTextType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERACustomerCompanyTextTypeFromJSON,
    APIBUSINESSPARTNERACustomerCompanyTextTypeToJSON,
    APIBUSINESSPARTNERACustomerCompanyTextTypeCreateFromJSON,
    APIBUSINESSPARTNERACustomerCompanyTextTypeCreateToJSON,
    CollectionOfACustomerCompanyTextTypeFromJSON,
    CollectionOfACustomerCompanyTextTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetRequest {
    customer: string;
    companyCode: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum>;
    $select?: Set<ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetSelectEnum>;
}

export interface ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostRequest {
    customer: string;
    companyCode: string;
    aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate: APIBUSINESSPARTNERACustomerCompanyTextTypeCreate;
}

export interface ACustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteRequest {
    customer: string;
    companyCode: string;
    language: string;
    longTextID: string;
}

export interface ACustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetRequest {
    customer: string;
    companyCode: string;
    language: string;
    longTextID: string;
    $select?: Set<ACustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetSelectEnum>;
}

export interface ACustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchRequest {
    customer: string;
    companyCode: string;
    language: string;
    longTextID: string;
    body: object;
}

export interface ACustomerCompanyTextGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCompanyTextGetOrderbyEnum>;
    $select?: Set<ACustomerCompanyTextGetSelectEnum>;
}

export interface ACustomerCompanyTextPostRequest {
    aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate: APIBUSINESSPARTNERACustomerCompanyTextTypeCreate;
}

/**
 * 
 */
export class CustomerCompanyTextApi extends runtime.BaseAPI {

    /**
     * Retrieves all the customer company text records attached to customer company in the system.
     * Retrieves customer company text records attached to company data.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetRaw(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerCompanyTextType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompany(Customer='{Customer}',CompanyCode='{CompanyCode}')/to_CompanyText`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerCompanyTextTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the customer company text records attached to customer company in the system.
     * Retrieves customer company text records attached to company data.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerCompanyTextType> {
        const response = await this.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates text data linked to customer company.
     * Creates customer company text data.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostRaw(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerCompanyTextType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompany(Customer='{Customer}',CompanyCode='{CompanyCode}')/to_CompanyText`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerCompanyTextTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerCompanyTextTypeFromJSON(jsonValue));
    }

    /**
     * Creates text data linked to customer company.
     * Creates customer company text data.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerCompanyTextType> {
        const response = await this.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes text data linked to customer company by using the fields Customer, CompanyCode, Language and LongTextID.
     * Deletes customer company text data.
     */
    async aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteRaw(requestParameters: ACustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete.');
        }

        if (requestParameters.longTextID === null || requestParameters.longTextID === undefined) {
            throw new runtime.RequiredError('longTextID','Required parameter requestParameters.longTextID was null or undefined when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompanyText(Customer='{Customer}',CompanyCode='{CompanyCode}',Language='{Language}',LongTextID='{LongTextID}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"Language"}}`, encodeURIComponent(String(requestParameters.language))).replace(`{${"LongTextID"}}`, encodeURIComponent(String(requestParameters.longTextID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes text data linked to customer company by using the fields Customer, CompanyCode, Language and LongTextID.
     * Deletes customer company text data.
     */
    async aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete(requestParameters: ACustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves customer company text data by using the fields Customer, CompanyCode, Language and LongTextID.
     * Retrieves customer company text data by using key fields.
     */
    async aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetRaw(requestParameters: ACustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerCompanyTextType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet.');
        }

        if (requestParameters.longTextID === null || requestParameters.longTextID === undefined) {
            throw new runtime.RequiredError('longTextID','Required parameter requestParameters.longTextID was null or undefined when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompanyText(Customer='{Customer}',CompanyCode='{CompanyCode}',Language='{Language}',LongTextID='{LongTextID}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"Language"}}`, encodeURIComponent(String(requestParameters.language))).replace(`{${"LongTextID"}}`, encodeURIComponent(String(requestParameters.longTextID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerCompanyTextTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer company text data by using the fields Customer, CompanyCode, Language and LongTextID.
     * Retrieves customer company text data by using key fields.
     */
    async aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet(requestParameters: ACustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerCompanyTextType> {
        const response = await this.aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates text data linked to customer company by using fields Customer, CompanyCode, Language and LongTextID.
     * Updates customer company text data.
     */
    async aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchRaw(requestParameters: ACustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch.');
        }

        if (requestParameters.longTextID === null || requestParameters.longTextID === undefined) {
            throw new runtime.RequiredError('longTextID','Required parameter requestParameters.longTextID was null or undefined when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompanyText(Customer='{Customer}',CompanyCode='{CompanyCode}',Language='{Language}',LongTextID='{LongTextID}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"Language"}}`, encodeURIComponent(String(requestParameters.language))).replace(`{${"LongTextID"}}`, encodeURIComponent(String(requestParameters.longTextID))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates text data linked to customer company by using fields Customer, CompanyCode, Language and LongTextID.
     * Updates customer company text data.
     */
    async aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch(requestParameters: ACustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all the customer company text records attached to customer company in the system.
     * Retrieves customer company text records attached to company data.
     */
    async aCustomerCompanyTextGetRaw(requestParameters: ACustomerCompanyTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerCompanyTextType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompanyText`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerCompanyTextTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the customer company text records attached to customer company in the system.
     * Retrieves customer company text records attached to company data.
     */
    async aCustomerCompanyTextGet(requestParameters: ACustomerCompanyTextGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerCompanyTextType> {
        const response = await this.aCustomerCompanyTextGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates text data linked to customer company.
     * Creates customer company text data.
     */
    async aCustomerCompanyTextPostRaw(requestParameters: ACustomerCompanyTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerCompanyTextType>> {
        if (requestParameters.aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate was null or undefined when calling aCustomerCompanyTextPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompanyText`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerCompanyTextTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerCompanyTextTypeFromJSON(jsonValue));
    }

    /**
     * Creates text data linked to customer company.
     * Creates customer company text data.
     */
    async aCustomerCompanyTextPost(requestParameters: ACustomerCompanyTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerCompanyTextType> {
        const response = await this.aCustomerCompanyTextPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    LongTextId: 'LongTextID',
    LongTextIdDesc: 'LongTextID desc'
} as const;
export type ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum = typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum[keyof typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetSelectEnum = {
    Customer: 'Customer',
    CompanyCode: 'CompanyCode',
    Language: 'Language',
    LongTextId: 'LongTextID',
    LongText: 'LongText'
} as const;
export type ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetSelectEnum = typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetSelectEnum[keyof typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetSelectEnum];
/**
 * @export
 */
export const ACustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetSelectEnum = {
    Customer: 'Customer',
    CompanyCode: 'CompanyCode',
    Language: 'Language',
    LongTextId: 'LongTextID',
    LongText: 'LongText'
} as const;
export type ACustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetSelectEnum = typeof ACustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetSelectEnum[keyof typeof ACustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetSelectEnum];
/**
 * @export
 */
export const ACustomerCompanyTextGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    LongTextId: 'LongTextID',
    LongTextIdDesc: 'LongTextID desc'
} as const;
export type ACustomerCompanyTextGetOrderbyEnum = typeof ACustomerCompanyTextGetOrderbyEnum[keyof typeof ACustomerCompanyTextGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCompanyTextGetSelectEnum = {
    Customer: 'Customer',
    CompanyCode: 'CompanyCode',
    Language: 'Language',
    LongTextId: 'LongTextID',
    LongText: 'LongText'
} as const;
export type ACustomerCompanyTextGetSelectEnum = typeof ACustomerCompanyTextGetSelectEnum[keyof typeof ACustomerCompanyTextGetSelectEnum];
