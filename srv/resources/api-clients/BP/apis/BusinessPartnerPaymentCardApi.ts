/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERABusinessPartnerPaymentCardType,
  APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate,
  APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeUpdate,
  CollectionOfABusinessPartnerPaymentCardType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeFromJSON,
    APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeToJSON,
    APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreateToJSON,
    APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeUpdateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeUpdateToJSON,
    CollectionOfABusinessPartnerPaymentCardTypeFromJSON,
    CollectionOfABusinessPartnerPaymentCardTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABusinessPartnerBusinessPartnerToPaymentCardGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToPaymentCardGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToPaymentCardGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToPaymentCardPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate: APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate;
}

export interface ABusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberDeleteRequest {
    businessPartner: string;
    paymentCardID: string;
    paymentCardType: string;
    cardNumber: string;
}

export interface ABusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberGetRequest {
    businessPartner: string;
    paymentCardID: string;
    paymentCardType: string;
    cardNumber: string;
    $select?: Set<ABusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberGetSelectEnum>;
}

export interface ABusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberPatchRequest {
    businessPartner: string;
    paymentCardID: string;
    paymentCardType: string;
    cardNumber: string;
    aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeUpdate: APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeUpdate;
}

export interface ABusinessPartnerPaymentCardGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerPaymentCardGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerPaymentCardGetSelectEnum>;
}

export interface ABusinessPartnerPaymentCardPostRequest {
    aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate: APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate;
}

/**
 * 
 */
export class BusinessPartnerPaymentCardApi extends runtime.BaseAPI {

    /**
     * Retrieves business partner payment cards of all the available records linked to business partners in the system.
     * Retrieves business partner payment card data.
     */
    async aBusinessPartnerBusinessPartnerToPaymentCardGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToPaymentCardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerPaymentCardType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToPaymentCardGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_PaymentCard`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerPaymentCardTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner payment cards of all the available records linked to business partners in the system.
     * Retrieves business partner payment card data.
     */
    async aBusinessPartnerBusinessPartnerToPaymentCardGet(requestParameters: ABusinessPartnerBusinessPartnerToPaymentCardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerPaymentCardType> {
        const response = await this.aBusinessPartnerBusinessPartnerToPaymentCardGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns new payment card data to the business partner record.
     * Creates payment card data linked to business partner record.
     */
    async aBusinessPartnerBusinessPartnerToPaymentCardPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToPaymentCardPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerPaymentCardType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToPaymentCardPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToPaymentCardPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_PaymentCard`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeFromJSON(jsonValue));
    }

    /**
     * Assigns new payment card data to the business partner record.
     * Creates payment card data linked to business partner record.
     */
    async aBusinessPartnerBusinessPartnerToPaymentCardPost(requestParameters: ABusinessPartnerBusinessPartnerToPaymentCardPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerPaymentCardType> {
        const response = await this.aBusinessPartnerBusinessPartnerToPaymentCardPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes business partner payment card data by BusinessPartner, PaymentCardID, PaymentCardType and CardNumber.
     * Removes the payment card assigned to the business partner by using the key fields.
     */
    async aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberDeleteRaw(requestParameters: ABusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberDelete.');
        }

        if (requestParameters.paymentCardID === null || requestParameters.paymentCardID === undefined) {
            throw new runtime.RequiredError('paymentCardID','Required parameter requestParameters.paymentCardID was null or undefined when calling aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberDelete.');
        }

        if (requestParameters.paymentCardType === null || requestParameters.paymentCardType === undefined) {
            throw new runtime.RequiredError('paymentCardType','Required parameter requestParameters.paymentCardType was null or undefined when calling aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberDelete.');
        }

        if (requestParameters.cardNumber === null || requestParameters.cardNumber === undefined) {
            throw new runtime.RequiredError('cardNumber','Required parameter requestParameters.cardNumber was null or undefined when calling aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerPaymentCard(BusinessPartner='{BusinessPartner}',PaymentCardID='{PaymentCardID}',PaymentCardType='{PaymentCardType}',CardNumber='{CardNumber}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"PaymentCardID"}}`, encodeURIComponent(String(requestParameters.paymentCardID))).replace(`{${"PaymentCardType"}}`, encodeURIComponent(String(requestParameters.paymentCardType))).replace(`{${"CardNumber"}}`, encodeURIComponent(String(requestParameters.cardNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes business partner payment card data by BusinessPartner, PaymentCardID, PaymentCardType and CardNumber.
     * Removes the payment card assigned to the business partner by using the key fields.
     */
    async aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberDelete(requestParameters: ABusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves business partner payment card data using Business Partner, card ID, card type and card number.
     * Retrieves business partner payment card data by key fields.
     */
    async aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberGetRaw(requestParameters: ABusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerPaymentCardType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberGet.');
        }

        if (requestParameters.paymentCardID === null || requestParameters.paymentCardID === undefined) {
            throw new runtime.RequiredError('paymentCardID','Required parameter requestParameters.paymentCardID was null or undefined when calling aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberGet.');
        }

        if (requestParameters.paymentCardType === null || requestParameters.paymentCardType === undefined) {
            throw new runtime.RequiredError('paymentCardType','Required parameter requestParameters.paymentCardType was null or undefined when calling aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberGet.');
        }

        if (requestParameters.cardNumber === null || requestParameters.cardNumber === undefined) {
            throw new runtime.RequiredError('cardNumber','Required parameter requestParameters.cardNumber was null or undefined when calling aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerPaymentCard(BusinessPartner='{BusinessPartner}',PaymentCardID='{PaymentCardID}',PaymentCardType='{PaymentCardType}',CardNumber='{CardNumber}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"PaymentCardID"}}`, encodeURIComponent(String(requestParameters.paymentCardID))).replace(`{${"PaymentCardType"}}`, encodeURIComponent(String(requestParameters.paymentCardType))).replace(`{${"CardNumber"}}`, encodeURIComponent(String(requestParameters.cardNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner payment card data using Business Partner, card ID, card type and card number.
     * Retrieves business partner payment card data by key fields.
     */
    async aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberGet(requestParameters: ABusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerPaymentCardType> {
        const response = await this.aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates business partner payment card data by BusinessPartner, PaymentCardID, PaymentCardType and CardNumber.
     * Updates business partner payment card data.
     */
    async aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberPatchRaw(requestParameters: ABusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberPatch.');
        }

        if (requestParameters.paymentCardID === null || requestParameters.paymentCardID === undefined) {
            throw new runtime.RequiredError('paymentCardID','Required parameter requestParameters.paymentCardID was null or undefined when calling aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberPatch.');
        }

        if (requestParameters.paymentCardType === null || requestParameters.paymentCardType === undefined) {
            throw new runtime.RequiredError('paymentCardType','Required parameter requestParameters.paymentCardType was null or undefined when calling aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberPatch.');
        }

        if (requestParameters.cardNumber === null || requestParameters.cardNumber === undefined) {
            throw new runtime.RequiredError('cardNumber','Required parameter requestParameters.cardNumber was null or undefined when calling aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeUpdate was null or undefined when calling aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerPaymentCard(BusinessPartner='{BusinessPartner}',PaymentCardID='{PaymentCardID}',PaymentCardType='{PaymentCardType}',CardNumber='{CardNumber}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"PaymentCardID"}}`, encodeURIComponent(String(requestParameters.paymentCardID))).replace(`{${"PaymentCardType"}}`, encodeURIComponent(String(requestParameters.paymentCardType))).replace(`{${"CardNumber"}}`, encodeURIComponent(String(requestParameters.cardNumber))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates business partner payment card data by BusinessPartner, PaymentCardID, PaymentCardType and CardNumber.
     * Updates business partner payment card data.
     */
    async aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberPatch(requestParameters: ABusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves business partner payment card data fields of all the available records in the system.
     * Retrieves business partner payment card data.
     */
    async aBusinessPartnerPaymentCardGetRaw(requestParameters: ABusinessPartnerPaymentCardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerPaymentCardType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerPaymentCard`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerPaymentCardTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner payment card data fields of all the available records in the system.
     * Retrieves business partner payment card data.
     */
    async aBusinessPartnerPaymentCardGet(requestParameters: ABusinessPartnerPaymentCardGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerPaymentCardType> {
        const response = await this.aBusinessPartnerPaymentCardGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new business partner payment card data to the business partner.
     * Creates new business partner payment card data.
     */
    async aBusinessPartnerPaymentCardPostRaw(requestParameters: ABusinessPartnerPaymentCardPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerPaymentCardType>> {
        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate was null or undefined when calling aBusinessPartnerPaymentCardPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerPaymentCard`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new business partner payment card data to the business partner.
     * Creates new business partner payment card data.
     */
    async aBusinessPartnerPaymentCardPost(requestParameters: ABusinessPartnerPaymentCardPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerPaymentCardType> {
        const response = await this.aBusinessPartnerPaymentCardPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToPaymentCardGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    PaymentCardId: 'PaymentCardID',
    PaymentCardIdDesc: 'PaymentCardID desc',
    PaymentCardType: 'PaymentCardType',
    PaymentCardTypeDesc: 'PaymentCardType desc',
    CardNumber: 'CardNumber',
    CardNumberDesc: 'CardNumber desc',
    IsStandardCard: 'IsStandardCard',
    IsStandardCardDesc: 'IsStandardCard desc',
    CardDescription: 'CardDescription',
    CardDescriptionDesc: 'CardDescription desc',
    ValidityDate: 'ValidityDate',
    ValidityDateDesc: 'ValidityDate desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    CardHolder: 'CardHolder',
    CardHolderDesc: 'CardHolder desc',
    CardIssuingBank: 'CardIssuingBank',
    CardIssuingBankDesc: 'CardIssuingBank desc',
    CardIssueDate: 'CardIssueDate',
    CardIssueDateDesc: 'CardIssueDate desc',
    PaymentCardLock: 'PaymentCardLock',
    PaymentCardLockDesc: 'PaymentCardLock desc',
    MaskedCardNumber: 'MaskedCardNumber',
    MaskedCardNumberDesc: 'MaskedCardNumber desc'
} as const;
export type ABusinessPartnerBusinessPartnerToPaymentCardGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToPaymentCardGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToPaymentCardGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToPaymentCardGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    PaymentCardId: 'PaymentCardID',
    PaymentCardType: 'PaymentCardType',
    CardNumber: 'CardNumber',
    IsStandardCard: 'IsStandardCard',
    CardDescription: 'CardDescription',
    ValidityDate: 'ValidityDate',
    ValidityEndDate: 'ValidityEndDate',
    CardHolder: 'CardHolder',
    CardIssuingBank: 'CardIssuingBank',
    CardIssueDate: 'CardIssueDate',
    PaymentCardLock: 'PaymentCardLock',
    MaskedCardNumber: 'MaskedCardNumber'
} as const;
export type ABusinessPartnerBusinessPartnerToPaymentCardGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToPaymentCardGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToPaymentCardGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    PaymentCardId: 'PaymentCardID',
    PaymentCardType: 'PaymentCardType',
    CardNumber: 'CardNumber',
    IsStandardCard: 'IsStandardCard',
    CardDescription: 'CardDescription',
    ValidityDate: 'ValidityDate',
    ValidityEndDate: 'ValidityEndDate',
    CardHolder: 'CardHolder',
    CardIssuingBank: 'CardIssuingBank',
    CardIssueDate: 'CardIssueDate',
    PaymentCardLock: 'PaymentCardLock',
    MaskedCardNumber: 'MaskedCardNumber'
} as const;
export type ABusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberGetSelectEnum = typeof ABusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberGetSelectEnum[keyof typeof ABusinessPartnerPaymentCardBusinessPartnerBusinessPartnerPaymentCardIDPaymentCardIDPaymentCardTypePaymentCardTypeCardNumberCardNumberGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerPaymentCardGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    PaymentCardId: 'PaymentCardID',
    PaymentCardIdDesc: 'PaymentCardID desc',
    PaymentCardType: 'PaymentCardType',
    PaymentCardTypeDesc: 'PaymentCardType desc',
    CardNumber: 'CardNumber',
    CardNumberDesc: 'CardNumber desc',
    IsStandardCard: 'IsStandardCard',
    IsStandardCardDesc: 'IsStandardCard desc',
    CardDescription: 'CardDescription',
    CardDescriptionDesc: 'CardDescription desc',
    ValidityDate: 'ValidityDate',
    ValidityDateDesc: 'ValidityDate desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    CardHolder: 'CardHolder',
    CardHolderDesc: 'CardHolder desc',
    CardIssuingBank: 'CardIssuingBank',
    CardIssuingBankDesc: 'CardIssuingBank desc',
    CardIssueDate: 'CardIssueDate',
    CardIssueDateDesc: 'CardIssueDate desc',
    PaymentCardLock: 'PaymentCardLock',
    PaymentCardLockDesc: 'PaymentCardLock desc',
    MaskedCardNumber: 'MaskedCardNumber',
    MaskedCardNumberDesc: 'MaskedCardNumber desc'
} as const;
export type ABusinessPartnerPaymentCardGetOrderbyEnum = typeof ABusinessPartnerPaymentCardGetOrderbyEnum[keyof typeof ABusinessPartnerPaymentCardGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerPaymentCardGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    PaymentCardId: 'PaymentCardID',
    PaymentCardType: 'PaymentCardType',
    CardNumber: 'CardNumber',
    IsStandardCard: 'IsStandardCard',
    CardDescription: 'CardDescription',
    ValidityDate: 'ValidityDate',
    ValidityEndDate: 'ValidityEndDate',
    CardHolder: 'CardHolder',
    CardIssuingBank: 'CardIssuingBank',
    CardIssueDate: 'CardIssueDate',
    PaymentCardLock: 'PaymentCardLock',
    MaskedCardNumber: 'MaskedCardNumber'
} as const;
export type ABusinessPartnerPaymentCardGetSelectEnum = typeof ABusinessPartnerPaymentCardGetSelectEnum[keyof typeof ABusinessPartnerPaymentCardGetSelectEnum];
