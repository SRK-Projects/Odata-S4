/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERACustomerDunningType,
  APIBUSINESSPARTNERACustomerDunningTypeCreate,
  APIBUSINESSPARTNERACustomerDunningTypeUpdate,
  CollectionOfACustomerDunningType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERACustomerDunningTypeFromJSON,
    APIBUSINESSPARTNERACustomerDunningTypeToJSON,
    APIBUSINESSPARTNERACustomerDunningTypeCreateFromJSON,
    APIBUSINESSPARTNERACustomerDunningTypeCreateToJSON,
    APIBUSINESSPARTNERACustomerDunningTypeUpdateFromJSON,
    APIBUSINESSPARTNERACustomerDunningTypeUpdateToJSON,
    CollectionOfACustomerDunningTypeFromJSON,
    CollectionOfACustomerDunningTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetRequest {
    customer: string;
    companyCode: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetOrderbyEnum>;
    $select?: Set<ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetSelectEnum>;
}

export interface ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPostRequest {
    customer: string;
    companyCode: string;
    aPIBUSINESSPARTNERACustomerDunningTypeCreate: APIBUSINESSPARTNERACustomerDunningTypeCreate;
}

export interface ACustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteRequest {
    customer: string;
    companyCode: string;
    dunningArea: string;
}

export interface ACustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaGetRequest {
    customer: string;
    companyCode: string;
    dunningArea: string;
    $select?: Set<ACustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaGetSelectEnum>;
}

export interface ACustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaPatchRequest {
    customer: string;
    companyCode: string;
    dunningArea: string;
    aPIBUSINESSPARTNERACustomerDunningTypeUpdate: APIBUSINESSPARTNERACustomerDunningTypeUpdate;
}

export interface ACustomerDunningGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerDunningGetOrderbyEnum>;
    $select?: Set<ACustomerDunningGetSelectEnum>;
}

export interface ACustomerDunningPostRequest {
    aPIBUSINESSPARTNERACustomerDunningTypeCreate: APIBUSINESSPARTNERACustomerDunningTypeCreate;
}

/**
 * 
 */
export class CustomerDunningApi extends runtime.BaseAPI {

    /**
     * Retrieves all the dunning records attached to customer company in the system.
     * Retrieves dunning records attached to customer company.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetRaw(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerDunningType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompany(Customer='{Customer}',CompanyCode='{CompanyCode}')/to_CustomerDunning`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerDunningTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the dunning records attached to customer company in the system.
     * Retrieves dunning records attached to customer company.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGet(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerDunningType> {
        const response = await this.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns a new dunning record to a customer company code.
     * Creates new dunning record attached to customer company.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPostRaw(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerDunningType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPost.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerDunningTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerDunningTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerDunningTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerDunningTypeCreate was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompany(Customer='{Customer}',CompanyCode='{CompanyCode}')/to_CustomerDunning`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerDunningTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerDunningTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerDunningTypeFromJSON(jsonValue));
    }

    /**
     * Assigns a new dunning record to a customer company code.
     * Creates new dunning record attached to customer company.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPost(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerDunningType> {
        const response = await this.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes customer company code dunning record identified by key fields such as Customer, CompanyCode, and Dunning Area.
     * Updates customer company code dunning record by using key fields.
     */
    async aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteRaw(requestParameters: ACustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaDelete.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaDelete.');
        }

        if (requestParameters.dunningArea === null || requestParameters.dunningArea === undefined) {
            throw new runtime.RequiredError('dunningArea','Required parameter requestParameters.dunningArea was null or undefined when calling aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerDunning(Customer='{Customer}',CompanyCode='{CompanyCode}',DunningArea='{DunningArea}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"DunningArea"}}`, encodeURIComponent(String(requestParameters.dunningArea))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes customer company code dunning record identified by key fields such as Customer, CompanyCode, and Dunning Area.
     * Updates customer company code dunning record by using key fields.
     */
    async aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaDelete(requestParameters: ACustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all the dunning records by customer, company code, and dunning area.
     * Retrieves all the dunning records by using key fields.
     */
    async aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaGetRaw(requestParameters: ACustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerDunningType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaGet.');
        }

        if (requestParameters.dunningArea === null || requestParameters.dunningArea === undefined) {
            throw new runtime.RequiredError('dunningArea','Required parameter requestParameters.dunningArea was null or undefined when calling aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerDunning(Customer='{Customer}',CompanyCode='{CompanyCode}',DunningArea='{DunningArea}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"DunningArea"}}`, encodeURIComponent(String(requestParameters.dunningArea))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerDunningTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the dunning records by customer, company code, and dunning area.
     * Retrieves all the dunning records by using key fields.
     */
    async aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaGet(requestParameters: ACustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerDunningType> {
        const response = await this.aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates customer company code dunning record identified by key fields such as Customer, CompanyCode, and Dunning Area.
     * Updates customer company code dunning record.
     */
    async aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaPatchRaw(requestParameters: ACustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaPatch.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaPatch.');
        }

        if (requestParameters.dunningArea === null || requestParameters.dunningArea === undefined) {
            throw new runtime.RequiredError('dunningArea','Required parameter requestParameters.dunningArea was null or undefined when calling aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerDunningTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERACustomerDunningTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerDunningTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerDunningTypeUpdate was null or undefined when calling aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerDunning(Customer='{Customer}',CompanyCode='{CompanyCode}',DunningArea='{DunningArea}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))).replace(`{${"DunningArea"}}`, encodeURIComponent(String(requestParameters.dunningArea))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerDunningTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerDunningTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates customer company code dunning record identified by key fields such as Customer, CompanyCode, and Dunning Area.
     * Updates customer company code dunning record.
     */
    async aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaPatch(requestParameters: ACustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all the dunning records attached to customer company in the system.
     * Retrieves dunning records attached to customer company.
     */
    async aCustomerDunningGetRaw(requestParameters: ACustomerDunningGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerDunningType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerDunning`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerDunningTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the dunning records attached to customer company in the system.
     * Retrieves dunning records attached to customer company.
     */
    async aCustomerDunningGet(requestParameters: ACustomerDunningGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerDunningType> {
        const response = await this.aCustomerDunningGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns a new dunning record to a customer company code.
     * Creates new dunning record attached to customer company.
     */
    async aCustomerDunningPostRaw(requestParameters: ACustomerDunningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerDunningType>> {
        if (requestParameters.aPIBUSINESSPARTNERACustomerDunningTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerDunningTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerDunningTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerDunningTypeCreate was null or undefined when calling aCustomerDunningPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerDunning`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerDunningTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerDunningTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerDunningTypeFromJSON(jsonValue));
    }

    /**
     * Assigns a new dunning record to a customer company code.
     * Creates new dunning record attached to customer company.
     */
    async aCustomerDunningPost(requestParameters: ACustomerDunningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerDunningType> {
        const response = await this.aCustomerDunningPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    DunningArea: 'DunningArea',
    DunningAreaDesc: 'DunningArea desc',
    DunningBlock: 'DunningBlock',
    DunningBlockDesc: 'DunningBlock desc',
    DunningLevel: 'DunningLevel',
    DunningLevelDesc: 'DunningLevel desc',
    DunningProcedure: 'DunningProcedure',
    DunningProcedureDesc: 'DunningProcedure desc',
    DunningRecipient: 'DunningRecipient',
    DunningRecipientDesc: 'DunningRecipient desc',
    LastDunnedOn: 'LastDunnedOn',
    LastDunnedOnDesc: 'LastDunnedOn desc',
    LegDunningProcedureOn: 'LegDunningProcedureOn',
    LegDunningProcedureOnDesc: 'LegDunningProcedureOn desc',
    DunningClerk: 'DunningClerk',
    DunningClerkDesc: 'DunningClerk desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    CustomerAccountGroup: 'CustomerAccountGroup',
    CustomerAccountGroupDesc: 'CustomerAccountGroup desc'
} as const;
export type ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetOrderbyEnum = typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetOrderbyEnum[keyof typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetSelectEnum = {
    Customer: 'Customer',
    CompanyCode: 'CompanyCode',
    DunningArea: 'DunningArea',
    DunningBlock: 'DunningBlock',
    DunningLevel: 'DunningLevel',
    DunningProcedure: 'DunningProcedure',
    DunningRecipient: 'DunningRecipient',
    LastDunnedOn: 'LastDunnedOn',
    LegDunningProcedureOn: 'LegDunningProcedureOn',
    DunningClerk: 'DunningClerk',
    AuthorizationGroup: 'AuthorizationGroup',
    CustomerAccountGroup: 'CustomerAccountGroup'
} as const;
export type ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetSelectEnum = typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetSelectEnum[keyof typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetSelectEnum];
/**
 * @export
 */
export const ACustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaGetSelectEnum = {
    Customer: 'Customer',
    CompanyCode: 'CompanyCode',
    DunningArea: 'DunningArea',
    DunningBlock: 'DunningBlock',
    DunningLevel: 'DunningLevel',
    DunningProcedure: 'DunningProcedure',
    DunningRecipient: 'DunningRecipient',
    LastDunnedOn: 'LastDunnedOn',
    LegDunningProcedureOn: 'LegDunningProcedureOn',
    DunningClerk: 'DunningClerk',
    AuthorizationGroup: 'AuthorizationGroup',
    CustomerAccountGroup: 'CustomerAccountGroup'
} as const;
export type ACustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaGetSelectEnum = typeof ACustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaGetSelectEnum[keyof typeof ACustomerDunningCustomerCustomerCompanyCodeCompanyCodeDunningAreaDunningAreaGetSelectEnum];
/**
 * @export
 */
export const ACustomerDunningGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    DunningArea: 'DunningArea',
    DunningAreaDesc: 'DunningArea desc',
    DunningBlock: 'DunningBlock',
    DunningBlockDesc: 'DunningBlock desc',
    DunningLevel: 'DunningLevel',
    DunningLevelDesc: 'DunningLevel desc',
    DunningProcedure: 'DunningProcedure',
    DunningProcedureDesc: 'DunningProcedure desc',
    DunningRecipient: 'DunningRecipient',
    DunningRecipientDesc: 'DunningRecipient desc',
    LastDunnedOn: 'LastDunnedOn',
    LastDunnedOnDesc: 'LastDunnedOn desc',
    LegDunningProcedureOn: 'LegDunningProcedureOn',
    LegDunningProcedureOnDesc: 'LegDunningProcedureOn desc',
    DunningClerk: 'DunningClerk',
    DunningClerkDesc: 'DunningClerk desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    CustomerAccountGroup: 'CustomerAccountGroup',
    CustomerAccountGroupDesc: 'CustomerAccountGroup desc'
} as const;
export type ACustomerDunningGetOrderbyEnum = typeof ACustomerDunningGetOrderbyEnum[keyof typeof ACustomerDunningGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerDunningGetSelectEnum = {
    Customer: 'Customer',
    CompanyCode: 'CompanyCode',
    DunningArea: 'DunningArea',
    DunningBlock: 'DunningBlock',
    DunningLevel: 'DunningLevel',
    DunningProcedure: 'DunningProcedure',
    DunningRecipient: 'DunningRecipient',
    LastDunnedOn: 'LastDunnedOn',
    LegDunningProcedureOn: 'LegDunningProcedureOn',
    DunningClerk: 'DunningClerk',
    AuthorizationGroup: 'AuthorizationGroup',
    CustomerAccountGroup: 'CustomerAccountGroup'
} as const;
export type ACustomerDunningGetSelectEnum = typeof ACustomerDunningGetSelectEnum[keyof typeof ACustomerDunningGetSelectEnum];
