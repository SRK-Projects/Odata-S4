/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERACustomerUnloadingPointType,
  APIBUSINESSPARTNERACustomerUnloadingPointTypeCreate,
  APIBUSINESSPARTNERACustomerUnloadingPointTypeUpdate,
  CollectionOfACustomerUnloadingPointType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERACustomerUnloadingPointTypeFromJSON,
    APIBUSINESSPARTNERACustomerUnloadingPointTypeToJSON,
    APIBUSINESSPARTNERACustomerUnloadingPointTypeCreateFromJSON,
    APIBUSINESSPARTNERACustomerUnloadingPointTypeCreateToJSON,
    APIBUSINESSPARTNERACustomerUnloadingPointTypeUpdateFromJSON,
    APIBUSINESSPARTNERACustomerUnloadingPointTypeUpdateToJSON,
    CollectionOfACustomerUnloadingPointTypeFromJSON,
    CollectionOfACustomerUnloadingPointTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ACustomerCustomerToCustomerUnloadingPointGetRequest {
    customer: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCustomerToCustomerUnloadingPointGetOrderbyEnum>;
    $select?: Set<ACustomerCustomerToCustomerUnloadingPointGetSelectEnum>;
}

export interface ACustomerCustomerToCustomerUnloadingPointPostRequest {
    customer: string;
    aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate: APIBUSINESSPARTNERACustomerUnloadingPointTypeCreate;
}

export interface ACustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameDeleteRequest {
    customer: string;
    unloadingPointName: string;
}

export interface ACustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameGetRequest {
    customer: string;
    unloadingPointName: string;
    $select?: Set<ACustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameGetSelectEnum>;
}

export interface ACustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNamePatchRequest {
    customer: string;
    unloadingPointName: string;
    aPIBUSINESSPARTNERACustomerUnloadingPointTypeUpdate: APIBUSINESSPARTNERACustomerUnloadingPointTypeUpdate;
}

export interface ACustomerUnloadingPointGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerUnloadingPointGetOrderbyEnum>;
    $select?: Set<ACustomerUnloadingPointGetSelectEnum>;
}

export interface ACustomerUnloadingPointPostRequest {
    aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate: APIBUSINESSPARTNERACustomerUnloadingPointTypeCreate;
}

/**
 * 
 */
export class CustomerUnloadingPointApi extends runtime.BaseAPI {

    /**
     * Retrieves all unloading point data attached to a customer in the system.
     * Retrieves customer unloading point data.
     */
    async aCustomerCustomerToCustomerUnloadingPointGetRaw(requestParameters: ACustomerCustomerToCustomerUnloadingPointGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerUnloadingPointType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustomerUnloadingPointGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustomerUnloadingPoint`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerUnloadingPointTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all unloading point data attached to a customer in the system.
     * Retrieves customer unloading point data.
     */
    async aCustomerCustomerToCustomerUnloadingPointGet(requestParameters: ACustomerCustomerToCustomerUnloadingPointGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerUnloadingPointType> {
        const response = await this.aCustomerCustomerToCustomerUnloadingPointGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates customer unloading point record linked to customer.
     * Creates new customer unloading point record.
     */
    async aCustomerCustomerToCustomerUnloadingPointPostRaw(requestParameters: ACustomerCustomerToCustomerUnloadingPointPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerUnloadingPointType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustomerUnloadingPointPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate was null or undefined when calling aCustomerCustomerToCustomerUnloadingPointPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustomerUnloadingPoint`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerUnloadingPointTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerUnloadingPointTypeFromJSON(jsonValue));
    }

    /**
     * Creates customer unloading point record linked to customer.
     * Creates new customer unloading point record.
     */
    async aCustomerCustomerToCustomerUnloadingPointPost(requestParameters: ACustomerCustomerToCustomerUnloadingPointPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerUnloadingPointType> {
        const response = await this.aCustomerCustomerToCustomerUnloadingPointPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes unloading point data linked to customer by key fields such as Customer,UnloadingPointName.
     * Deletes customer unloading point record by key fields.
     */
    async aCustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameDeleteRaw(requestParameters: ACustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameDelete.');
        }

        if (requestParameters.unloadingPointName === null || requestParameters.unloadingPointName === undefined) {
            throw new runtime.RequiredError('unloadingPointName','Required parameter requestParameters.unloadingPointName was null or undefined when calling aCustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerUnloadingPoint(Customer='{Customer}',UnloadingPointName='{UnloadingPointName}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"UnloadingPointName"}}`, encodeURIComponent(String(requestParameters.unloadingPointName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes unloading point data linked to customer by key fields such as Customer,UnloadingPointName.
     * Deletes customer unloading point record by key fields.
     */
    async aCustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameDelete(requestParameters: ACustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves customer withholding tax records by customer and unloading point name.
     * Retrieves customer unloading point records by using key fields.
     */
    async aCustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameGetRaw(requestParameters: ACustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerUnloadingPointType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameGet.');
        }

        if (requestParameters.unloadingPointName === null || requestParameters.unloadingPointName === undefined) {
            throw new runtime.RequiredError('unloadingPointName','Required parameter requestParameters.unloadingPointName was null or undefined when calling aCustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerUnloadingPoint(Customer='{Customer}',UnloadingPointName='{UnloadingPointName}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"UnloadingPointName"}}`, encodeURIComponent(String(requestParameters.unloadingPointName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerUnloadingPointTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer withholding tax records by customer and unloading point name.
     * Retrieves customer unloading point records by using key fields.
     */
    async aCustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameGet(requestParameters: ACustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerUnloadingPointType> {
        const response = await this.aCustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates customer unloading point record linked to customer by key fields such as Customer,UnloadingPointName.
     * Updates customer unloading point record.
     */
    async aCustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNamePatchRaw(requestParameters: ACustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNamePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNamePatch.');
        }

        if (requestParameters.unloadingPointName === null || requestParameters.unloadingPointName === undefined) {
            throw new runtime.RequiredError('unloadingPointName','Required parameter requestParameters.unloadingPointName was null or undefined when calling aCustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNamePatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerUnloadingPointTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERACustomerUnloadingPointTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerUnloadingPointTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerUnloadingPointTypeUpdate was null or undefined when calling aCustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNamePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerUnloadingPoint(Customer='{Customer}',UnloadingPointName='{UnloadingPointName}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"UnloadingPointName"}}`, encodeURIComponent(String(requestParameters.unloadingPointName))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerUnloadingPointTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerUnloadingPointTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates customer unloading point record linked to customer by key fields such as Customer,UnloadingPointName.
     * Updates customer unloading point record.
     */
    async aCustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNamePatch(requestParameters: ACustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNamePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNamePatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all unloading point data attached to a customer in the system.
     * Retrieves customer unloading point data.
     */
    async aCustomerUnloadingPointGetRaw(requestParameters: ACustomerUnloadingPointGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerUnloadingPointType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerUnloadingPoint`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerUnloadingPointTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all unloading point data attached to a customer in the system.
     * Retrieves customer unloading point data.
     */
    async aCustomerUnloadingPointGet(requestParameters: ACustomerUnloadingPointGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerUnloadingPointType> {
        const response = await this.aCustomerUnloadingPointGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates customer unloading point record linked to customer.
     * Creates new customer unloading point record.
     */
    async aCustomerUnloadingPointPostRaw(requestParameters: ACustomerUnloadingPointPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerUnloadingPointType>> {
        if (requestParameters.aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate was null or undefined when calling aCustomerUnloadingPointPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerUnloadingPoint`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerUnloadingPointTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerUnloadingPointTypeFromJSON(jsonValue));
    }

    /**
     * Creates customer unloading point record linked to customer.
     * Creates new customer unloading point record.
     */
    async aCustomerUnloadingPointPost(requestParameters: ACustomerUnloadingPointPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerUnloadingPointType> {
        const response = await this.aCustomerUnloadingPointPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ACustomerCustomerToCustomerUnloadingPointGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    UnloadingPointName: 'UnloadingPointName',
    UnloadingPointNameDesc: 'UnloadingPointName desc',
    CustomerFactoryCalenderCode: 'CustomerFactoryCalenderCode',
    CustomerFactoryCalenderCodeDesc: 'CustomerFactoryCalenderCode desc',
    BpGoodsReceivingHoursCode: 'BPGoodsReceivingHoursCode',
    BpGoodsReceivingHoursCodeDesc: 'BPGoodsReceivingHoursCode desc',
    IsDfltBpUnloadingPoint: 'IsDfltBPUnloadingPoint',
    IsDfltBpUnloadingPointDesc: 'IsDfltBPUnloadingPoint desc',
    MondayMorningOpeningTime: 'MondayMorningOpeningTime',
    MondayMorningOpeningTimeDesc: 'MondayMorningOpeningTime desc',
    MondayMorningClosingTime: 'MondayMorningClosingTime',
    MondayMorningClosingTimeDesc: 'MondayMorningClosingTime desc',
    MondayAfternoonOpeningTime: 'MondayAfternoonOpeningTime',
    MondayAfternoonOpeningTimeDesc: 'MondayAfternoonOpeningTime desc',
    MondayAfternoonClosingTime: 'MondayAfternoonClosingTime',
    MondayAfternoonClosingTimeDesc: 'MondayAfternoonClosingTime desc',
    TuesdayMorningOpeningTime: 'TuesdayMorningOpeningTime',
    TuesdayMorningOpeningTimeDesc: 'TuesdayMorningOpeningTime desc',
    TuesdayMorningClosingTime: 'TuesdayMorningClosingTime',
    TuesdayMorningClosingTimeDesc: 'TuesdayMorningClosingTime desc',
    TuesdayAfternoonOpeningTime: 'TuesdayAfternoonOpeningTime',
    TuesdayAfternoonOpeningTimeDesc: 'TuesdayAfternoonOpeningTime desc',
    TuesdayAfternoonClosingTime: 'TuesdayAfternoonClosingTime',
    TuesdayAfternoonClosingTimeDesc: 'TuesdayAfternoonClosingTime desc',
    WednesdayMorningOpeningTime: 'WednesdayMorningOpeningTime',
    WednesdayMorningOpeningTimeDesc: 'WednesdayMorningOpeningTime desc',
    WednesdayMorningClosingTime: 'WednesdayMorningClosingTime',
    WednesdayMorningClosingTimeDesc: 'WednesdayMorningClosingTime desc',
    WednesdayAfternoonOpeningTime: 'WednesdayAfternoonOpeningTime',
    WednesdayAfternoonOpeningTimeDesc: 'WednesdayAfternoonOpeningTime desc',
    WednesdayAfternoonClosingTime: 'WednesdayAfternoonClosingTime',
    WednesdayAfternoonClosingTimeDesc: 'WednesdayAfternoonClosingTime desc',
    ThursdayMorningOpeningTime: 'ThursdayMorningOpeningTime',
    ThursdayMorningOpeningTimeDesc: 'ThursdayMorningOpeningTime desc',
    ThursdayMorningClosingTime: 'ThursdayMorningClosingTime',
    ThursdayMorningClosingTimeDesc: 'ThursdayMorningClosingTime desc',
    ThursdayAfternoonOpeningTime: 'ThursdayAfternoonOpeningTime',
    ThursdayAfternoonOpeningTimeDesc: 'ThursdayAfternoonOpeningTime desc',
    ThursdayAfternoonClosingTime: 'ThursdayAfternoonClosingTime',
    ThursdayAfternoonClosingTimeDesc: 'ThursdayAfternoonClosingTime desc',
    FridayMorningOpeningTime: 'FridayMorningOpeningTime',
    FridayMorningOpeningTimeDesc: 'FridayMorningOpeningTime desc',
    FridayMorningClosingTime: 'FridayMorningClosingTime',
    FridayMorningClosingTimeDesc: 'FridayMorningClosingTime desc',
    FridayAfternoonOpeningTime: 'FridayAfternoonOpeningTime',
    FridayAfternoonOpeningTimeDesc: 'FridayAfternoonOpeningTime desc',
    FridayAfternoonClosingTime: 'FridayAfternoonClosingTime',
    FridayAfternoonClosingTimeDesc: 'FridayAfternoonClosingTime desc',
    SaturdayMorningOpeningTime: 'SaturdayMorningOpeningTime',
    SaturdayMorningOpeningTimeDesc: 'SaturdayMorningOpeningTime desc',
    SaturdayMorningClosingTime: 'SaturdayMorningClosingTime',
    SaturdayMorningClosingTimeDesc: 'SaturdayMorningClosingTime desc',
    SaturdayAfternoonOpeningTime: 'SaturdayAfternoonOpeningTime',
    SaturdayAfternoonOpeningTimeDesc: 'SaturdayAfternoonOpeningTime desc',
    SaturdayAfternoonClosingTime: 'SaturdayAfternoonClosingTime',
    SaturdayAfternoonClosingTimeDesc: 'SaturdayAfternoonClosingTime desc',
    SundayMorningOpeningTime: 'SundayMorningOpeningTime',
    SundayMorningOpeningTimeDesc: 'SundayMorningOpeningTime desc',
    SundayMorningClosingTime: 'SundayMorningClosingTime',
    SundayMorningClosingTimeDesc: 'SundayMorningClosingTime desc',
    SundayAfternoonOpeningTime: 'SundayAfternoonOpeningTime',
    SundayAfternoonOpeningTimeDesc: 'SundayAfternoonOpeningTime desc',
    SundayAfternoonClosingTime: 'SundayAfternoonClosingTime',
    SundayAfternoonClosingTimeDesc: 'SundayAfternoonClosingTime desc'
} as const;
export type ACustomerCustomerToCustomerUnloadingPointGetOrderbyEnum = typeof ACustomerCustomerToCustomerUnloadingPointGetOrderbyEnum[keyof typeof ACustomerCustomerToCustomerUnloadingPointGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerUnloadingPointGetSelectEnum = {
    Customer: 'Customer',
    UnloadingPointName: 'UnloadingPointName',
    CustomerFactoryCalenderCode: 'CustomerFactoryCalenderCode',
    BpGoodsReceivingHoursCode: 'BPGoodsReceivingHoursCode',
    IsDfltBpUnloadingPoint: 'IsDfltBPUnloadingPoint',
    MondayMorningOpeningTime: 'MondayMorningOpeningTime',
    MondayMorningClosingTime: 'MondayMorningClosingTime',
    MondayAfternoonOpeningTime: 'MondayAfternoonOpeningTime',
    MondayAfternoonClosingTime: 'MondayAfternoonClosingTime',
    TuesdayMorningOpeningTime: 'TuesdayMorningOpeningTime',
    TuesdayMorningClosingTime: 'TuesdayMorningClosingTime',
    TuesdayAfternoonOpeningTime: 'TuesdayAfternoonOpeningTime',
    TuesdayAfternoonClosingTime: 'TuesdayAfternoonClosingTime',
    WednesdayMorningOpeningTime: 'WednesdayMorningOpeningTime',
    WednesdayMorningClosingTime: 'WednesdayMorningClosingTime',
    WednesdayAfternoonOpeningTime: 'WednesdayAfternoonOpeningTime',
    WednesdayAfternoonClosingTime: 'WednesdayAfternoonClosingTime',
    ThursdayMorningOpeningTime: 'ThursdayMorningOpeningTime',
    ThursdayMorningClosingTime: 'ThursdayMorningClosingTime',
    ThursdayAfternoonOpeningTime: 'ThursdayAfternoonOpeningTime',
    ThursdayAfternoonClosingTime: 'ThursdayAfternoonClosingTime',
    FridayMorningOpeningTime: 'FridayMorningOpeningTime',
    FridayMorningClosingTime: 'FridayMorningClosingTime',
    FridayAfternoonOpeningTime: 'FridayAfternoonOpeningTime',
    FridayAfternoonClosingTime: 'FridayAfternoonClosingTime',
    SaturdayMorningOpeningTime: 'SaturdayMorningOpeningTime',
    SaturdayMorningClosingTime: 'SaturdayMorningClosingTime',
    SaturdayAfternoonOpeningTime: 'SaturdayAfternoonOpeningTime',
    SaturdayAfternoonClosingTime: 'SaturdayAfternoonClosingTime',
    SundayMorningOpeningTime: 'SundayMorningOpeningTime',
    SundayMorningClosingTime: 'SundayMorningClosingTime',
    SundayAfternoonOpeningTime: 'SundayAfternoonOpeningTime',
    SundayAfternoonClosingTime: 'SundayAfternoonClosingTime'
} as const;
export type ACustomerCustomerToCustomerUnloadingPointGetSelectEnum = typeof ACustomerCustomerToCustomerUnloadingPointGetSelectEnum[keyof typeof ACustomerCustomerToCustomerUnloadingPointGetSelectEnum];
/**
 * @export
 */
export const ACustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameGetSelectEnum = {
    Customer: 'Customer',
    UnloadingPointName: 'UnloadingPointName',
    CustomerFactoryCalenderCode: 'CustomerFactoryCalenderCode',
    BpGoodsReceivingHoursCode: 'BPGoodsReceivingHoursCode',
    IsDfltBpUnloadingPoint: 'IsDfltBPUnloadingPoint',
    MondayMorningOpeningTime: 'MondayMorningOpeningTime',
    MondayMorningClosingTime: 'MondayMorningClosingTime',
    MondayAfternoonOpeningTime: 'MondayAfternoonOpeningTime',
    MondayAfternoonClosingTime: 'MondayAfternoonClosingTime',
    TuesdayMorningOpeningTime: 'TuesdayMorningOpeningTime',
    TuesdayMorningClosingTime: 'TuesdayMorningClosingTime',
    TuesdayAfternoonOpeningTime: 'TuesdayAfternoonOpeningTime',
    TuesdayAfternoonClosingTime: 'TuesdayAfternoonClosingTime',
    WednesdayMorningOpeningTime: 'WednesdayMorningOpeningTime',
    WednesdayMorningClosingTime: 'WednesdayMorningClosingTime',
    WednesdayAfternoonOpeningTime: 'WednesdayAfternoonOpeningTime',
    WednesdayAfternoonClosingTime: 'WednesdayAfternoonClosingTime',
    ThursdayMorningOpeningTime: 'ThursdayMorningOpeningTime',
    ThursdayMorningClosingTime: 'ThursdayMorningClosingTime',
    ThursdayAfternoonOpeningTime: 'ThursdayAfternoonOpeningTime',
    ThursdayAfternoonClosingTime: 'ThursdayAfternoonClosingTime',
    FridayMorningOpeningTime: 'FridayMorningOpeningTime',
    FridayMorningClosingTime: 'FridayMorningClosingTime',
    FridayAfternoonOpeningTime: 'FridayAfternoonOpeningTime',
    FridayAfternoonClosingTime: 'FridayAfternoonClosingTime',
    SaturdayMorningOpeningTime: 'SaturdayMorningOpeningTime',
    SaturdayMorningClosingTime: 'SaturdayMorningClosingTime',
    SaturdayAfternoonOpeningTime: 'SaturdayAfternoonOpeningTime',
    SaturdayAfternoonClosingTime: 'SaturdayAfternoonClosingTime',
    SundayMorningOpeningTime: 'SundayMorningOpeningTime',
    SundayMorningClosingTime: 'SundayMorningClosingTime',
    SundayAfternoonOpeningTime: 'SundayAfternoonOpeningTime',
    SundayAfternoonClosingTime: 'SundayAfternoonClosingTime'
} as const;
export type ACustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameGetSelectEnum = typeof ACustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameGetSelectEnum[keyof typeof ACustomerUnloadingPointCustomerCustomerUnloadingPointNameUnloadingPointNameGetSelectEnum];
/**
 * @export
 */
export const ACustomerUnloadingPointGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    UnloadingPointName: 'UnloadingPointName',
    UnloadingPointNameDesc: 'UnloadingPointName desc',
    CustomerFactoryCalenderCode: 'CustomerFactoryCalenderCode',
    CustomerFactoryCalenderCodeDesc: 'CustomerFactoryCalenderCode desc',
    BpGoodsReceivingHoursCode: 'BPGoodsReceivingHoursCode',
    BpGoodsReceivingHoursCodeDesc: 'BPGoodsReceivingHoursCode desc',
    IsDfltBpUnloadingPoint: 'IsDfltBPUnloadingPoint',
    IsDfltBpUnloadingPointDesc: 'IsDfltBPUnloadingPoint desc',
    MondayMorningOpeningTime: 'MondayMorningOpeningTime',
    MondayMorningOpeningTimeDesc: 'MondayMorningOpeningTime desc',
    MondayMorningClosingTime: 'MondayMorningClosingTime',
    MondayMorningClosingTimeDesc: 'MondayMorningClosingTime desc',
    MondayAfternoonOpeningTime: 'MondayAfternoonOpeningTime',
    MondayAfternoonOpeningTimeDesc: 'MondayAfternoonOpeningTime desc',
    MondayAfternoonClosingTime: 'MondayAfternoonClosingTime',
    MondayAfternoonClosingTimeDesc: 'MondayAfternoonClosingTime desc',
    TuesdayMorningOpeningTime: 'TuesdayMorningOpeningTime',
    TuesdayMorningOpeningTimeDesc: 'TuesdayMorningOpeningTime desc',
    TuesdayMorningClosingTime: 'TuesdayMorningClosingTime',
    TuesdayMorningClosingTimeDesc: 'TuesdayMorningClosingTime desc',
    TuesdayAfternoonOpeningTime: 'TuesdayAfternoonOpeningTime',
    TuesdayAfternoonOpeningTimeDesc: 'TuesdayAfternoonOpeningTime desc',
    TuesdayAfternoonClosingTime: 'TuesdayAfternoonClosingTime',
    TuesdayAfternoonClosingTimeDesc: 'TuesdayAfternoonClosingTime desc',
    WednesdayMorningOpeningTime: 'WednesdayMorningOpeningTime',
    WednesdayMorningOpeningTimeDesc: 'WednesdayMorningOpeningTime desc',
    WednesdayMorningClosingTime: 'WednesdayMorningClosingTime',
    WednesdayMorningClosingTimeDesc: 'WednesdayMorningClosingTime desc',
    WednesdayAfternoonOpeningTime: 'WednesdayAfternoonOpeningTime',
    WednesdayAfternoonOpeningTimeDesc: 'WednesdayAfternoonOpeningTime desc',
    WednesdayAfternoonClosingTime: 'WednesdayAfternoonClosingTime',
    WednesdayAfternoonClosingTimeDesc: 'WednesdayAfternoonClosingTime desc',
    ThursdayMorningOpeningTime: 'ThursdayMorningOpeningTime',
    ThursdayMorningOpeningTimeDesc: 'ThursdayMorningOpeningTime desc',
    ThursdayMorningClosingTime: 'ThursdayMorningClosingTime',
    ThursdayMorningClosingTimeDesc: 'ThursdayMorningClosingTime desc',
    ThursdayAfternoonOpeningTime: 'ThursdayAfternoonOpeningTime',
    ThursdayAfternoonOpeningTimeDesc: 'ThursdayAfternoonOpeningTime desc',
    ThursdayAfternoonClosingTime: 'ThursdayAfternoonClosingTime',
    ThursdayAfternoonClosingTimeDesc: 'ThursdayAfternoonClosingTime desc',
    FridayMorningOpeningTime: 'FridayMorningOpeningTime',
    FridayMorningOpeningTimeDesc: 'FridayMorningOpeningTime desc',
    FridayMorningClosingTime: 'FridayMorningClosingTime',
    FridayMorningClosingTimeDesc: 'FridayMorningClosingTime desc',
    FridayAfternoonOpeningTime: 'FridayAfternoonOpeningTime',
    FridayAfternoonOpeningTimeDesc: 'FridayAfternoonOpeningTime desc',
    FridayAfternoonClosingTime: 'FridayAfternoonClosingTime',
    FridayAfternoonClosingTimeDesc: 'FridayAfternoonClosingTime desc',
    SaturdayMorningOpeningTime: 'SaturdayMorningOpeningTime',
    SaturdayMorningOpeningTimeDesc: 'SaturdayMorningOpeningTime desc',
    SaturdayMorningClosingTime: 'SaturdayMorningClosingTime',
    SaturdayMorningClosingTimeDesc: 'SaturdayMorningClosingTime desc',
    SaturdayAfternoonOpeningTime: 'SaturdayAfternoonOpeningTime',
    SaturdayAfternoonOpeningTimeDesc: 'SaturdayAfternoonOpeningTime desc',
    SaturdayAfternoonClosingTime: 'SaturdayAfternoonClosingTime',
    SaturdayAfternoonClosingTimeDesc: 'SaturdayAfternoonClosingTime desc',
    SundayMorningOpeningTime: 'SundayMorningOpeningTime',
    SundayMorningOpeningTimeDesc: 'SundayMorningOpeningTime desc',
    SundayMorningClosingTime: 'SundayMorningClosingTime',
    SundayMorningClosingTimeDesc: 'SundayMorningClosingTime desc',
    SundayAfternoonOpeningTime: 'SundayAfternoonOpeningTime',
    SundayAfternoonOpeningTimeDesc: 'SundayAfternoonOpeningTime desc',
    SundayAfternoonClosingTime: 'SundayAfternoonClosingTime',
    SundayAfternoonClosingTimeDesc: 'SundayAfternoonClosingTime desc'
} as const;
export type ACustomerUnloadingPointGetOrderbyEnum = typeof ACustomerUnloadingPointGetOrderbyEnum[keyof typeof ACustomerUnloadingPointGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerUnloadingPointGetSelectEnum = {
    Customer: 'Customer',
    UnloadingPointName: 'UnloadingPointName',
    CustomerFactoryCalenderCode: 'CustomerFactoryCalenderCode',
    BpGoodsReceivingHoursCode: 'BPGoodsReceivingHoursCode',
    IsDfltBpUnloadingPoint: 'IsDfltBPUnloadingPoint',
    MondayMorningOpeningTime: 'MondayMorningOpeningTime',
    MondayMorningClosingTime: 'MondayMorningClosingTime',
    MondayAfternoonOpeningTime: 'MondayAfternoonOpeningTime',
    MondayAfternoonClosingTime: 'MondayAfternoonClosingTime',
    TuesdayMorningOpeningTime: 'TuesdayMorningOpeningTime',
    TuesdayMorningClosingTime: 'TuesdayMorningClosingTime',
    TuesdayAfternoonOpeningTime: 'TuesdayAfternoonOpeningTime',
    TuesdayAfternoonClosingTime: 'TuesdayAfternoonClosingTime',
    WednesdayMorningOpeningTime: 'WednesdayMorningOpeningTime',
    WednesdayMorningClosingTime: 'WednesdayMorningClosingTime',
    WednesdayAfternoonOpeningTime: 'WednesdayAfternoonOpeningTime',
    WednesdayAfternoonClosingTime: 'WednesdayAfternoonClosingTime',
    ThursdayMorningOpeningTime: 'ThursdayMorningOpeningTime',
    ThursdayMorningClosingTime: 'ThursdayMorningClosingTime',
    ThursdayAfternoonOpeningTime: 'ThursdayAfternoonOpeningTime',
    ThursdayAfternoonClosingTime: 'ThursdayAfternoonClosingTime',
    FridayMorningOpeningTime: 'FridayMorningOpeningTime',
    FridayMorningClosingTime: 'FridayMorningClosingTime',
    FridayAfternoonOpeningTime: 'FridayAfternoonOpeningTime',
    FridayAfternoonClosingTime: 'FridayAfternoonClosingTime',
    SaturdayMorningOpeningTime: 'SaturdayMorningOpeningTime',
    SaturdayMorningClosingTime: 'SaturdayMorningClosingTime',
    SaturdayAfternoonOpeningTime: 'SaturdayAfternoonOpeningTime',
    SaturdayAfternoonClosingTime: 'SaturdayAfternoonClosingTime',
    SundayMorningOpeningTime: 'SundayMorningOpeningTime',
    SundayMorningClosingTime: 'SundayMorningClosingTime',
    SundayAfternoonOpeningTime: 'SundayAfternoonOpeningTime',
    SundayAfternoonClosingTime: 'SundayAfternoonClosingTime'
} as const;
export type ACustomerUnloadingPointGetSelectEnum = typeof ACustomerUnloadingPointGetSelectEnum[keyof typeof ACustomerUnloadingPointGetSelectEnum];
