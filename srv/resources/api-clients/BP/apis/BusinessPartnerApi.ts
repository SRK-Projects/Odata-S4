/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERABPAddressIndependentEmailType,
  APIBUSINESSPARTNERABPAddressIndependentEmailTypeCreate,
  APIBUSINESSPARTNERABPAddressIndependentFaxType,
  APIBUSINESSPARTNERABPAddressIndependentFaxTypeCreate,
  APIBUSINESSPARTNERABPAddressIndependentMobileType,
  APIBUSINESSPARTNERABPAddressIndependentMobileTypeCreate,
  APIBUSINESSPARTNERABPAddressIndependentPhoneType,
  APIBUSINESSPARTNERABPAddressIndependentPhoneTypeCreate,
  APIBUSINESSPARTNERABPAddressIndependentWebsiteType,
  APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate,
  APIBUSINESSPARTNERABPCreditWorthinessType,
  APIBUSINESSPARTNERABPDataControllerType,
  APIBUSINESSPARTNERABPDataControllerTypeCreate,
  APIBUSINESSPARTNERABPEmploymentType,
  APIBUSINESSPARTNERABPEmploymentTypeCreate,
  APIBUSINESSPARTNERABPFinancialServicesExtnType,
  APIBUSINESSPARTNERABPFinancialServicesReportingType,
  APIBUSINESSPARTNERABPFiscalYearInformationType,
  APIBUSINESSPARTNERABPFiscalYearInformationTypeCreate,
  APIBUSINESSPARTNERABPRelationshipType,
  APIBUSINESSPARTNERABPRelationshipTypeCreate,
  APIBUSINESSPARTNERABuPaIdentificationType,
  APIBUSINESSPARTNERABuPaIdentificationTypeCreate,
  APIBUSINESSPARTNERABuPaIndustryType,
  APIBUSINESSPARTNERABuPaIndustryTypeCreate,
  APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrType,
  APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate,
  APIBUSINESSPARTNERABusinessPartnerAddressType,
  APIBUSINESSPARTNERABusinessPartnerAddressTypeCreate,
  APIBUSINESSPARTNERABusinessPartnerAliasType,
  APIBUSINESSPARTNERABusinessPartnerAliasTypeCreate,
  APIBUSINESSPARTNERABusinessPartnerBankType,
  APIBUSINESSPARTNERABusinessPartnerBankTypeCreate,
  APIBUSINESSPARTNERABusinessPartnerContactType,
  APIBUSINESSPARTNERABusinessPartnerContactTypeCreate,
  APIBUSINESSPARTNERABusinessPartnerIsBankType,
  APIBUSINESSPARTNERABusinessPartnerPaymentCardType,
  APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate,
  APIBUSINESSPARTNERABusinessPartnerRatingType,
  APIBUSINESSPARTNERABusinessPartnerRatingTypeCreate,
  APIBUSINESSPARTNERABusinessPartnerRoleType,
  APIBUSINESSPARTNERABusinessPartnerRoleTypeCreate,
  APIBUSINESSPARTNERABusinessPartnerTaxNumberType,
  APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate,
  APIBUSINESSPARTNERABusinessPartnerType,
  APIBUSINESSPARTNERABusinessPartnerTypeCreate,
  APIBUSINESSPARTNERABusinessPartnerTypeUpdate,
  APIBUSINESSPARTNERACustomerType,
  APIBUSINESSPARTNERASupplierType,
  CollectionOfABPAddressIndependentEmailType,
  CollectionOfABPAddressIndependentFaxType,
  CollectionOfABPAddressIndependentMobileType,
  CollectionOfABPAddressIndependentPhoneType,
  CollectionOfABPAddressIndependentWebsiteType,
  CollectionOfABPDataControllerType,
  CollectionOfABPEmploymentType,
  CollectionOfABPFiscalYearInformationType,
  CollectionOfABPRelationshipType,
  CollectionOfABuPaIdentificationType,
  CollectionOfABuPaIndustryType,
  CollectionOfABusPartAddrDepdntTaxNmbrType,
  CollectionOfABusinessPartnerAddressType,
  CollectionOfABusinessPartnerAliasType,
  CollectionOfABusinessPartnerBankType,
  CollectionOfABusinessPartnerContactType,
  CollectionOfABusinessPartnerPaymentCardType,
  CollectionOfABusinessPartnerRatingType,
  CollectionOfABusinessPartnerRoleType,
  CollectionOfABusinessPartnerTaxNumberType,
  CollectionOfABusinessPartnerType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERABPAddressIndependentEmailTypeFromJSON,
    APIBUSINESSPARTNERABPAddressIndependentEmailTypeToJSON,
    APIBUSINESSPARTNERABPAddressIndependentEmailTypeCreateFromJSON,
    APIBUSINESSPARTNERABPAddressIndependentEmailTypeCreateToJSON,
    APIBUSINESSPARTNERABPAddressIndependentFaxTypeFromJSON,
    APIBUSINESSPARTNERABPAddressIndependentFaxTypeToJSON,
    APIBUSINESSPARTNERABPAddressIndependentFaxTypeCreateFromJSON,
    APIBUSINESSPARTNERABPAddressIndependentFaxTypeCreateToJSON,
    APIBUSINESSPARTNERABPAddressIndependentMobileTypeFromJSON,
    APIBUSINESSPARTNERABPAddressIndependentMobileTypeToJSON,
    APIBUSINESSPARTNERABPAddressIndependentMobileTypeCreateFromJSON,
    APIBUSINESSPARTNERABPAddressIndependentMobileTypeCreateToJSON,
    APIBUSINESSPARTNERABPAddressIndependentPhoneTypeFromJSON,
    APIBUSINESSPARTNERABPAddressIndependentPhoneTypeToJSON,
    APIBUSINESSPARTNERABPAddressIndependentPhoneTypeCreateFromJSON,
    APIBUSINESSPARTNERABPAddressIndependentPhoneTypeCreateToJSON,
    APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeFromJSON,
    APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeToJSON,
    APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreateFromJSON,
    APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreateToJSON,
    APIBUSINESSPARTNERABPCreditWorthinessTypeFromJSON,
    APIBUSINESSPARTNERABPCreditWorthinessTypeToJSON,
    APIBUSINESSPARTNERABPDataControllerTypeFromJSON,
    APIBUSINESSPARTNERABPDataControllerTypeToJSON,
    APIBUSINESSPARTNERABPDataControllerTypeCreateFromJSON,
    APIBUSINESSPARTNERABPDataControllerTypeCreateToJSON,
    APIBUSINESSPARTNERABPEmploymentTypeFromJSON,
    APIBUSINESSPARTNERABPEmploymentTypeToJSON,
    APIBUSINESSPARTNERABPEmploymentTypeCreateFromJSON,
    APIBUSINESSPARTNERABPEmploymentTypeCreateToJSON,
    APIBUSINESSPARTNERABPFinancialServicesExtnTypeFromJSON,
    APIBUSINESSPARTNERABPFinancialServicesExtnTypeToJSON,
    APIBUSINESSPARTNERABPFinancialServicesReportingTypeFromJSON,
    APIBUSINESSPARTNERABPFinancialServicesReportingTypeToJSON,
    APIBUSINESSPARTNERABPFiscalYearInformationTypeFromJSON,
    APIBUSINESSPARTNERABPFiscalYearInformationTypeToJSON,
    APIBUSINESSPARTNERABPFiscalYearInformationTypeCreateFromJSON,
    APIBUSINESSPARTNERABPFiscalYearInformationTypeCreateToJSON,
    APIBUSINESSPARTNERABPRelationshipTypeFromJSON,
    APIBUSINESSPARTNERABPRelationshipTypeToJSON,
    APIBUSINESSPARTNERABPRelationshipTypeCreateFromJSON,
    APIBUSINESSPARTNERABPRelationshipTypeCreateToJSON,
    APIBUSINESSPARTNERABuPaIdentificationTypeFromJSON,
    APIBUSINESSPARTNERABuPaIdentificationTypeToJSON,
    APIBUSINESSPARTNERABuPaIdentificationTypeCreateFromJSON,
    APIBUSINESSPARTNERABuPaIdentificationTypeCreateToJSON,
    APIBUSINESSPARTNERABuPaIndustryTypeFromJSON,
    APIBUSINESSPARTNERABuPaIndustryTypeToJSON,
    APIBUSINESSPARTNERABuPaIndustryTypeCreateFromJSON,
    APIBUSINESSPARTNERABuPaIndustryTypeCreateToJSON,
    APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeFromJSON,
    APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeToJSON,
    APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreateFromJSON,
    APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreateToJSON,
    APIBUSINESSPARTNERABusinessPartnerAddressTypeFromJSON,
    APIBUSINESSPARTNERABusinessPartnerAddressTypeToJSON,
    APIBUSINESSPARTNERABusinessPartnerAddressTypeCreateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerAddressTypeCreateToJSON,
    APIBUSINESSPARTNERABusinessPartnerAliasTypeFromJSON,
    APIBUSINESSPARTNERABusinessPartnerAliasTypeToJSON,
    APIBUSINESSPARTNERABusinessPartnerAliasTypeCreateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerAliasTypeCreateToJSON,
    APIBUSINESSPARTNERABusinessPartnerBankTypeFromJSON,
    APIBUSINESSPARTNERABusinessPartnerBankTypeToJSON,
    APIBUSINESSPARTNERABusinessPartnerBankTypeCreateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerBankTypeCreateToJSON,
    APIBUSINESSPARTNERABusinessPartnerContactTypeFromJSON,
    APIBUSINESSPARTNERABusinessPartnerContactTypeToJSON,
    APIBUSINESSPARTNERABusinessPartnerContactTypeCreateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerContactTypeCreateToJSON,
    APIBUSINESSPARTNERABusinessPartnerIsBankTypeFromJSON,
    APIBUSINESSPARTNERABusinessPartnerIsBankTypeToJSON,
    APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeFromJSON,
    APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeToJSON,
    APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreateToJSON,
    APIBUSINESSPARTNERABusinessPartnerRatingTypeFromJSON,
    APIBUSINESSPARTNERABusinessPartnerRatingTypeToJSON,
    APIBUSINESSPARTNERABusinessPartnerRatingTypeCreateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerRatingTypeCreateToJSON,
    APIBUSINESSPARTNERABusinessPartnerRoleTypeFromJSON,
    APIBUSINESSPARTNERABusinessPartnerRoleTypeToJSON,
    APIBUSINESSPARTNERABusinessPartnerRoleTypeCreateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerRoleTypeCreateToJSON,
    APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeFromJSON,
    APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeToJSON,
    APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreateToJSON,
    APIBUSINESSPARTNERABusinessPartnerTypeFromJSON,
    APIBUSINESSPARTNERABusinessPartnerTypeToJSON,
    APIBUSINESSPARTNERABusinessPartnerTypeCreateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerTypeCreateToJSON,
    APIBUSINESSPARTNERABusinessPartnerTypeUpdateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerTypeUpdateToJSON,
    APIBUSINESSPARTNERACustomerTypeFromJSON,
    APIBUSINESSPARTNERACustomerTypeToJSON,
    APIBUSINESSPARTNERASupplierTypeFromJSON,
    APIBUSINESSPARTNERASupplierTypeToJSON,
    CollectionOfABPAddressIndependentEmailTypeFromJSON,
    CollectionOfABPAddressIndependentEmailTypeToJSON,
    CollectionOfABPAddressIndependentFaxTypeFromJSON,
    CollectionOfABPAddressIndependentFaxTypeToJSON,
    CollectionOfABPAddressIndependentMobileTypeFromJSON,
    CollectionOfABPAddressIndependentMobileTypeToJSON,
    CollectionOfABPAddressIndependentPhoneTypeFromJSON,
    CollectionOfABPAddressIndependentPhoneTypeToJSON,
    CollectionOfABPAddressIndependentWebsiteTypeFromJSON,
    CollectionOfABPAddressIndependentWebsiteTypeToJSON,
    CollectionOfABPDataControllerTypeFromJSON,
    CollectionOfABPDataControllerTypeToJSON,
    CollectionOfABPEmploymentTypeFromJSON,
    CollectionOfABPEmploymentTypeToJSON,
    CollectionOfABPFiscalYearInformationTypeFromJSON,
    CollectionOfABPFiscalYearInformationTypeToJSON,
    CollectionOfABPRelationshipTypeFromJSON,
    CollectionOfABPRelationshipTypeToJSON,
    CollectionOfABuPaIdentificationTypeFromJSON,
    CollectionOfABuPaIdentificationTypeToJSON,
    CollectionOfABuPaIndustryTypeFromJSON,
    CollectionOfABuPaIndustryTypeToJSON,
    CollectionOfABusPartAddrDepdntTaxNmbrTypeFromJSON,
    CollectionOfABusPartAddrDepdntTaxNmbrTypeToJSON,
    CollectionOfABusinessPartnerAddressTypeFromJSON,
    CollectionOfABusinessPartnerAddressTypeToJSON,
    CollectionOfABusinessPartnerAliasTypeFromJSON,
    CollectionOfABusinessPartnerAliasTypeToJSON,
    CollectionOfABusinessPartnerBankTypeFromJSON,
    CollectionOfABusinessPartnerBankTypeToJSON,
    CollectionOfABusinessPartnerContactTypeFromJSON,
    CollectionOfABusinessPartnerContactTypeToJSON,
    CollectionOfABusinessPartnerPaymentCardTypeFromJSON,
    CollectionOfABusinessPartnerPaymentCardTypeToJSON,
    CollectionOfABusinessPartnerRatingTypeFromJSON,
    CollectionOfABusinessPartnerRatingTypeToJSON,
    CollectionOfABusinessPartnerRoleTypeFromJSON,
    CollectionOfABusinessPartnerRoleTypeToJSON,
    CollectionOfABusinessPartnerTaxNumberTypeFromJSON,
    CollectionOfABusinessPartnerTaxNumberTypeToJSON,
    CollectionOfABusinessPartnerTypeFromJSON,
    CollectionOfABusinessPartnerTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABusinessPartnerBusinessPartnerGetRequest {
    businessPartner: string;
    $select?: Set<ABusinessPartnerBusinessPartnerGetSelectEnum>;
    $expand?: Set<ABusinessPartnerBusinessPartnerGetExpandEnum>;
}

export interface ABusinessPartnerBusinessPartnerPatchRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABusinessPartnerTypeUpdate: APIBUSINESSPARTNERABusinessPartnerTypeUpdate;
}

export interface ABusinessPartnerBusinessPartnerToAddressIndependentEmailGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToAddressIndependentEmailGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToAddressIndependentEmailGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToAddressIndependentEmailPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABPAddressIndependentEmailTypeCreate: APIBUSINESSPARTNERABPAddressIndependentEmailTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToAddressIndependentFaxGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToAddressIndependentFaxGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToAddressIndependentFaxGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToAddressIndependentFaxPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABPAddressIndependentFaxTypeCreate: APIBUSINESSPARTNERABPAddressIndependentFaxTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToAddressIndependentMobileGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToAddressIndependentMobileGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToAddressIndependentMobileGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToAddressIndependentMobilePostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABPAddressIndependentMobileTypeCreate: APIBUSINESSPARTNERABPAddressIndependentMobileTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToAddressIndependentPhoneGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToAddressIndependentPhoneGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToAddressIndependentPhoneGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToAddressIndependentPhonePostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABPAddressIndependentPhoneTypeCreate: APIBUSINESSPARTNERABPAddressIndependentPhoneTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToAddressIndependentWebsitePostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate: APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBPCreditWorthinessGetRequest {
    businessPartner: string;
    $select?: Set<ABusinessPartnerBusinessPartnerToBPCreditWorthinessGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBPDataControllerGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBPDataControllerGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBPDataControllerGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBPDataControllerPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABPDataControllerTypeCreate: APIBUSINESSPARTNERABPDataControllerTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBPEmploymentGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBPEmploymentGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBPEmploymentGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBPEmploymentPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABPEmploymentTypeCreate: APIBUSINESSPARTNERABPEmploymentTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBPFinServicesReportingGetRequest {
    businessPartner: string;
    $select?: Set<ABusinessPartnerBusinessPartnerToBPFinServicesReportingGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBPFiscalYearInformationPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate: APIBUSINESSPARTNERABPFiscalYearInformationTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBPRelationshipGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBPRelationshipGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBPRelationshipGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBPRelationshipPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABPRelationshipTypeCreate: APIBUSINESSPARTNERABPRelationshipTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBuPaIdentificationGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBuPaIdentificationGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBuPaIdentificationGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBuPaIdentificationPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABuPaIdentificationTypeCreate: APIBUSINESSPARTNERABuPaIdentificationTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBuPaIndustryGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBuPaIndustryGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBuPaIndustryGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBuPaIndustryPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABuPaIndustryTypeCreate: APIBUSINESSPARTNERABuPaIndustryTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate: APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetSelectEnum>;
    $expand?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetExpandEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerAddressPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate: APIBUSINESSPARTNERABusinessPartnerAddressTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerAliasGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerAliasGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerAliasGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerAliasPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABusinessPartnerAliasTypeCreate: APIBUSINESSPARTNERABusinessPartnerAliasTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerBankPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate: APIBUSINESSPARTNERABusinessPartnerBankTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetSelectEnum>;
    $expand?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetExpandEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerContactPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate: APIBUSINESSPARTNERABusinessPartnerContactTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerGetRequest {
    businessPartner: string;
    $select?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetRequest {
    businessPartner: string;
    $select?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerRatingGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerRatingGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerRatingGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerRatingPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABusinessPartnerRatingTypeCreate: APIBUSINESSPARTNERABusinessPartnerRatingTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerRoleGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerRoleGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerRoleGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerRolePostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABusinessPartnerRoleTypeCreate: APIBUSINESSPARTNERABusinessPartnerRoleTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerTaxPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate: APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToCustomerGetRequest {
    businessPartner: string;
    $select?: Set<ABusinessPartnerBusinessPartnerToCustomerGetSelectEnum>;
    $expand?: Set<ABusinessPartnerBusinessPartnerToCustomerGetExpandEnum>;
}

export interface ABusinessPartnerBusinessPartnerToPaymentCardGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToPaymentCardGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToPaymentCardGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToPaymentCardPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate: APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToSupplierGetRequest {
    businessPartner: string;
    $select?: Set<ABusinessPartnerBusinessPartnerToSupplierGetSelectEnum>;
    $expand?: Set<ABusinessPartnerBusinessPartnerToSupplierGetExpandEnum>;
}

export interface ABusinessPartnerGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerGetSelectEnum>;
    $expand?: Set<ABusinessPartnerGetExpandEnum>;
}

export interface ABusinessPartnerPostRequest {
    aPIBUSINESSPARTNERABusinessPartnerTypeCreate: APIBUSINESSPARTNERABusinessPartnerTypeCreate;
}

/**
 * 
 */
export class BusinessPartnerApi extends runtime.BaseAPI {

    /**
     * Retrieves the general data fields of the business partner record by using business partner number.
     * Retrieves business partner data by using business partner number.
     */
    async aBusinessPartnerBusinessPartnerGetRaw(requestParameters: ABusinessPartnerBusinessPartnerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves the general data fields of the business partner record by using business partner number.
     * Retrieves business partner data by using business partner number.
     */
    async aBusinessPartnerBusinessPartnerGet(requestParameters: ABusinessPartnerBusinessPartnerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerType> {
        const response = await this.aBusinessPartnerBusinessPartnerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates business partner general data by using business partner number.
     * Updates business partner general data.
     */
    async aBusinessPartnerBusinessPartnerPatchRaw(requestParameters: ABusinessPartnerBusinessPartnerPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerTypeUpdate was null or undefined when calling aBusinessPartnerBusinessPartnerPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates business partner general data by using business partner number.
     * Updates business partner general data.
     */
    async aBusinessPartnerBusinessPartnerPatch(requestParameters: ABusinessPartnerBusinessPartnerPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBusinessPartnerBusinessPartnerPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves address-independent Business Partner email addresses by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Retrieves address independent Business Partner email addresses.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentEmailGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentEmailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPAddressIndependentEmailType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentEmailGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_AddressIndependentEmail`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPAddressIndependentEmailTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address-independent Business Partner email addresses by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Retrieves address independent Business Partner email addresses.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentEmailGet(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentEmailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPAddressIndependentEmailType> {
        const response = await this.aBusinessPartnerBusinessPartnerToAddressIndependentEmailGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an address-independent Business Partner email address linked to an existing Business Partner.
     * Creates an address-independent Business Partner email address.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentEmailPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentEmailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPAddressIndependentEmailType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentEmailPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPAddressIndependentEmailTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPAddressIndependentEmailTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPAddressIndependentEmailTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPAddressIndependentEmailTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentEmailPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_AddressIndependentEmail`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPAddressIndependentEmailTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPAddressIndependentEmailTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPAddressIndependentEmailTypeFromJSON(jsonValue));
    }

    /**
     * Creates an address-independent Business Partner email address linked to an existing Business Partner.
     * Creates an address-independent Business Partner email address.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentEmailPost(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentEmailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPAddressIndependentEmailType> {
        const response = await this.aBusinessPartnerBusinessPartnerToAddressIndependentEmailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves address-independent Business Partner fax numbers by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Retrieves address-independent Business Partner fax numbers.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentFaxGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentFaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPAddressIndependentFaxType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentFaxGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_AddressIndependentFax`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPAddressIndependentFaxTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address-independent Business Partner fax numbers by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Retrieves address-independent Business Partner fax numbers.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentFaxGet(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentFaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPAddressIndependentFaxType> {
        const response = await this.aBusinessPartnerBusinessPartnerToAddressIndependentFaxGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an address-independent Business Partner fax number linked to an existing Business Partner.
     * Creates an address-independent Business Partner fax number.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentFaxPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentFaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPAddressIndependentFaxType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentFaxPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPAddressIndependentFaxTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPAddressIndependentFaxTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPAddressIndependentFaxTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPAddressIndependentFaxTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentFaxPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_AddressIndependentFax`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPAddressIndependentFaxTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPAddressIndependentFaxTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPAddressIndependentFaxTypeFromJSON(jsonValue));
    }

    /**
     * Creates an address-independent Business Partner fax number linked to an existing Business Partner.
     * Creates an address-independent Business Partner fax number.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentFaxPost(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentFaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPAddressIndependentFaxType> {
        const response = await this.aBusinessPartnerBusinessPartnerToAddressIndependentFaxPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves address-independent Business Partner cellphone numbers by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Retrieves address-independent Business Partner cellphone numbers.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentMobileGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentMobileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPAddressIndependentMobileType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentMobileGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_AddressIndependentMobile`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPAddressIndependentMobileTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address-independent Business Partner cellphone numbers by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Retrieves address-independent Business Partner cellphone numbers.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentMobileGet(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentMobileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPAddressIndependentMobileType> {
        const response = await this.aBusinessPartnerBusinessPartnerToAddressIndependentMobileGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an address-independent Business Partner cellphone number linked to an existing Business Partner.
     * Creates an address-independent Business Partner cellphone number.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentMobilePostRaw(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentMobilePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPAddressIndependentMobileType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentMobilePost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPAddressIndependentMobileTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPAddressIndependentMobileTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPAddressIndependentMobileTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPAddressIndependentMobileTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentMobilePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_AddressIndependentMobile`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPAddressIndependentMobileTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPAddressIndependentMobileTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPAddressIndependentMobileTypeFromJSON(jsonValue));
    }

    /**
     * Creates an address-independent Business Partner cellphone number linked to an existing Business Partner.
     * Creates an address-independent Business Partner cellphone number.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentMobilePost(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentMobilePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPAddressIndependentMobileType> {
        const response = await this.aBusinessPartnerBusinessPartnerToAddressIndependentMobilePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves address-independent Business Partner phone numbers by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Retrieves address-independent Business Partner phone numbers.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentPhoneGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentPhoneGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPAddressIndependentPhoneType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentPhoneGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_AddressIndependentPhone`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPAddressIndependentPhoneTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address-independent Business Partner phone numbers by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Retrieves address-independent Business Partner phone numbers.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentPhoneGet(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentPhoneGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPAddressIndependentPhoneType> {
        const response = await this.aBusinessPartnerBusinessPartnerToAddressIndependentPhoneGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an address-independent Business Partner phone number linked to an existing Business Partner.
     * Creates an address-independent Business Partner phone number.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentPhonePostRaw(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentPhonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPAddressIndependentPhoneType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentPhonePost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPAddressIndependentPhoneTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPAddressIndependentPhoneTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPAddressIndependentPhoneTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPAddressIndependentPhoneTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentPhonePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_AddressIndependentPhone`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPAddressIndependentPhoneTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPAddressIndependentPhoneTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPAddressIndependentPhoneTypeFromJSON(jsonValue));
    }

    /**
     * Creates an address-independent Business Partner phone number linked to an existing Business Partner.
     * Creates an address-independent Business Partner phone number.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentPhonePost(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentPhonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPAddressIndependentPhoneType> {
        const response = await this.aBusinessPartnerBusinessPartnerToAddressIndependentPhonePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves address-independent Business Partner URL addresses by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Retrieves address-independent Business Partner URL addresses.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPAddressIndependentWebsiteType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentWebsiteGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_AddressIndependentWebsite`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPAddressIndependentWebsiteTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address-independent Business Partner URL addresses by BusinessPartner, AddressID, Person, and OrdinalNumber.
     * Retrieves address-independent Business Partner URL addresses.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentWebsiteGet(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPAddressIndependentWebsiteType> {
        const response = await this.aBusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an address-independent Business Partner URL address linked to an existing Business Partner.
     * Creates an address-independent Business Partner URL address.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentWebsitePostRaw(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentWebsitePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPAddressIndependentWebsiteType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentWebsitePost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToAddressIndependentWebsitePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_AddressIndependentWebsite`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPAddressIndependentWebsiteTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPAddressIndependentWebsiteTypeFromJSON(jsonValue));
    }

    /**
     * Creates an address-independent Business Partner URL address linked to an existing Business Partner.
     * Creates an address-independent Business Partner URL address.
     */
    async aBusinessPartnerBusinessPartnerToAddressIndependentWebsitePost(requestParameters: ABusinessPartnerBusinessPartnerToAddressIndependentWebsitePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPAddressIndependentWebsiteType> {
        const response = await this.aBusinessPartnerBusinessPartnerToAddressIndependentWebsitePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner credit worthiness data of all the available records linked to business partners in the system.
     * Retrieves business partner credit worthiness data.
     */
    async aBusinessPartnerBusinessPartnerToBPCreditWorthinessGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBPCreditWorthinessGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPCreditWorthinessType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBPCreditWorthinessGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BPCreditWorthiness`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPCreditWorthinessTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner credit worthiness data of all the available records linked to business partners in the system.
     * Retrieves business partner credit worthiness data.
     */
    async aBusinessPartnerBusinessPartnerToBPCreditWorthinessGet(requestParameters: ABusinessPartnerBusinessPartnerToBPCreditWorthinessGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPCreditWorthinessType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBPCreditWorthinessGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner data controllers of all the available records linked to business partners in the system.
     * Retrieves business partner data controllers by using key fields.
     */
    async aBusinessPartnerBusinessPartnerToBPDataControllerGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBPDataControllerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPDataControllerType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBPDataControllerGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BPDataController`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPDataControllerTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner data controllers of all the available records linked to business partners in the system.
     * Retrieves business partner data controllers by using key fields.
     */
    async aBusinessPartnerBusinessPartnerToBPDataControllerGet(requestParameters: ABusinessPartnerBusinessPartnerToBPDataControllerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPDataControllerType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBPDataControllerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new business partner data controller linked to an existing business partner.
     * Creates a new business partner data controller.
     */
    async aBusinessPartnerBusinessPartnerToBPDataControllerPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBPDataControllerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPDataControllerType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBPDataControllerPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPDataControllerTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPDataControllerTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPDataControllerTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPDataControllerTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBPDataControllerPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BPDataController`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPDataControllerTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPDataControllerTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPDataControllerTypeFromJSON(jsonValue));
    }

    /**
     * Creates a new business partner data controller linked to an existing business partner.
     * Creates a new business partner data controller.
     */
    async aBusinessPartnerBusinessPartnerToBPDataControllerPost(requestParameters: ABusinessPartnerBusinessPartnerToBPDataControllerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPDataControllerType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBPDataControllerPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner employments of all the available records linked to business partners in the system.
     * Retrieves business partner employments.
     */
    async aBusinessPartnerBusinessPartnerToBPEmploymentGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBPEmploymentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPEmploymentType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBPEmploymentGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BPEmployment`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPEmploymentTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner employments of all the available records linked to business partners in the system.
     * Retrieves business partner employments.
     */
    async aBusinessPartnerBusinessPartnerToBPEmploymentGet(requestParameters: ABusinessPartnerBusinessPartnerToBPEmploymentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPEmploymentType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBPEmploymentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates business partner employments linked to an existing business partner.
     * Creates business partner employments.
     */
    async aBusinessPartnerBusinessPartnerToBPEmploymentPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBPEmploymentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPEmploymentType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBPEmploymentPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPEmploymentTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPEmploymentTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPEmploymentTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPEmploymentTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBPEmploymentPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BPEmployment`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPEmploymentTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPEmploymentTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPEmploymentTypeFromJSON(jsonValue));
    }

    /**
     * Creates business partner employments linked to an existing business partner.
     * Creates business partner employments.
     */
    async aBusinessPartnerBusinessPartnerToBPEmploymentPost(requestParameters: ABusinessPartnerBusinessPartnerToBPEmploymentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPEmploymentType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBPEmploymentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get related to_BPFinServicesReporting
     */
    async aBusinessPartnerBusinessPartnerToBPFinServicesReportingGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBPFinServicesReportingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPFinancialServicesReportingType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBPFinServicesReportingGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BPFinServicesReporting`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPFinancialServicesReportingTypeFromJSON(jsonValue));
    }

    /**
     * Get related to_BPFinServicesReporting
     */
    async aBusinessPartnerBusinessPartnerToBPFinServicesReportingGet(requestParameters: ABusinessPartnerBusinessPartnerToBPFinServicesReportingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPFinancialServicesReportingType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBPFinServicesReportingGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner fiscal year information of all the available records linked to business partners in the system.
     * Retrieves business partner fiscal year information.
     */
    async aBusinessPartnerBusinessPartnerToBPFiscalYearInformationGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPFiscalYearInformationType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBPFiscalYearInformationGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BPFiscalYearInformation`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPFiscalYearInformationTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner fiscal year information of all the available records linked to business partners in the system.
     * Retrieves business partner fiscal year information.
     */
    async aBusinessPartnerBusinessPartnerToBPFiscalYearInformationGet(requestParameters: ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPFiscalYearInformationType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBPFiscalYearInformationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates business partner fiscal year information linked to an existing business partner.
     * Creates business partner fiscal year information.
     */
    async aBusinessPartnerBusinessPartnerToBPFiscalYearInformationPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBPFiscalYearInformationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPFiscalYearInformationType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBPFiscalYearInformationPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBPFiscalYearInformationPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BPFiscalYearInformation`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPFiscalYearInformationTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPFiscalYearInformationTypeFromJSON(jsonValue));
    }

    /**
     * Creates business partner fiscal year information linked to an existing business partner.
     * Creates business partner fiscal year information.
     */
    async aBusinessPartnerBusinessPartnerToBPFiscalYearInformationPost(requestParameters: ABusinessPartnerBusinessPartnerToBPFiscalYearInformationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPFiscalYearInformationType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBPFiscalYearInformationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner relationship data fields of all the available records in the system.
     * Retrieves business partner relationship data.
     */
    async aBusinessPartnerBusinessPartnerToBPRelationshipGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBPRelationshipGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPRelationshipType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBPRelationshipGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BPRelationship`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPRelationshipTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner relationship data fields of all the available records in the system.
     * Retrieves business partner relationship data.
     */
    async aBusinessPartnerBusinessPartnerToBPRelationshipGet(requestParameters: ABusinessPartnerBusinessPartnerToBPRelationshipGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPRelationshipType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBPRelationshipGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add new entity to related to_BPRelationship
     */
    async aBusinessPartnerBusinessPartnerToBPRelationshipPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBPRelationshipPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPRelationshipType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBPRelationshipPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPRelationshipTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPRelationshipTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPRelationshipTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPRelationshipTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBPRelationshipPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BPRelationship`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPRelationshipTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPRelationshipTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPRelationshipTypeFromJSON(jsonValue));
    }

    /**
     * Add new entity to related to_BPRelationship
     */
    async aBusinessPartnerBusinessPartnerToBPRelationshipPost(requestParameters: ABusinessPartnerBusinessPartnerToBPRelationshipPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPRelationshipType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBPRelationshipPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner identification data fields of all the records available records in the system.
     * Retrieves business partner identification data.
     */
    async aBusinessPartnerBusinessPartnerToBuPaIdentificationGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBuPaIdentificationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABuPaIdentificationType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBuPaIdentificationGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BuPaIdentification`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABuPaIdentificationTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner identification data fields of all the records available records in the system.
     * Retrieves business partner identification data.
     */
    async aBusinessPartnerBusinessPartnerToBuPaIdentificationGet(requestParameters: ABusinessPartnerBusinessPartnerToBuPaIdentificationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABuPaIdentificationType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBuPaIdentificationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new identification data record linked to business partner.
     * Creates new business partner identification data.
     */
    async aBusinessPartnerBusinessPartnerToBuPaIdentificationPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBuPaIdentificationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABuPaIdentificationType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBuPaIdentificationPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABuPaIdentificationTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABuPaIdentificationTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABuPaIdentificationTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABuPaIdentificationTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBuPaIdentificationPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BuPaIdentification`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABuPaIdentificationTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABuPaIdentificationTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABuPaIdentificationTypeFromJSON(jsonValue));
    }

    /**
     * Creates new identification data record linked to business partner.
     * Creates new business partner identification data.
     */
    async aBusinessPartnerBusinessPartnerToBuPaIdentificationPost(requestParameters: ABusinessPartnerBusinessPartnerToBuPaIdentificationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABuPaIdentificationType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBuPaIdentificationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner industry data fields of all the available records in the system.
     * Retrieves business partner industry data.
     */
    async aBusinessPartnerBusinessPartnerToBuPaIndustryGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBuPaIndustryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABuPaIndustryType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBuPaIndustryGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BuPaIndustry`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABuPaIndustryTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner industry data fields of all the available records in the system.
     * Retrieves business partner industry data.
     */
    async aBusinessPartnerBusinessPartnerToBuPaIndustryGet(requestParameters: ABusinessPartnerBusinessPartnerToBuPaIndustryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABuPaIndustryType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBuPaIndustryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns new industry data to the business partner record.
     * Creates industry data linked to business partner record.
     */
    async aBusinessPartnerBusinessPartnerToBuPaIndustryPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBuPaIndustryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABuPaIndustryType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBuPaIndustryPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABuPaIndustryTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABuPaIndustryTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABuPaIndustryTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABuPaIndustryTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBuPaIndustryPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BuPaIndustry`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABuPaIndustryTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABuPaIndustryTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABuPaIndustryTypeFromJSON(jsonValue));
    }

    /**
     * Assigns new industry data to the business partner record.
     * Creates industry data linked to business partner record.
     */
    async aBusinessPartnerBusinessPartnerToBuPaIndustryPost(requestParameters: ABusinessPartnerBusinessPartnerToBuPaIndustryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABuPaIndustryType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBuPaIndustryPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves address dependent tax number data of all the available records linked to business partners in the system.
     * Retrieves address dependent business partner tax number data.
     */
    async aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusPartAddrDepdntTaxNmbrType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusPartAddrDepdntTaxNmbr`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusPartAddrDepdntTaxNmbrTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent tax number data of all the available records linked to business partners in the system.
     * Retrieves address dependent business partner tax number data.
     */
    async aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet(requestParameters: ABusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusPartAddrDepdntTaxNmbrType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new address dependent tax number data linked to an existing business partner.
     * Creates new address dependent tax number data.
     */
    async aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusPartAddrDepdntTaxNmbr`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeFromJSON(jsonValue));
    }

    /**
     * Creates new address dependent tax number data linked to an existing business partner.
     * Creates new address dependent tax number data.
     */
    async aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost(requestParameters: ABusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner address data fields of all the available records in the system.
     * Retrieves business partner address data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerAddressType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerAddress`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerAddressTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner address data fields of all the available records in the system.
     * Retrieves business partner address data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerAddressType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new address data for an existing business partner. Address ID is automatically generated.
     * Creates a new address data for an existing business partner.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerAddressType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerAddress`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerAddressTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerAddressTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new address data for an existing business partner. Address ID is automatically generated.
     * Creates a new address data for an existing business partner.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerAddressType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner aliases of all the available records linked to business partners in the system.
     * Retrieves business partner aliases.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerAliasGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerAliasGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerAliasType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerAliasGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerAlias`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerAliasTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner aliases of all the available records linked to business partners in the system.
     * Retrieves business partner aliases.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerAliasGet(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerAliasGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerAliasType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerAliasGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates business partner aliases linked to an existing business partner.
     * Creates business partner aliases.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerAliasPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerAliasPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerAliasType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerAliasPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerAliasTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerAliasTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerAliasTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerAliasTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerAliasPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerAlias`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerAliasTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerAliasTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerAliasTypeFromJSON(jsonValue));
    }

    /**
     * Creates business partner aliases linked to an existing business partner.
     * Creates business partner aliases.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerAliasPost(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerAliasPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerAliasType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerAliasPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner bank data fields of all the available records in the system.
     * Retrieves business partner bank data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerBankGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerBankType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerBankGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerBank`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerBankTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner bank data fields of all the available records in the system.
     * Retrieves business partner bank data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerBankGet(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerBankType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerBankGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new business partner bank data linked to business partner.
     * Creates new business partner bank data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerBankPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerBankPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerBankType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerBankPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerBankPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerBank`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerBankTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerBankTypeFromJSON(jsonValue));
    }

    /**
     * Creates new business partner bank data linked to business partner.
     * Creates new business partner bank data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerBankPost(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerBankPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerBankType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerBankPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner contact data fields of all the available records in the system.
     * Retrieves business partner contact data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerContactGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerContactType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerContactGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerContact`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerContactTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner contact data fields of all the available records in the system.
     * Retrieves business partner contact data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerContactGet(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerContactType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerContactGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new business partner contact relationship data of type \'BUR001\' to the business partner.
     * Creates new business partner contact relationship data of type \'BUR001\'
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerContactPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerContactPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerContactType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerContactPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerContactPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerContact`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerContactTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerContactTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new business partner contact relationship data of type \'BUR001\' to the business partner.
     * Creates new business partner contact relationship data of type \'BUR001\'
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerContactPost(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerContactPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerContactType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerContactPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves financial services business partner attributes of all the available records linked to business partners in the system.
     * Retrieves financial services business partner attributes.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPFinancialServicesExtnType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartner`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPFinancialServicesExtnTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves financial services business partner attributes of all the available records linked to business partners in the system.
     * Retrieves financial services business partner attributes.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerGet(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPFinancialServicesExtnType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides the bank key if the business partner is a bank.
     * Provides the bank key if the business partner is a bank.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerIsBankType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerIsBankGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerIsBank`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerIsBankTypeFromJSON(jsonValue));
    }

    /**
     * Provides the bank key if the business partner is a bank.
     * Provides the bank key if the business partner is a bank.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerIsBankGet(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerIsBankType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner ratings of all the available records linked to business partners in the system.
     * Retrieves business partner ratings.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerRatingGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerRatingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerRatingType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerRatingGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerRating`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerRatingTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner ratings of all the available records linked to business partners in the system.
     * Retrieves business partner ratings.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerRatingGet(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerRatingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerRatingType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerRatingGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates business partner ratings linked to an existing business partner.
     * Creates business partner ratings.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerRatingPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerRatingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerRatingType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerRatingPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerRatingTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerRatingTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerRatingTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerRatingTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerRatingPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerRating`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerRatingTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerRatingTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerRatingTypeFromJSON(jsonValue));
    }

    /**
     * Creates business partner ratings linked to an existing business partner.
     * Creates business partner ratings.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerRatingPost(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerRatingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerRatingType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerRatingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner role data fields of all the records available records in the system.
     * Retrieves business partner role data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerRoleGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerRoleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerRoleType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerRoleGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerRole`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerRoleTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner role data fields of all the records available records in the system.
     * Retrieves business partner role data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerRoleGet(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerRoleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerRoleType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerRoleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new role to the existing business partner record with role and validity details.
     * Creates a new role for an existing business partner.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerRolePostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerRolePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerRoleType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerRolePost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerRoleTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerRoleTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerRoleTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerRoleTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerRolePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerRole`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerRoleTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerRoleTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerRoleTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new role to the existing business partner record with role and validity details.
     * Creates a new role for an existing business partner.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerRolePost(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerRolePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerRoleType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerRolePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves tax number data of all the available records linked to business partners in the system.
     * Retrieves business partner tax number data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerTaxGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerTaxNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerTaxGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerTax`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerTaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves tax number data of all the available records linked to business partners in the system.
     * Retrieves business partner tax number data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerTaxGet(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerTaxNumberType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerTaxGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new tax number data linked to an existing business partner.
     * Creates a new tax number data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerTaxPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerTaxNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerTaxPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerTaxPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerTax`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerTaxNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerTaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Creates a new tax number data linked to an existing business partner.
     * Creates a new tax number data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerTaxPost(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerTaxNumberType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerTaxPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves general data of all the customer records available in the system.
     * Retrieves customer general data.
     */
    async aBusinessPartnerBusinessPartnerToCustomerGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToCustomerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToCustomerGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_Customer`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves general data of all the customer records available in the system.
     * Retrieves customer general data.
     */
    async aBusinessPartnerBusinessPartnerToCustomerGet(requestParameters: ABusinessPartnerBusinessPartnerToCustomerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerType> {
        const response = await this.aBusinessPartnerBusinessPartnerToCustomerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner payment cards of all the available records linked to business partners in the system.
     * Retrieves business partner payment card data.
     */
    async aBusinessPartnerBusinessPartnerToPaymentCardGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToPaymentCardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerPaymentCardType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToPaymentCardGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_PaymentCard`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerPaymentCardTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner payment cards of all the available records linked to business partners in the system.
     * Retrieves business partner payment card data.
     */
    async aBusinessPartnerBusinessPartnerToPaymentCardGet(requestParameters: ABusinessPartnerBusinessPartnerToPaymentCardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerPaymentCardType> {
        const response = await this.aBusinessPartnerBusinessPartnerToPaymentCardGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns new payment card data to the business partner record.
     * Creates payment card data linked to business partner record.
     */
    async aBusinessPartnerBusinessPartnerToPaymentCardPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToPaymentCardPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerPaymentCardType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToPaymentCardPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToPaymentCardPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_PaymentCard`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerPaymentCardTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerPaymentCardTypeFromJSON(jsonValue));
    }

    /**
     * Assigns new payment card data to the business partner record.
     * Creates payment card data linked to business partner record.
     */
    async aBusinessPartnerBusinessPartnerToPaymentCardPost(requestParameters: ABusinessPartnerBusinessPartnerToPaymentCardPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerPaymentCardType> {
        const response = await this.aBusinessPartnerBusinessPartnerToPaymentCardPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves general data of all the supplier records available in the system.
     * Retrieves supplier general data.
     */
    async aBusinessPartnerBusinessPartnerToSupplierGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToSupplierGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToSupplierGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_Supplier`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves general data of all the supplier records available in the system.
     * Retrieves supplier general data.
     */
    async aBusinessPartnerBusinessPartnerToSupplierGet(requestParameters: ABusinessPartnerBusinessPartnerToSupplierGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierType> {
        const response = await this.aBusinessPartnerBusinessPartnerToSupplierGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves general data fields of all the business partner records available in the system.
     * Retrieves business partner general data.
     */
    async aBusinessPartnerGetRaw(requestParameters: ABusinessPartnerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves general data fields of all the business partner records available in the system.
     * Retrieves business partner general data.
     */
    async aBusinessPartnerGet(requestParameters: ABusinessPartnerGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerType> {
        const response = await this.aBusinessPartnerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a business partner including Customer, Supplier, Address, Role, Tax, Bank, Identification, Contact, and Industry data.
     * Creates a new business partner record.
     */
    async aBusinessPartnerPostRaw(requestParameters: ABusinessPartnerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerType>> {
        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerTypeCreate was null or undefined when calling aBusinessPartnerPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerTypeFromJSON(jsonValue));
    }

    /**
     * Creates a business partner including Customer, Supplier, Address, Role, Tax, Bank, Identification, Contact, and Industry data.
     * Creates a new business partner record.
     */
    async aBusinessPartnerPost(requestParameters: ABusinessPartnerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerType> {
        const response = await this.aBusinessPartnerPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    Customer: 'Customer',
    Supplier: 'Supplier',
    AcademicTitle: 'AcademicTitle',
    AuthorizationGroup: 'AuthorizationGroup',
    BusinessPartnerCategory: 'BusinessPartnerCategory',
    BusinessPartnerFullName: 'BusinessPartnerFullName',
    BusinessPartnerGrouping: 'BusinessPartnerGrouping',
    BusinessPartnerName: 'BusinessPartnerName',
    BusinessPartnerUuid: 'BusinessPartnerUUID',
    CorrespondenceLanguage: 'CorrespondenceLanguage',
    CreatedByUser: 'CreatedByUser',
    CreationDate: 'CreationDate',
    CreationTime: 'CreationTime',
    FirstName: 'FirstName',
    FormOfAddress: 'FormOfAddress',
    Industry: 'Industry',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    IsFemale: 'IsFemale',
    IsMale: 'IsMale',
    IsNaturalPerson: 'IsNaturalPerson',
    IsSexUnknown: 'IsSexUnknown',
    GenderCodeName: 'GenderCodeName',
    Language: 'Language',
    LastChangeDate: 'LastChangeDate',
    LastChangeTime: 'LastChangeTime',
    LastChangedByUser: 'LastChangedByUser',
    LastName: 'LastName',
    LegalForm: 'LegalForm',
    OrganizationBpName1: 'OrganizationBPName1',
    OrganizationBpName2: 'OrganizationBPName2',
    OrganizationBpName3: 'OrganizationBPName3',
    OrganizationBpName4: 'OrganizationBPName4',
    OrganizationFoundationDate: 'OrganizationFoundationDate',
    OrganizationLiquidationDate: 'OrganizationLiquidationDate',
    SearchTerm1: 'SearchTerm1',
    SearchTerm2: 'SearchTerm2',
    AdditionalLastName: 'AdditionalLastName',
    BirthDate: 'BirthDate',
    BusinessPartnerBirthDateStatus: 'BusinessPartnerBirthDateStatus',
    BusinessPartnerBirthplaceName: 'BusinessPartnerBirthplaceName',
    BusinessPartnerDeathDate: 'BusinessPartnerDeathDate',
    BusinessPartnerIsBlocked: 'BusinessPartnerIsBlocked',
    BusinessPartnerType: 'BusinessPartnerType',
    ETag: 'ETag',
    GroupBusinessPartnerName1: 'GroupBusinessPartnerName1',
    GroupBusinessPartnerName2: 'GroupBusinessPartnerName2',
    IndependentAddressId: 'IndependentAddressID',
    InternationalLocationNumber3: 'InternationalLocationNumber3',
    MiddleName: 'MiddleName',
    NameCountry: 'NameCountry',
    NameFormat: 'NameFormat',
    PersonFullName: 'PersonFullName',
    PersonNumber: 'PersonNumber',
    IsMarkedForArchiving: 'IsMarkedForArchiving',
    BusinessPartnerIdbyExtSystem: 'BusinessPartnerIDByExtSystem',
    BusinessPartnerPrintFormat: 'BusinessPartnerPrintFormat',
    BusinessPartnerOccupation: 'BusinessPartnerOccupation',
    BusPartMaritalStatus: 'BusPartMaritalStatus',
    BusPartNationality: 'BusPartNationality',
    BusinessPartnerBirthName: 'BusinessPartnerBirthName',
    BusinessPartnerSupplementName: 'BusinessPartnerSupplementName',
    NaturalPersonEmployerName: 'NaturalPersonEmployerName',
    LastNamePrefix: 'LastNamePrefix',
    LastNameSecondPrefix: 'LastNameSecondPrefix',
    Initials: 'Initials',
    BpDataControllerIsNotRequired: 'BPDataControllerIsNotRequired',
    TradingPartner: 'TradingPartner'
} as const;
export type ABusinessPartnerBusinessPartnerGetSelectEnum = typeof ABusinessPartnerBusinessPartnerGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerGetExpandEnum = {
    Star: '*',
    ToAddressIndependentEmail: 'to_AddressIndependentEmail',
    ToAddressIndependentFax: 'to_AddressIndependentFax',
    ToAddressIndependentMobile: 'to_AddressIndependentMobile',
    ToAddressIndependentPhone: 'to_AddressIndependentPhone',
    ToAddressIndependentWebsite: 'to_AddressIndependentWebsite',
    ToBpCreditWorthiness: 'to_BPCreditWorthiness',
    ToBpDataController: 'to_BPDataController',
    ToBpEmployment: 'to_BPEmployment',
    ToBpFinServicesReporting: 'to_BPFinServicesReporting',
    ToBpFiscalYearInformation: 'to_BPFiscalYearInformation',
    ToBpRelationship: 'to_BPRelationship',
    ToBuPaIdentification: 'to_BuPaIdentification',
    ToBuPaIndustry: 'to_BuPaIndustry',
    ToBusinessPartner: 'to_BusinessPartner',
    ToBusinessPartnerAddress: 'to_BusinessPartnerAddress',
    ToBusinessPartnerAlias: 'to_BusinessPartnerAlias',
    ToBusinessPartnerBank: 'to_BusinessPartnerBank',
    ToBusinessPartnerContact: 'to_BusinessPartnerContact',
    ToBusinessPartnerIsBank: 'to_BusinessPartnerIsBank',
    ToBusinessPartnerRating: 'to_BusinessPartnerRating',
    ToBusinessPartnerRole: 'to_BusinessPartnerRole',
    ToBusinessPartnerTax: 'to_BusinessPartnerTax',
    ToBusPartAddrDepdntTaxNmbr: 'to_BusPartAddrDepdntTaxNmbr',
    ToCustomer: 'to_Customer',
    ToPaymentCard: 'to_PaymentCard',
    ToSupplier: 'to_Supplier'
} as const;
export type ABusinessPartnerBusinessPartnerGetExpandEnum = typeof ABusinessPartnerBusinessPartnerGetExpandEnum[keyof typeof ABusinessPartnerBusinessPartnerGetExpandEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToAddressIndependentEmailGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    EmailAddress: 'EmailAddress',
    EmailAddressDesc: 'EmailAddress desc',
    IsDefaultEmailAddress: 'IsDefaultEmailAddress',
    IsDefaultEmailAddressDesc: 'IsDefaultEmailAddress desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc'
} as const;
export type ABusinessPartnerBusinessPartnerToAddressIndependentEmailGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToAddressIndependentEmailGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToAddressIndependentEmailGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToAddressIndependentEmailGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    EmailAddress: 'EmailAddress',
    IsDefaultEmailAddress: 'IsDefaultEmailAddress',
    ValidityStartDate: 'ValidityStartDate',
    ValidityEndDate: 'ValidityEndDate'
} as const;
export type ABusinessPartnerBusinessPartnerToAddressIndependentEmailGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToAddressIndependentEmailGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToAddressIndependentEmailGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToAddressIndependentFaxGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    FaxCountry: 'FaxCountry',
    FaxCountryDesc: 'FaxCountry desc',
    FaxAreaCodeSubscriberNumber: 'FaxAreaCodeSubscriberNumber',
    FaxAreaCodeSubscriberNumberDesc: 'FaxAreaCodeSubscriberNumber desc',
    FaxNumberExtension: 'FaxNumberExtension',
    FaxNumberExtensionDesc: 'FaxNumberExtension desc',
    InternationalFaxNumber: 'InternationalFaxNumber',
    InternationalFaxNumberDesc: 'InternationalFaxNumber desc',
    IsDefaultFaxNumber: 'IsDefaultFaxNumber',
    IsDefaultFaxNumberDesc: 'IsDefaultFaxNumber desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc'
} as const;
export type ABusinessPartnerBusinessPartnerToAddressIndependentFaxGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToAddressIndependentFaxGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToAddressIndependentFaxGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToAddressIndependentFaxGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    FaxCountry: 'FaxCountry',
    FaxAreaCodeSubscriberNumber: 'FaxAreaCodeSubscriberNumber',
    FaxNumberExtension: 'FaxNumberExtension',
    InternationalFaxNumber: 'InternationalFaxNumber',
    IsDefaultFaxNumber: 'IsDefaultFaxNumber',
    ValidityEndDate: 'ValidityEndDate',
    ValidityStartDate: 'ValidityStartDate'
} as const;
export type ABusinessPartnerBusinessPartnerToAddressIndependentFaxGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToAddressIndependentFaxGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToAddressIndependentFaxGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToAddressIndependentMobileGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    InternationalPhoneNumberDesc: 'InternationalPhoneNumber desc',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    IsDefaultPhoneNumberDesc: 'IsDefaultPhoneNumber desc',
    MobilePhoneCountry: 'MobilePhoneCountry',
    MobilePhoneCountryDesc: 'MobilePhoneCountry desc',
    MobilePhoneNumber: 'MobilePhoneNumber',
    MobilePhoneNumberDesc: 'MobilePhoneNumber desc',
    PhoneNumberExtension: 'PhoneNumberExtension',
    PhoneNumberExtensionDesc: 'PhoneNumberExtension desc',
    PhoneNumberType: 'PhoneNumberType',
    PhoneNumberTypeDesc: 'PhoneNumberType desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc'
} as const;
export type ABusinessPartnerBusinessPartnerToAddressIndependentMobileGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToAddressIndependentMobileGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToAddressIndependentMobileGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToAddressIndependentMobileGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    MobilePhoneCountry: 'MobilePhoneCountry',
    MobilePhoneNumber: 'MobilePhoneNumber',
    PhoneNumberExtension: 'PhoneNumberExtension',
    PhoneNumberType: 'PhoneNumberType',
    ValidityStartDate: 'ValidityStartDate',
    ValidityEndDate: 'ValidityEndDate'
} as const;
export type ABusinessPartnerBusinessPartnerToAddressIndependentMobileGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToAddressIndependentMobileGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToAddressIndependentMobileGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToAddressIndependentPhoneGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    DestinationLocationCountry: 'DestinationLocationCountry',
    DestinationLocationCountryDesc: 'DestinationLocationCountry desc',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    InternationalPhoneNumberDesc: 'InternationalPhoneNumber desc',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    IsDefaultPhoneNumberDesc: 'IsDefaultPhoneNumber desc',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberDesc: 'PhoneNumber desc',
    PhoneNumberExtension: 'PhoneNumberExtension',
    PhoneNumberExtensionDesc: 'PhoneNumberExtension desc',
    PhoneNumberType: 'PhoneNumberType',
    PhoneNumberTypeDesc: 'PhoneNumberType desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc'
} as const;
export type ABusinessPartnerBusinessPartnerToAddressIndependentPhoneGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToAddressIndependentPhoneGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToAddressIndependentPhoneGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToAddressIndependentPhoneGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    DestinationLocationCountry: 'DestinationLocationCountry',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberExtension: 'PhoneNumberExtension',
    PhoneNumberType: 'PhoneNumberType',
    ValidityStartDate: 'ValidityStartDate',
    ValidityEndDate: 'ValidityEndDate'
} as const;
export type ABusinessPartnerBusinessPartnerToAddressIndependentPhoneGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToAddressIndependentPhoneGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToAddressIndependentPhoneGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    IsDefaultUrlAddressDesc: 'IsDefaultURLAddress desc',
    UrlFieldLength: 'URLFieldLength',
    UrlFieldLengthDesc: 'URLFieldLength desc'
} as const;
export type ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    UrlFieldLength: 'URLFieldLength',
    WebsiteUrl: 'WebsiteURL'
} as const;
export type ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToAddressIndependentWebsiteGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBPCreditWorthinessGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BusPartCreditStanding: 'BusPartCreditStanding',
    BpCreditStandingStatus: 'BPCreditStandingStatus',
    CreditRatingAgency: 'CreditRatingAgency',
    BpCreditStandingComment: 'BPCreditStandingComment',
    BpCreditStandingDate: 'BPCreditStandingDate',
    BpCreditStandingRating: 'BPCreditStandingRating',
    BpLegalProceedingStatus: 'BPLegalProceedingStatus',
    BpLglProceedingInitiationDate: 'BPLglProceedingInitiationDate',
    BusinessPartnerIsUnderOath: 'BusinessPartnerIsUnderOath',
    BusinessPartnerOathDate: 'BusinessPartnerOathDate',
    BusinessPartnerIsBankrupt: 'BusinessPartnerIsBankrupt',
    BusinessPartnerBankruptcyDate: 'BusinessPartnerBankruptcyDate',
    BpForeclosureIsInitiated: 'BPForeclosureIsInitiated',
    BpForeclosureDate: 'BPForeclosureDate',
    BpCrdtWrthnssAccessChkIsActive: 'BPCrdtWrthnssAccessChkIsActive'
} as const;
export type ABusinessPartnerBusinessPartnerToBPCreditWorthinessGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBPCreditWorthinessGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBPCreditWorthinessGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBPDataControllerGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    DataController: 'DataController',
    DataControllerDesc: 'DataController desc',
    PurposeForPersonalData: 'PurposeForPersonalData',
    PurposeForPersonalDataDesc: 'PurposeForPersonalData desc',
    DataControlAssignmentStatus: 'DataControlAssignmentStatus',
    DataControlAssignmentStatusDesc: 'DataControlAssignmentStatus desc',
    BpDataControllerIsDerived: 'BPDataControllerIsDerived',
    BpDataControllerIsDerivedDesc: 'BPDataControllerIsDerived desc',
    PurposeDerived: 'PurposeDerived',
    PurposeDerivedDesc: 'PurposeDerived desc',
    PurposeType: 'PurposeType',
    PurposeTypeDesc: 'PurposeType desc',
    BusinessPurposeFlag: 'BusinessPurposeFlag',
    BusinessPurposeFlagDesc: 'BusinessPurposeFlag desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBPDataControllerGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBPDataControllerGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBPDataControllerGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBPDataControllerGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    DataController: 'DataController',
    PurposeForPersonalData: 'PurposeForPersonalData',
    DataControlAssignmentStatus: 'DataControlAssignmentStatus',
    BpDataControllerIsDerived: 'BPDataControllerIsDerived',
    PurposeDerived: 'PurposeDerived',
    PurposeType: 'PurposeType',
    BusinessPurposeFlag: 'BusinessPurposeFlag'
} as const;
export type ABusinessPartnerBusinessPartnerToBPDataControllerGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBPDataControllerGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBPDataControllerGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBPEmploymentGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    BpEmploymentStartDate: 'BPEmploymentStartDate',
    BpEmploymentStartDateDesc: 'BPEmploymentStartDate desc',
    BpEmploymentEndDate: 'BPEmploymentEndDate',
    BpEmploymentEndDateDesc: 'BPEmploymentEndDate desc',
    BpEmploymentStatus: 'BPEmploymentStatus',
    BpEmploymentStatusDesc: 'BPEmploymentStatus desc',
    BusPartEmplrIndstryCode: 'BusPartEmplrIndstryCode',
    BusPartEmplrIndstryCodeDesc: 'BusPartEmplrIndstryCode desc',
    BusinessPartnerEmployerName: 'BusinessPartnerEmployerName',
    BusinessPartnerEmployerNameDesc: 'BusinessPartnerEmployerName desc',
    BusinessPartnerOccupationGroup: 'BusinessPartnerOccupationGroup',
    BusinessPartnerOccupationGroupDesc: 'BusinessPartnerOccupationGroup desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBPEmploymentGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBPEmploymentGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBPEmploymentGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBPEmploymentGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BpEmploymentStartDate: 'BPEmploymentStartDate',
    BpEmploymentEndDate: 'BPEmploymentEndDate',
    BpEmploymentStatus: 'BPEmploymentStatus',
    BusPartEmplrIndstryCode: 'BusPartEmplrIndstryCode',
    BusinessPartnerEmployerName: 'BusinessPartnerEmployerName',
    BusinessPartnerOccupationGroup: 'BusinessPartnerOccupationGroup'
} as const;
export type ABusinessPartnerBusinessPartnerToBPEmploymentGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBPEmploymentGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBPEmploymentGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBPFinServicesReportingGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BpisNonResident: 'BPIsNonResident',
    BpNonResidencyStartDate: 'BPNonResidencyStartDate',
    BpisMultimillionLoanRecipient: 'BPIsMultimillionLoanRecipient',
    BpLoanReportingBorrowerNumber: 'BPLoanReportingBorrowerNumber',
    BpLoanRptgBorrowerEntityNumber: 'BPLoanRptgBorrowerEntityNumber',
    BpCreditStandingReview: 'BPCreditStandingReview',
    BpCreditStandingReviewDate: 'BPCreditStandingReviewDate',
    BusinessPartnerLoanToManager: 'BusinessPartnerLoanToManager',
    BpCompanyRelationship: 'BPCompanyRelationship',
    BpLoanReportingCreditorNumber: 'BPLoanReportingCreditorNumber',
    BpoeNbIdentNumber: 'BPOeNBIdentNumber',
    BpoeNbTargetGroup: 'BPOeNBTargetGroup',
    BpoeNbIdentNumberAssigned: 'BPOeNBIdentNumberAssigned',
    BpoeNbInstituteNumber: 'BPOeNBInstituteNumber',
    BusinessPartnerIsOeNbInstitute: 'BusinessPartnerIsOeNBInstitute',
    BusinessPartnerGroup: 'BusinessPartnerGroup',
    BpGroupAssignmentCategory: 'BPGroupAssignmentCategory',
    BusinessPartnerGroupName: 'BusinessPartnerGroupName',
    BusinessPartnerLegalEntity: 'BusinessPartnerLegalEntity',
    BpGerAstRglnRestrictedAstQuota: 'BPGerAstRglnRestrictedAstQuota',
    BusinessPartnerDebtorGroup: 'BusinessPartnerDebtorGroup',
    BusinessPartnerBusinessPurpose: 'BusinessPartnerBusinessPurpose',
    BusinessPartnerRiskGroup: 'BusinessPartnerRiskGroup',
    BpRiskGroupingDate: 'BPRiskGroupingDate',
    BpHasGroupAffiliation: 'BPHasGroupAffiliation',
    BpisMonetaryFinInstitution: 'BPIsMonetaryFinInstitution',
    BpCrdtStandingReviewIsRequired: 'BPCrdtStandingReviewIsRequired',
    BpLoanMonitoringIsRequired: 'BPLoanMonitoringIsRequired',
    BpHasCreditingRelief: 'BPHasCreditingRelief',
    BpInvestInRstrcdAstIsAuthzd: 'BPInvestInRstrcdAstIsAuthzd',
    BpCentralBankCountryRegion: 'BPCentralBankCountryRegion'
} as const;
export type ABusinessPartnerBusinessPartnerToBPFinServicesReportingGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBPFinServicesReportingGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBPFinServicesReportingGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    BusinessPartnerFiscalYear: 'BusinessPartnerFiscalYear',
    BusinessPartnerFiscalYearDesc: 'BusinessPartnerFiscalYear desc',
    BpBalanceSheetCurrency: 'BPBalanceSheetCurrency',
    BpBalanceSheetCurrencyDesc: 'BPBalanceSheetCurrency desc',
    BpAnnualStockholderMeetingDate: 'BPAnnualStockholderMeetingDate',
    BpAnnualStockholderMeetingDateDesc: 'BPAnnualStockholderMeetingDate desc',
    BpFiscalYearStartDate: 'BPFiscalYearStartDate',
    BpFiscalYearStartDateDesc: 'BPFiscalYearStartDate desc',
    BpFiscalYearEndDate: 'BPFiscalYearEndDate',
    BpFiscalYearEndDateDesc: 'BPFiscalYearEndDate desc',
    BpFiscalYearIsClosed: 'BPFiscalYearIsClosed',
    BpFiscalYearIsClosedDesc: 'BPFiscalYearIsClosed desc',
    BpFiscalYearClosingDate: 'BPFiscalYearClosingDate',
    BpFiscalYearClosingDateDesc: 'BPFiscalYearClosingDate desc',
    BpFsclYrCnsldtdFinStatementDte: 'BPFsclYrCnsldtdFinStatementDte',
    BpFsclYrCnsldtdFinStatementDteDesc: 'BPFsclYrCnsldtdFinStatementDte desc',
    BpCapitalStockAmtInBalShtCrcy: 'BPCapitalStockAmtInBalShtCrcy',
    BpCapitalStockAmtInBalShtCrcyDesc: 'BPCapitalStockAmtInBalShtCrcy desc',
    BpIssdStockCptlAmtInBalShtCrcy: 'BPIssdStockCptlAmtInBalShtCrcy',
    BpIssdStockCptlAmtInBalShtCrcyDesc: 'BPIssdStockCptlAmtInBalShtCrcy desc',
    BpPartcipnCertAmtInBalShtCrcy: 'BPPartcipnCertAmtInBalShtCrcy',
    BpPartcipnCertAmtInBalShtCrcyDesc: 'BPPartcipnCertAmtInBalShtCrcy desc',
    BpEquityCapitalAmtInBalShtCrcy: 'BPEquityCapitalAmtInBalShtCrcy',
    BpEquityCapitalAmtInBalShtCrcyDesc: 'BPEquityCapitalAmtInBalShtCrcy desc',
    BpGrossPremiumAmtInBalShtCrcy: 'BPGrossPremiumAmtInBalShtCrcy',
    BpGrossPremiumAmtInBalShtCrcyDesc: 'BPGrossPremiumAmtInBalShtCrcy desc',
    BpNetPremiumAmtInBalShtCrcy: 'BPNetPremiumAmtInBalShtCrcy',
    BpNetPremiumAmtInBalShtCrcyDesc: 'BPNetPremiumAmtInBalShtCrcy desc',
    BpAnnualSalesAmtInBalShtCrcy: 'BPAnnualSalesAmtInBalShtCrcy',
    BpAnnualSalesAmtInBalShtCrcyDesc: 'BPAnnualSalesAmtInBalShtCrcy desc',
    BpAnnualNetIncAmtInBalShtCrcy: 'BPAnnualNetIncAmtInBalShtCrcy',
    BpAnnualNetIncAmtInBalShtCrcyDesc: 'BPAnnualNetIncAmtInBalShtCrcy desc',
    BpDividendDistrAmtInBalShtCrcy: 'BPDividendDistrAmtInBalShtCrcy',
    BpDividendDistrAmtInBalShtCrcyDesc: 'BPDividendDistrAmtInBalShtCrcy desc',
    BpDebtRatioInYears: 'BPDebtRatioInYears',
    BpDebtRatioInYearsDesc: 'BPDebtRatioInYears desc',
    BpAnnualPnLAmtInBalShtCrcy: 'BPAnnualPnLAmtInBalShtCrcy',
    BpAnnualPnLAmtInBalShtCrcyDesc: 'BPAnnualPnLAmtInBalShtCrcy desc',
    BpBalSheetTotalAmtInBalShtCrcy: 'BPBalSheetTotalAmtInBalShtCrcy',
    BpBalSheetTotalAmtInBalShtCrcyDesc: 'BPBalSheetTotalAmtInBalShtCrcy desc',
    BpNumberOfEmployees: 'BPNumberOfEmployees',
    BpNumberOfEmployeesDesc: 'BPNumberOfEmployees desc',
    BpCptlReserveAmtInBalShtCrcy: 'BPCptlReserveAmtInBalShtCrcy',
    BpCptlReserveAmtInBalShtCrcyDesc: 'BPCptlReserveAmtInBalShtCrcy desc',
    BpLglRevnRsrvAmtInBalShtCrcy: 'BPLglRevnRsrvAmtInBalShtCrcy',
    BpLglRevnRsrvAmtInBalShtCrcyDesc: 'BPLglRevnRsrvAmtInBalShtCrcy desc',
    RevnRsrvOwnStkAmtInBalShtCrcy: 'RevnRsrvOwnStkAmtInBalShtCrcy',
    RevnRsrvOwnStkAmtInBalShtCrcyDesc: 'RevnRsrvOwnStkAmtInBalShtCrcy desc',
    BpStatryReserveAmtInBalShtCrcy: 'BPStatryReserveAmtInBalShtCrcy',
    BpStatryReserveAmtInBalShtCrcyDesc: 'BPStatryReserveAmtInBalShtCrcy desc',
    BpOthRevnRsrvAmtInBalShtCrcy: 'BPOthRevnRsrvAmtInBalShtCrcy',
    BpOthRevnRsrvAmtInBalShtCrcyDesc: 'BPOthRevnRsrvAmtInBalShtCrcy desc',
    BppnLCarryfwdAmtInBalShtCrcy: 'BPPnLCarryfwdAmtInBalShtCrcy',
    BppnLCarryfwdAmtInBalShtCrcyDesc: 'BPPnLCarryfwdAmtInBalShtCrcy desc',
    BpSuborddLbltyAmtInBalShtCrcy: 'BPSuborddLbltyAmtInBalShtCrcy',
    BpSuborddLbltyAmtInBalShtCrcyDesc: 'BPSuborddLbltyAmtInBalShtCrcy desc',
    BpRetOnTotalCptlEmpldInPercent: 'BPRetOnTotalCptlEmpldInPercent',
    BpRetOnTotalCptlEmpldInPercentDesc: 'BPRetOnTotalCptlEmpldInPercent desc',
    BpDebtClearancePeriodInYears: 'BPDebtClearancePeriodInYears',
    BpDebtClearancePeriodInYearsDesc: 'BPDebtClearancePeriodInYears desc',
    BpFinancingCoeffInPercent: 'BPFinancingCoeffInPercent',
    BpFinancingCoeffInPercentDesc: 'BPFinancingCoeffInPercent desc',
    BpEquityRatioInPercent: 'BPEquityRatioInPercent',
    BpEquityRatioInPercentDesc: 'BPEquityRatioInPercent desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerFiscalYear: 'BusinessPartnerFiscalYear',
    BpBalanceSheetCurrency: 'BPBalanceSheetCurrency',
    BpAnnualStockholderMeetingDate: 'BPAnnualStockholderMeetingDate',
    BpFiscalYearStartDate: 'BPFiscalYearStartDate',
    BpFiscalYearEndDate: 'BPFiscalYearEndDate',
    BpFiscalYearIsClosed: 'BPFiscalYearIsClosed',
    BpFiscalYearClosingDate: 'BPFiscalYearClosingDate',
    BpFsclYrCnsldtdFinStatementDte: 'BPFsclYrCnsldtdFinStatementDte',
    BpCapitalStockAmtInBalShtCrcy: 'BPCapitalStockAmtInBalShtCrcy',
    BpIssdStockCptlAmtInBalShtCrcy: 'BPIssdStockCptlAmtInBalShtCrcy',
    BpPartcipnCertAmtInBalShtCrcy: 'BPPartcipnCertAmtInBalShtCrcy',
    BpEquityCapitalAmtInBalShtCrcy: 'BPEquityCapitalAmtInBalShtCrcy',
    BpGrossPremiumAmtInBalShtCrcy: 'BPGrossPremiumAmtInBalShtCrcy',
    BpNetPremiumAmtInBalShtCrcy: 'BPNetPremiumAmtInBalShtCrcy',
    BpAnnualSalesAmtInBalShtCrcy: 'BPAnnualSalesAmtInBalShtCrcy',
    BpAnnualNetIncAmtInBalShtCrcy: 'BPAnnualNetIncAmtInBalShtCrcy',
    BpDividendDistrAmtInBalShtCrcy: 'BPDividendDistrAmtInBalShtCrcy',
    BpDebtRatioInYears: 'BPDebtRatioInYears',
    BpAnnualPnLAmtInBalShtCrcy: 'BPAnnualPnLAmtInBalShtCrcy',
    BpBalSheetTotalAmtInBalShtCrcy: 'BPBalSheetTotalAmtInBalShtCrcy',
    BpNumberOfEmployees: 'BPNumberOfEmployees',
    BpCptlReserveAmtInBalShtCrcy: 'BPCptlReserveAmtInBalShtCrcy',
    BpLglRevnRsrvAmtInBalShtCrcy: 'BPLglRevnRsrvAmtInBalShtCrcy',
    RevnRsrvOwnStkAmtInBalShtCrcy: 'RevnRsrvOwnStkAmtInBalShtCrcy',
    BpStatryReserveAmtInBalShtCrcy: 'BPStatryReserveAmtInBalShtCrcy',
    BpOthRevnRsrvAmtInBalShtCrcy: 'BPOthRevnRsrvAmtInBalShtCrcy',
    BppnLCarryfwdAmtInBalShtCrcy: 'BPPnLCarryfwdAmtInBalShtCrcy',
    BpSuborddLbltyAmtInBalShtCrcy: 'BPSuborddLbltyAmtInBalShtCrcy',
    BpRetOnTotalCptlEmpldInPercent: 'BPRetOnTotalCptlEmpldInPercent',
    BpDebtClearancePeriodInYears: 'BPDebtClearancePeriodInYears',
    BpFinancingCoeffInPercent: 'BPFinancingCoeffInPercent',
    BpEquityRatioInPercent: 'BPEquityRatioInPercent'
} as const;
export type ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBPRelationshipGetOrderbyEnum = {
    RelationshipNumber: 'RelationshipNumber',
    RelationshipNumberDesc: 'RelationshipNumber desc',
    BusinessPartner1: 'BusinessPartner1',
    BusinessPartner1Desc: 'BusinessPartner1 desc',
    BusinessPartner2: 'BusinessPartner2',
    BusinessPartner2Desc: 'BusinessPartner2 desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    IsStandardRelationship: 'IsStandardRelationship',
    IsStandardRelationshipDesc: 'IsStandardRelationship desc',
    RelationshipCategory: 'RelationshipCategory',
    RelationshipCategoryDesc: 'RelationshipCategory desc',
    BpRelationshipType: 'BPRelationshipType',
    BpRelationshipTypeDesc: 'BPRelationshipType desc',
    CreatedByUser: 'CreatedByUser',
    CreatedByUserDesc: 'CreatedByUser desc',
    CreationDate: 'CreationDate',
    CreationDateDesc: 'CreationDate desc',
    CreationTime: 'CreationTime',
    CreationTimeDesc: 'CreationTime desc',
    LastChangedByUser: 'LastChangedByUser',
    LastChangedByUserDesc: 'LastChangedByUser desc',
    LastChangeDate: 'LastChangeDate',
    LastChangeDateDesc: 'LastChangeDate desc',
    LastChangeTime: 'LastChangeTime',
    LastChangeTimeDesc: 'LastChangeTime desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBPRelationshipGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBPRelationshipGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBPRelationshipGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBPRelationshipGetSelectEnum = {
    RelationshipNumber: 'RelationshipNumber',
    BusinessPartner1: 'BusinessPartner1',
    BusinessPartner2: 'BusinessPartner2',
    ValidityEndDate: 'ValidityEndDate',
    ValidityStartDate: 'ValidityStartDate',
    IsStandardRelationship: 'IsStandardRelationship',
    RelationshipCategory: 'RelationshipCategory',
    BpRelationshipType: 'BPRelationshipType',
    CreatedByUser: 'CreatedByUser',
    CreationDate: 'CreationDate',
    CreationTime: 'CreationTime',
    LastChangedByUser: 'LastChangedByUser',
    LastChangeDate: 'LastChangeDate',
    LastChangeTime: 'LastChangeTime'
} as const;
export type ABusinessPartnerBusinessPartnerToBPRelationshipGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBPRelationshipGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBPRelationshipGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBuPaIdentificationGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    BpIdentificationType: 'BPIdentificationType',
    BpIdentificationTypeDesc: 'BPIdentificationType desc',
    BpIdentificationNumber: 'BPIdentificationNumber',
    BpIdentificationNumberDesc: 'BPIdentificationNumber desc',
    BpIdnNmbrIssuingInstitute: 'BPIdnNmbrIssuingInstitute',
    BpIdnNmbrIssuingInstituteDesc: 'BPIdnNmbrIssuingInstitute desc',
    BpIdentificationEntryDate: 'BPIdentificationEntryDate',
    BpIdentificationEntryDateDesc: 'BPIdentificationEntryDate desc',
    Country: 'Country',
    CountryDesc: 'Country desc',
    Region: 'Region',
    RegionDesc: 'Region desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBuPaIdentificationGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBuPaIdentificationGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBuPaIdentificationGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBuPaIdentificationGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BpIdentificationType: 'BPIdentificationType',
    BpIdentificationNumber: 'BPIdentificationNumber',
    BpIdnNmbrIssuingInstitute: 'BPIdnNmbrIssuingInstitute',
    BpIdentificationEntryDate: 'BPIdentificationEntryDate',
    Country: 'Country',
    Region: 'Region',
    ValidityStartDate: 'ValidityStartDate',
    ValidityEndDate: 'ValidityEndDate',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ABusinessPartnerBusinessPartnerToBuPaIdentificationGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBuPaIdentificationGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBuPaIdentificationGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBuPaIndustryGetOrderbyEnum = {
    IndustrySector: 'IndustrySector',
    IndustrySectorDesc: 'IndustrySector desc',
    IndustrySystemType: 'IndustrySystemType',
    IndustrySystemTypeDesc: 'IndustrySystemType desc',
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    IsStandardIndustry: 'IsStandardIndustry',
    IsStandardIndustryDesc: 'IsStandardIndustry desc',
    IndustryKeyDescription: 'IndustryKeyDescription',
    IndustryKeyDescriptionDesc: 'IndustryKeyDescription desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBuPaIndustryGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBuPaIndustryGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBuPaIndustryGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBuPaIndustryGetSelectEnum = {
    IndustrySector: 'IndustrySector',
    IndustrySystemType: 'IndustrySystemType',
    BusinessPartner: 'BusinessPartner',
    IsStandardIndustry: 'IsStandardIndustry',
    IndustryKeyDescription: 'IndustryKeyDescription'
} as const;
export type ABusinessPartnerBusinessPartnerToBuPaIndustryGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBuPaIndustryGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBuPaIndustryGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    BpTaxType: 'BPTaxType',
    BpTaxTypeDesc: 'BPTaxType desc',
    BpTaxNumber: 'BPTaxNumber',
    BpTaxNumberDesc: 'BPTaxNumber desc',
    BpTaxLongNumber: 'BPTaxLongNumber',
    BpTaxLongNumberDesc: 'BPTaxLongNumber desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    BpTaxType: 'BPTaxType',
    BpTaxNumber: 'BPTaxNumber',
    BpTaxLongNumber: 'BPTaxLongNumber',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ABusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    AddressUuid: 'AddressUUID',
    AddressUuidDesc: 'AddressUUID desc',
    AdditionalStreetPrefixName: 'AdditionalStreetPrefixName',
    AdditionalStreetPrefixNameDesc: 'AdditionalStreetPrefixName desc',
    AdditionalStreetSuffixName: 'AdditionalStreetSuffixName',
    AdditionalStreetSuffixNameDesc: 'AdditionalStreetSuffixName desc',
    AddressTimeZone: 'AddressTimeZone',
    AddressTimeZoneDesc: 'AddressTimeZone desc',
    CareOfName: 'CareOfName',
    CareOfNameDesc: 'CareOfName desc',
    CityCode: 'CityCode',
    CityCodeDesc: 'CityCode desc',
    CityName: 'CityName',
    CityNameDesc: 'CityName desc',
    CompanyPostalCode: 'CompanyPostalCode',
    CompanyPostalCodeDesc: 'CompanyPostalCode desc',
    Country: 'Country',
    CountryDesc: 'Country desc',
    County: 'County',
    CountyDesc: 'County desc',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceNumberDesc: 'DeliveryServiceNumber desc',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    DeliveryServiceTypeCodeDesc: 'DeliveryServiceTypeCode desc',
    District: 'District',
    DistrictDesc: 'District desc',
    FormOfAddress: 'FormOfAddress',
    FormOfAddressDesc: 'FormOfAddress desc',
    FullName: 'FullName',
    FullNameDesc: 'FullName desc',
    HomeCityName: 'HomeCityName',
    HomeCityNameDesc: 'HomeCityName desc',
    HouseNumber: 'HouseNumber',
    HouseNumberDesc: 'HouseNumber desc',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    HouseNumberSupplementTextDesc: 'HouseNumberSupplementText desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    PoBox: 'POBox',
    PoBoxDesc: 'POBox desc',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCityNameDesc: 'POBoxDeviatingCityName desc',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingCountryDesc: 'POBoxDeviatingCountry desc',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxDeviatingRegionDesc: 'POBoxDeviatingRegion desc',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxIsWithoutNumberDesc: 'POBoxIsWithoutNumber desc',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxLobbyNameDesc: 'POBoxLobbyName desc',
    PoBoxPostalCode: 'POBoxPostalCode',
    PoBoxPostalCodeDesc: 'POBoxPostalCode desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    PostalCode: 'PostalCode',
    PostalCodeDesc: 'PostalCode desc',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    PrfrdCommMediumTypeDesc: 'PrfrdCommMediumType desc',
    Region: 'Region',
    RegionDesc: 'Region desc',
    StreetName: 'StreetName',
    StreetNameDesc: 'StreetName desc',
    StreetPrefixName: 'StreetPrefixName',
    StreetPrefixNameDesc: 'StreetPrefixName desc',
    StreetSuffixName: 'StreetSuffixName',
    StreetSuffixNameDesc: 'StreetSuffixName desc',
    TaxJurisdiction: 'TaxJurisdiction',
    TaxJurisdictionDesc: 'TaxJurisdiction desc',
    TransportZone: 'TransportZone',
    TransportZoneDesc: 'TransportZone desc',
    AddressIdbyExternalSystem: 'AddressIDByExternalSystem',
    AddressIdbyExternalSystemDesc: 'AddressIDByExternalSystem desc',
    CountyCode: 'CountyCode',
    CountyCodeDesc: 'CountyCode desc',
    TownshipCode: 'TownshipCode',
    TownshipCodeDesc: 'TownshipCode desc',
    TownshipName: 'TownshipName',
    TownshipNameDesc: 'TownshipName desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    ValidityStartDate: 'ValidityStartDate',
    ValidityEndDate: 'ValidityEndDate',
    AuthorizationGroup: 'AuthorizationGroup',
    AddressUuid: 'AddressUUID',
    AdditionalStreetPrefixName: 'AdditionalStreetPrefixName',
    AdditionalStreetSuffixName: 'AdditionalStreetSuffixName',
    AddressTimeZone: 'AddressTimeZone',
    CareOfName: 'CareOfName',
    CityCode: 'CityCode',
    CityName: 'CityName',
    CompanyPostalCode: 'CompanyPostalCode',
    Country: 'Country',
    County: 'County',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    District: 'District',
    FormOfAddress: 'FormOfAddress',
    FullName: 'FullName',
    HomeCityName: 'HomeCityName',
    HouseNumber: 'HouseNumber',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    Language: 'Language',
    PoBox: 'POBox',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxPostalCode: 'POBoxPostalCode',
    Person: 'Person',
    PostalCode: 'PostalCode',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    Region: 'Region',
    StreetName: 'StreetName',
    StreetPrefixName: 'StreetPrefixName',
    StreetSuffixName: 'StreetSuffixName',
    TaxJurisdiction: 'TaxJurisdiction',
    TransportZone: 'TransportZone',
    AddressIdbyExternalSystem: 'AddressIDByExternalSystem',
    CountyCode: 'CountyCode',
    TownshipCode: 'TownshipCode',
    TownshipName: 'TownshipName'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetExpandEnum = {
    Star: '*',
    ToAddressUsage: 'to_AddressUsage',
    ToBpAddrDepdntIntlLocNumber: 'to_BPAddrDepdntIntlLocNumber',
    ToBpIntlAddressVersion: 'to_BPIntlAddressVersion',
    ToEmailAddress: 'to_EmailAddress',
    ToFaxNumber: 'to_FaxNumber',
    ToMobilePhoneNumber: 'to_MobilePhoneNumber',
    ToPhoneNumber: 'to_PhoneNumber',
    ToUrlAddress: 'to_URLAddress'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetExpandEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetExpandEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetExpandEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerAliasGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    BpAliasPositionNumber: 'BPAliasPositionNumber',
    BpAliasPositionNumberDesc: 'BPAliasPositionNumber desc',
    BusinessPartnerAliasName: 'BusinessPartnerAliasName',
    BusinessPartnerAliasNameDesc: 'BusinessPartnerAliasName desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerAliasGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerAliasGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerAliasGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerAliasGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BpAliasPositionNumber: 'BPAliasPositionNumber',
    BusinessPartnerAliasName: 'BusinessPartnerAliasName'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerAliasGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerAliasGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerAliasGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    BankIdentification: 'BankIdentification',
    BankIdentificationDesc: 'BankIdentification desc',
    BankCountryKey: 'BankCountryKey',
    BankCountryKeyDesc: 'BankCountryKey desc',
    BankName: 'BankName',
    BankNameDesc: 'BankName desc',
    BankNumber: 'BankNumber',
    BankNumberDesc: 'BankNumber desc',
    SwiftCode: 'SWIFTCode',
    SwiftCodeDesc: 'SWIFTCode desc',
    BankControlKey: 'BankControlKey',
    BankControlKeyDesc: 'BankControlKey desc',
    BankAccountHolderName: 'BankAccountHolderName',
    BankAccountHolderNameDesc: 'BankAccountHolderName desc',
    BankAccountName: 'BankAccountName',
    BankAccountNameDesc: 'BankAccountName desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    Iban: 'IBAN',
    IbanDesc: 'IBAN desc',
    IbanValidityStartDate: 'IBANValidityStartDate',
    IbanValidityStartDateDesc: 'IBANValidityStartDate desc',
    BankAccount: 'BankAccount',
    BankAccountDesc: 'BankAccount desc',
    BankAccountReferenceText: 'BankAccountReferenceText',
    BankAccountReferenceTextDesc: 'BankAccountReferenceText desc',
    CollectionAuthInd: 'CollectionAuthInd',
    CollectionAuthIndDesc: 'CollectionAuthInd desc',
    CityName: 'CityName',
    CityNameDesc: 'CityName desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BankIdentification: 'BankIdentification',
    BankCountryKey: 'BankCountryKey',
    BankName: 'BankName',
    BankNumber: 'BankNumber',
    SwiftCode: 'SWIFTCode',
    BankControlKey: 'BankControlKey',
    BankAccountHolderName: 'BankAccountHolderName',
    BankAccountName: 'BankAccountName',
    ValidityStartDate: 'ValidityStartDate',
    ValidityEndDate: 'ValidityEndDate',
    Iban: 'IBAN',
    IbanValidityStartDate: 'IBANValidityStartDate',
    BankAccount: 'BankAccount',
    BankAccountReferenceText: 'BankAccountReferenceText',
    CollectionAuthInd: 'CollectionAuthInd',
    CityName: 'CityName',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetOrderbyEnum = {
    RelationshipNumber: 'RelationshipNumber',
    RelationshipNumberDesc: 'RelationshipNumber desc',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerCompanyDesc: 'BusinessPartnerCompany desc',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    BusinessPartnerPersonDesc: 'BusinessPartnerPerson desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    IsStandardRelationship: 'IsStandardRelationship',
    IsStandardRelationshipDesc: 'IsStandardRelationship desc',
    RelationshipCategory: 'RelationshipCategory',
    RelationshipCategoryDesc: 'RelationshipCategory desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetSelectEnum = {
    RelationshipNumber: 'RelationshipNumber',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    ValidityEndDate: 'ValidityEndDate',
    ValidityStartDate: 'ValidityStartDate',
    IsStandardRelationship: 'IsStandardRelationship',
    RelationshipCategory: 'RelationshipCategory'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetExpandEnum = {
    Star: '*',
    ToContactAddress: 'to_ContactAddress',
    ToContactRelationship: 'to_ContactRelationship'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetExpandEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetExpandEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetExpandEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerIsVip: 'BusinessPartnerIsVIP',
    TradingPartner: 'TradingPartner',
    FactoryCalendar: 'FactoryCalendar',
    BusinessPartnerOfficeCountry: 'BusinessPartnerOfficeCountry',
    BusinessPartnerOfficeRegion: 'BusinessPartnerOfficeRegion',
    BpRegisteredOfficeName: 'BPRegisteredOfficeName',
    BpBalanceSheetCurrency: 'BPBalanceSheetCurrency',
    BpLastCptlIncrAmtInBalShtCrcy: 'BPLastCptlIncrAmtInBalShtCrcy',
    BpLastCapitalIncreaseYear: 'BPLastCapitalIncreaseYear',
    BpBalanceSheetDisplayType: 'BPBalanceSheetDisplayType',
    BusinessPartnerCitizenship: 'BusinessPartnerCitizenship',
    BpMaritalPropertyRegime: 'BPMaritalPropertyRegime',
    BusinessPartnerIncomeCurrency: 'BusinessPartnerIncomeCurrency',
    BpNumberOfChildren: 'BPNumberOfChildren',
    BpNumberOfHouseholdMembers: 'BPNumberOfHouseholdMembers',
    BpAnnualNetIncAmtInIncomeCrcy: 'BPAnnualNetIncAmtInIncomeCrcy',
    BpMonthlyNetIncAmtInIncomeCrcy: 'BPMonthlyNetIncAmtInIncomeCrcy',
    BpAnnualNetIncomeYear: 'BPAnnualNetIncomeYear',
    BpMonthlyNetIncomeMonth: 'BPMonthlyNetIncomeMonth',
    BpMonthlyNetIncomeYear: 'BPMonthlyNetIncomeYear',
    BpPlaceOfDeathName: 'BPPlaceOfDeathName',
    CustomerIsUnwanted: 'CustomerIsUnwanted',
    UndesirabilityReason: 'UndesirabilityReason',
    UndesirabilityComment: 'UndesirabilityComment',
    LastCustomerContactDate: 'LastCustomerContactDate',
    BpGroupingCharacter: 'BPGroupingCharacter',
    BpLetterSalutation: 'BPLetterSalutation',
    BusinessPartnerTargetGroup: 'BusinessPartnerTargetGroup',
    BusinessPartnerEmployeeGroup: 'BusinessPartnerEmployeeGroup',
    BusinessPartnerIsEmployee: 'BusinessPartnerIsEmployee',
    BpTermnBusRelationsBankDate: 'BPTermnBusRelationsBankDate'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BankKey: 'BankKey',
    BankCountry: 'BankCountry',
    BpMinimumReserve: 'BPMinimumReserve'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerIsBankGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerRatingGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    BusinessPartnerRatingProcedure: 'BusinessPartnerRatingProcedure',
    BusinessPartnerRatingProcedureDesc: 'BusinessPartnerRatingProcedure desc',
    BpRatingValidityEndDate: 'BPRatingValidityEndDate',
    BpRatingValidityEndDateDesc: 'BPRatingValidityEndDate desc',
    BusinessPartnerRatingGrade: 'BusinessPartnerRatingGrade',
    BusinessPartnerRatingGradeDesc: 'BusinessPartnerRatingGrade desc',
    BusinessPartnerRatingTrend: 'BusinessPartnerRatingTrend',
    BusinessPartnerRatingTrendDesc: 'BusinessPartnerRatingTrend desc',
    BpRatingValidityStartDate: 'BPRatingValidityStartDate',
    BpRatingValidityStartDateDesc: 'BPRatingValidityStartDate desc',
    BpRatingCreationDate: 'BPRatingCreationDate',
    BpRatingCreationDateDesc: 'BPRatingCreationDate desc',
    BusinessPartnerRatingComment: 'BusinessPartnerRatingComment',
    BusinessPartnerRatingCommentDesc: 'BusinessPartnerRatingComment desc',
    BusinessPartnerRatingIsAllowed: 'BusinessPartnerRatingIsAllowed',
    BusinessPartnerRatingIsAllowedDesc: 'BusinessPartnerRatingIsAllowed desc',
    BpRatingIsValidOnKeyDate: 'BPRatingIsValidOnKeyDate',
    BpRatingIsValidOnKeyDateDesc: 'BPRatingIsValidOnKeyDate desc',
    BusinessPartnerRatingKeyDate: 'BusinessPartnerRatingKeyDate',
    BusinessPartnerRatingKeyDateDesc: 'BusinessPartnerRatingKeyDate desc',
    BusinessPartnerRatingIsExpired: 'BusinessPartnerRatingIsExpired',
    BusinessPartnerRatingIsExpiredDesc: 'BusinessPartnerRatingIsExpired desc',
    BpRatingLongComment: 'BPRatingLongComment',
    BpRatingLongCommentDesc: 'BPRatingLongComment desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerRatingGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerRatingGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerRatingGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerRatingGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerRatingProcedure: 'BusinessPartnerRatingProcedure',
    BpRatingValidityEndDate: 'BPRatingValidityEndDate',
    BusinessPartnerRatingGrade: 'BusinessPartnerRatingGrade',
    BusinessPartnerRatingTrend: 'BusinessPartnerRatingTrend',
    BpRatingValidityStartDate: 'BPRatingValidityStartDate',
    BpRatingCreationDate: 'BPRatingCreationDate',
    BusinessPartnerRatingComment: 'BusinessPartnerRatingComment',
    BusinessPartnerRatingIsAllowed: 'BusinessPartnerRatingIsAllowed',
    BpRatingIsValidOnKeyDate: 'BPRatingIsValidOnKeyDate',
    BusinessPartnerRatingKeyDate: 'BusinessPartnerRatingKeyDate',
    BusinessPartnerRatingIsExpired: 'BusinessPartnerRatingIsExpired',
    BpRatingLongComment: 'BPRatingLongComment'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerRatingGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerRatingGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerRatingGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerRoleGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    BusinessPartnerRole: 'BusinessPartnerRole',
    BusinessPartnerRoleDesc: 'BusinessPartnerRole desc',
    ValidFrom: 'ValidFrom',
    ValidFromDesc: 'ValidFrom desc',
    ValidTo: 'ValidTo',
    ValidToDesc: 'ValidTo desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerRoleGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerRoleGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerRoleGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerRoleGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerRole: 'BusinessPartnerRole',
    ValidFrom: 'ValidFrom',
    ValidTo: 'ValidTo',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerRoleGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerRoleGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerRoleGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    BpTaxType: 'BPTaxType',
    BpTaxTypeDesc: 'BPTaxType desc',
    BpTaxNumber: 'BPTaxNumber',
    BpTaxNumberDesc: 'BPTaxNumber desc',
    BpTaxLongNumber: 'BPTaxLongNumber',
    BpTaxLongNumberDesc: 'BPTaxLongNumber desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BpTaxType: 'BPTaxType',
    BpTaxNumber: 'BPTaxNumber',
    BpTaxLongNumber: 'BPTaxLongNumber',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerTaxGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToCustomerGetSelectEnum = {
    Customer: 'Customer',
    AuthorizationGroup: 'AuthorizationGroup',
    BillingIsBlockedForCustomer: 'BillingIsBlockedForCustomer',
    CreatedByUser: 'CreatedByUser',
    CreationDate: 'CreationDate',
    CustomerAccountGroup: 'CustomerAccountGroup',
    CustomerClassification: 'CustomerClassification',
    CustomerFullName: 'CustomerFullName',
    BpCustomerFullName: 'BPCustomerFullName',
    CustomerName: 'CustomerName',
    BpCustomerName: 'BPCustomerName',
    DeliveryIsBlocked: 'DeliveryIsBlocked',
    FreeDefinedAttribute01: 'FreeDefinedAttribute01',
    FreeDefinedAttribute02: 'FreeDefinedAttribute02',
    FreeDefinedAttribute03: 'FreeDefinedAttribute03',
    FreeDefinedAttribute04: 'FreeDefinedAttribute04',
    FreeDefinedAttribute05: 'FreeDefinedAttribute05',
    FreeDefinedAttribute06: 'FreeDefinedAttribute06',
    FreeDefinedAttribute07: 'FreeDefinedAttribute07',
    FreeDefinedAttribute08: 'FreeDefinedAttribute08',
    FreeDefinedAttribute09: 'FreeDefinedAttribute09',
    FreeDefinedAttribute10: 'FreeDefinedAttribute10',
    NfPartnerIsNaturalPerson: 'NFPartnerIsNaturalPerson',
    OrderIsBlockedForCustomer: 'OrderIsBlockedForCustomer',
    PostingIsBlocked: 'PostingIsBlocked',
    Supplier: 'Supplier',
    CustomerCorporateGroup: 'CustomerCorporateGroup',
    FiscalAddress: 'FiscalAddress',
    Industry: 'Industry',
    IndustryCode1: 'IndustryCode1',
    IndustryCode2: 'IndustryCode2',
    IndustryCode3: 'IndustryCode3',
    IndustryCode4: 'IndustryCode4',
    IndustryCode5: 'IndustryCode5',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber3: 'InternationalLocationNumber3',
    NielsenRegion: 'NielsenRegion',
    PaymentReason: 'PaymentReason',
    ResponsibleType: 'ResponsibleType',
    TaxNumber1: 'TaxNumber1',
    TaxNumber2: 'TaxNumber2',
    TaxNumber3: 'TaxNumber3',
    TaxNumber4: 'TaxNumber4',
    TaxNumber5: 'TaxNumber5',
    TaxNumberType: 'TaxNumberType',
    VatRegistration: 'VATRegistration',
    DeletionIndicator: 'DeletionIndicator',
    ExpressTrainStationName: 'ExpressTrainStationName',
    TrainStationName: 'TrainStationName',
    CityCode: 'CityCode',
    County: 'County'
} as const;
export type ABusinessPartnerBusinessPartnerToCustomerGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToCustomerGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToCustomerGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToCustomerGetExpandEnum = {
    Star: '*',
    ToCustAddrDepdntExtIdentifier: 'to_CustAddrDepdntExtIdentifier',
    ToCustAddrDepdntInformation: 'to_CustAddrDepdntInformation',
    ToCustomerCompany: 'to_CustomerCompany',
    ToCustomerSalesArea: 'to_CustomerSalesArea',
    ToCustomerTaxGrouping: 'to_CustomerTaxGrouping',
    ToCustomerText: 'to_CustomerText',
    ToCustomerUnloadingPoint: 'to_CustomerUnloadingPoint',
    ToCustUnldgPtAddrDepdntInfo: 'to_CustUnldgPtAddrDepdntInfo'
} as const;
export type ABusinessPartnerBusinessPartnerToCustomerGetExpandEnum = typeof ABusinessPartnerBusinessPartnerToCustomerGetExpandEnum[keyof typeof ABusinessPartnerBusinessPartnerToCustomerGetExpandEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToPaymentCardGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    PaymentCardId: 'PaymentCardID',
    PaymentCardIdDesc: 'PaymentCardID desc',
    PaymentCardType: 'PaymentCardType',
    PaymentCardTypeDesc: 'PaymentCardType desc',
    CardNumber: 'CardNumber',
    CardNumberDesc: 'CardNumber desc',
    IsStandardCard: 'IsStandardCard',
    IsStandardCardDesc: 'IsStandardCard desc',
    CardDescription: 'CardDescription',
    CardDescriptionDesc: 'CardDescription desc',
    ValidityDate: 'ValidityDate',
    ValidityDateDesc: 'ValidityDate desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    CardHolder: 'CardHolder',
    CardHolderDesc: 'CardHolder desc',
    CardIssuingBank: 'CardIssuingBank',
    CardIssuingBankDesc: 'CardIssuingBank desc',
    CardIssueDate: 'CardIssueDate',
    CardIssueDateDesc: 'CardIssueDate desc',
    PaymentCardLock: 'PaymentCardLock',
    PaymentCardLockDesc: 'PaymentCardLock desc',
    MaskedCardNumber: 'MaskedCardNumber',
    MaskedCardNumberDesc: 'MaskedCardNumber desc'
} as const;
export type ABusinessPartnerBusinessPartnerToPaymentCardGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToPaymentCardGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToPaymentCardGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToPaymentCardGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    PaymentCardId: 'PaymentCardID',
    PaymentCardType: 'PaymentCardType',
    CardNumber: 'CardNumber',
    IsStandardCard: 'IsStandardCard',
    CardDescription: 'CardDescription',
    ValidityDate: 'ValidityDate',
    ValidityEndDate: 'ValidityEndDate',
    CardHolder: 'CardHolder',
    CardIssuingBank: 'CardIssuingBank',
    CardIssueDate: 'CardIssueDate',
    PaymentCardLock: 'PaymentCardLock',
    MaskedCardNumber: 'MaskedCardNumber'
} as const;
export type ABusinessPartnerBusinessPartnerToPaymentCardGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToPaymentCardGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToPaymentCardGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToSupplierGetSelectEnum = {
    Supplier: 'Supplier',
    AlternativePayeeAccountNumber: 'AlternativePayeeAccountNumber',
    AuthorizationGroup: 'AuthorizationGroup',
    BusinessPartnerPanNumber: 'BusinessPartnerPanNumber',
    CreatedByUser: 'CreatedByUser',
    CreationDate: 'CreationDate',
    Customer: 'Customer',
    PaymentIsBlockedForSupplier: 'PaymentIsBlockedForSupplier',
    PostingIsBlocked: 'PostingIsBlocked',
    PurchasingIsBlocked: 'PurchasingIsBlocked',
    SupplierAccountGroup: 'SupplierAccountGroup',
    SupplierFullName: 'SupplierFullName',
    SupplierName: 'SupplierName',
    VatRegistration: 'VATRegistration',
    BirthDate: 'BirthDate',
    ConcatenatedInternationalLocNo: 'ConcatenatedInternationalLocNo',
    DeletionIndicator: 'DeletionIndicator',
    FiscalAddress: 'FiscalAddress',
    Industry: 'Industry',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber3: 'InternationalLocationNumber3',
    IsNaturalPerson: 'IsNaturalPerson',
    PaymentReason: 'PaymentReason',
    ResponsibleType: 'ResponsibleType',
    SuplrQltyInProcmtCertfnValidTo: 'SuplrQltyInProcmtCertfnValidTo',
    SuplrQualityManagementSystem: 'SuplrQualityManagementSystem',
    SupplierCorporateGroup: 'SupplierCorporateGroup',
    SupplierProcurementBlock: 'SupplierProcurementBlock',
    TaxNumber1: 'TaxNumber1',
    TaxNumber2: 'TaxNumber2',
    TaxNumber3: 'TaxNumber3',
    TaxNumber4: 'TaxNumber4',
    TaxNumber5: 'TaxNumber5',
    TaxNumberResponsible: 'TaxNumberResponsible',
    TaxNumberType: 'TaxNumberType',
    SuplrProofOfDelivRlvtCode: 'SuplrProofOfDelivRlvtCode',
    BrTaxIsSplit: 'BR_TaxIsSplit',
    DataExchangeInstructionKey: 'DataExchangeInstructionKey'
} as const;
export type ABusinessPartnerBusinessPartnerToSupplierGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToSupplierGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToSupplierGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToSupplierGetExpandEnum = {
    Star: '*',
    ToSupplierCompany: 'to_SupplierCompany',
    ToSupplierPurchasingOrg: 'to_SupplierPurchasingOrg',
    ToSupplierText: 'to_SupplierText'
} as const;
export type ABusinessPartnerBusinessPartnerToSupplierGetExpandEnum = typeof ABusinessPartnerBusinessPartnerToSupplierGetExpandEnum[keyof typeof ABusinessPartnerBusinessPartnerToSupplierGetExpandEnum];
/**
 * @export
 */
export const ABusinessPartnerGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    AcademicTitle: 'AcademicTitle',
    AcademicTitleDesc: 'AcademicTitle desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    BusinessPartnerCategory: 'BusinessPartnerCategory',
    BusinessPartnerCategoryDesc: 'BusinessPartnerCategory desc',
    BusinessPartnerFullName: 'BusinessPartnerFullName',
    BusinessPartnerFullNameDesc: 'BusinessPartnerFullName desc',
    BusinessPartnerGrouping: 'BusinessPartnerGrouping',
    BusinessPartnerGroupingDesc: 'BusinessPartnerGrouping desc',
    BusinessPartnerName: 'BusinessPartnerName',
    BusinessPartnerNameDesc: 'BusinessPartnerName desc',
    BusinessPartnerUuid: 'BusinessPartnerUUID',
    BusinessPartnerUuidDesc: 'BusinessPartnerUUID desc',
    CorrespondenceLanguage: 'CorrespondenceLanguage',
    CorrespondenceLanguageDesc: 'CorrespondenceLanguage desc',
    CreatedByUser: 'CreatedByUser',
    CreatedByUserDesc: 'CreatedByUser desc',
    CreationDate: 'CreationDate',
    CreationDateDesc: 'CreationDate desc',
    CreationTime: 'CreationTime',
    CreationTimeDesc: 'CreationTime desc',
    FirstName: 'FirstName',
    FirstNameDesc: 'FirstName desc',
    FormOfAddress: 'FormOfAddress',
    FormOfAddressDesc: 'FormOfAddress desc',
    Industry: 'Industry',
    IndustryDesc: 'Industry desc',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber1Desc: 'InternationalLocationNumber1 desc',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber2Desc: 'InternationalLocationNumber2 desc',
    IsFemale: 'IsFemale',
    IsFemaleDesc: 'IsFemale desc',
    IsMale: 'IsMale',
    IsMaleDesc: 'IsMale desc',
    IsNaturalPerson: 'IsNaturalPerson',
    IsNaturalPersonDesc: 'IsNaturalPerson desc',
    IsSexUnknown: 'IsSexUnknown',
    IsSexUnknownDesc: 'IsSexUnknown desc',
    GenderCodeName: 'GenderCodeName',
    GenderCodeNameDesc: 'GenderCodeName desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    LastChangeDate: 'LastChangeDate',
    LastChangeDateDesc: 'LastChangeDate desc',
    LastChangeTime: 'LastChangeTime',
    LastChangeTimeDesc: 'LastChangeTime desc',
    LastChangedByUser: 'LastChangedByUser',
    LastChangedByUserDesc: 'LastChangedByUser desc',
    LastName: 'LastName',
    LastNameDesc: 'LastName desc',
    LegalForm: 'LegalForm',
    LegalFormDesc: 'LegalForm desc',
    OrganizationBpName1: 'OrganizationBPName1',
    OrganizationBpName1Desc: 'OrganizationBPName1 desc',
    OrganizationBpName2: 'OrganizationBPName2',
    OrganizationBpName2Desc: 'OrganizationBPName2 desc',
    OrganizationBpName3: 'OrganizationBPName3',
    OrganizationBpName3Desc: 'OrganizationBPName3 desc',
    OrganizationBpName4: 'OrganizationBPName4',
    OrganizationBpName4Desc: 'OrganizationBPName4 desc',
    OrganizationFoundationDate: 'OrganizationFoundationDate',
    OrganizationFoundationDateDesc: 'OrganizationFoundationDate desc',
    OrganizationLiquidationDate: 'OrganizationLiquidationDate',
    OrganizationLiquidationDateDesc: 'OrganizationLiquidationDate desc',
    SearchTerm1: 'SearchTerm1',
    SearchTerm1Desc: 'SearchTerm1 desc',
    SearchTerm2: 'SearchTerm2',
    SearchTerm2Desc: 'SearchTerm2 desc',
    AdditionalLastName: 'AdditionalLastName',
    AdditionalLastNameDesc: 'AdditionalLastName desc',
    BirthDate: 'BirthDate',
    BirthDateDesc: 'BirthDate desc',
    BusinessPartnerBirthDateStatus: 'BusinessPartnerBirthDateStatus',
    BusinessPartnerBirthDateStatusDesc: 'BusinessPartnerBirthDateStatus desc',
    BusinessPartnerBirthplaceName: 'BusinessPartnerBirthplaceName',
    BusinessPartnerBirthplaceNameDesc: 'BusinessPartnerBirthplaceName desc',
    BusinessPartnerDeathDate: 'BusinessPartnerDeathDate',
    BusinessPartnerDeathDateDesc: 'BusinessPartnerDeathDate desc',
    BusinessPartnerIsBlocked: 'BusinessPartnerIsBlocked',
    BusinessPartnerIsBlockedDesc: 'BusinessPartnerIsBlocked desc',
    BusinessPartnerType: 'BusinessPartnerType',
    BusinessPartnerTypeDesc: 'BusinessPartnerType desc',
    ETag: 'ETag',
    ETagDesc: 'ETag desc',
    GroupBusinessPartnerName1: 'GroupBusinessPartnerName1',
    GroupBusinessPartnerName1Desc: 'GroupBusinessPartnerName1 desc',
    GroupBusinessPartnerName2: 'GroupBusinessPartnerName2',
    GroupBusinessPartnerName2Desc: 'GroupBusinessPartnerName2 desc',
    IndependentAddressId: 'IndependentAddressID',
    IndependentAddressIdDesc: 'IndependentAddressID desc',
    InternationalLocationNumber3: 'InternationalLocationNumber3',
    InternationalLocationNumber3Desc: 'InternationalLocationNumber3 desc',
    MiddleName: 'MiddleName',
    MiddleNameDesc: 'MiddleName desc',
    NameCountry: 'NameCountry',
    NameCountryDesc: 'NameCountry desc',
    NameFormat: 'NameFormat',
    NameFormatDesc: 'NameFormat desc',
    PersonFullName: 'PersonFullName',
    PersonFullNameDesc: 'PersonFullName desc',
    PersonNumber: 'PersonNumber',
    PersonNumberDesc: 'PersonNumber desc',
    IsMarkedForArchiving: 'IsMarkedForArchiving',
    IsMarkedForArchivingDesc: 'IsMarkedForArchiving desc',
    BusinessPartnerIdbyExtSystem: 'BusinessPartnerIDByExtSystem',
    BusinessPartnerIdbyExtSystemDesc: 'BusinessPartnerIDByExtSystem desc',
    BusinessPartnerPrintFormat: 'BusinessPartnerPrintFormat',
    BusinessPartnerPrintFormatDesc: 'BusinessPartnerPrintFormat desc',
    BusinessPartnerOccupation: 'BusinessPartnerOccupation',
    BusinessPartnerOccupationDesc: 'BusinessPartnerOccupation desc',
    BusPartMaritalStatus: 'BusPartMaritalStatus',
    BusPartMaritalStatusDesc: 'BusPartMaritalStatus desc',
    BusPartNationality: 'BusPartNationality',
    BusPartNationalityDesc: 'BusPartNationality desc',
    BusinessPartnerBirthName: 'BusinessPartnerBirthName',
    BusinessPartnerBirthNameDesc: 'BusinessPartnerBirthName desc',
    BusinessPartnerSupplementName: 'BusinessPartnerSupplementName',
    BusinessPartnerSupplementNameDesc: 'BusinessPartnerSupplementName desc',
    NaturalPersonEmployerName: 'NaturalPersonEmployerName',
    NaturalPersonEmployerNameDesc: 'NaturalPersonEmployerName desc',
    LastNamePrefix: 'LastNamePrefix',
    LastNamePrefixDesc: 'LastNamePrefix desc',
    LastNameSecondPrefix: 'LastNameSecondPrefix',
    LastNameSecondPrefixDesc: 'LastNameSecondPrefix desc',
    Initials: 'Initials',
    InitialsDesc: 'Initials desc',
    BpDataControllerIsNotRequired: 'BPDataControllerIsNotRequired',
    BpDataControllerIsNotRequiredDesc: 'BPDataControllerIsNotRequired desc',
    TradingPartner: 'TradingPartner',
    TradingPartnerDesc: 'TradingPartner desc'
} as const;
export type ABusinessPartnerGetOrderbyEnum = typeof ABusinessPartnerGetOrderbyEnum[keyof typeof ABusinessPartnerGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    Customer: 'Customer',
    Supplier: 'Supplier',
    AcademicTitle: 'AcademicTitle',
    AuthorizationGroup: 'AuthorizationGroup',
    BusinessPartnerCategory: 'BusinessPartnerCategory',
    BusinessPartnerFullName: 'BusinessPartnerFullName',
    BusinessPartnerGrouping: 'BusinessPartnerGrouping',
    BusinessPartnerName: 'BusinessPartnerName',
    BusinessPartnerUuid: 'BusinessPartnerUUID',
    CorrespondenceLanguage: 'CorrespondenceLanguage',
    CreatedByUser: 'CreatedByUser',
    CreationDate: 'CreationDate',
    CreationTime: 'CreationTime',
    FirstName: 'FirstName',
    FormOfAddress: 'FormOfAddress',
    Industry: 'Industry',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    IsFemale: 'IsFemale',
    IsMale: 'IsMale',
    IsNaturalPerson: 'IsNaturalPerson',
    IsSexUnknown: 'IsSexUnknown',
    GenderCodeName: 'GenderCodeName',
    Language: 'Language',
    LastChangeDate: 'LastChangeDate',
    LastChangeTime: 'LastChangeTime',
    LastChangedByUser: 'LastChangedByUser',
    LastName: 'LastName',
    LegalForm: 'LegalForm',
    OrganizationBpName1: 'OrganizationBPName1',
    OrganizationBpName2: 'OrganizationBPName2',
    OrganizationBpName3: 'OrganizationBPName3',
    OrganizationBpName4: 'OrganizationBPName4',
    OrganizationFoundationDate: 'OrganizationFoundationDate',
    OrganizationLiquidationDate: 'OrganizationLiquidationDate',
    SearchTerm1: 'SearchTerm1',
    SearchTerm2: 'SearchTerm2',
    AdditionalLastName: 'AdditionalLastName',
    BirthDate: 'BirthDate',
    BusinessPartnerBirthDateStatus: 'BusinessPartnerBirthDateStatus',
    BusinessPartnerBirthplaceName: 'BusinessPartnerBirthplaceName',
    BusinessPartnerDeathDate: 'BusinessPartnerDeathDate',
    BusinessPartnerIsBlocked: 'BusinessPartnerIsBlocked',
    BusinessPartnerType: 'BusinessPartnerType',
    ETag: 'ETag',
    GroupBusinessPartnerName1: 'GroupBusinessPartnerName1',
    GroupBusinessPartnerName2: 'GroupBusinessPartnerName2',
    IndependentAddressId: 'IndependentAddressID',
    InternationalLocationNumber3: 'InternationalLocationNumber3',
    MiddleName: 'MiddleName',
    NameCountry: 'NameCountry',
    NameFormat: 'NameFormat',
    PersonFullName: 'PersonFullName',
    PersonNumber: 'PersonNumber',
    IsMarkedForArchiving: 'IsMarkedForArchiving',
    BusinessPartnerIdbyExtSystem: 'BusinessPartnerIDByExtSystem',
    BusinessPartnerPrintFormat: 'BusinessPartnerPrintFormat',
    BusinessPartnerOccupation: 'BusinessPartnerOccupation',
    BusPartMaritalStatus: 'BusPartMaritalStatus',
    BusPartNationality: 'BusPartNationality',
    BusinessPartnerBirthName: 'BusinessPartnerBirthName',
    BusinessPartnerSupplementName: 'BusinessPartnerSupplementName',
    NaturalPersonEmployerName: 'NaturalPersonEmployerName',
    LastNamePrefix: 'LastNamePrefix',
    LastNameSecondPrefix: 'LastNameSecondPrefix',
    Initials: 'Initials',
    BpDataControllerIsNotRequired: 'BPDataControllerIsNotRequired',
    TradingPartner: 'TradingPartner'
} as const;
export type ABusinessPartnerGetSelectEnum = typeof ABusinessPartnerGetSelectEnum[keyof typeof ABusinessPartnerGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerGetExpandEnum = {
    Star: '*',
    ToAddressIndependentEmail: 'to_AddressIndependentEmail',
    ToAddressIndependentFax: 'to_AddressIndependentFax',
    ToAddressIndependentMobile: 'to_AddressIndependentMobile',
    ToAddressIndependentPhone: 'to_AddressIndependentPhone',
    ToAddressIndependentWebsite: 'to_AddressIndependentWebsite',
    ToBpCreditWorthiness: 'to_BPCreditWorthiness',
    ToBpDataController: 'to_BPDataController',
    ToBpEmployment: 'to_BPEmployment',
    ToBpFinServicesReporting: 'to_BPFinServicesReporting',
    ToBpFiscalYearInformation: 'to_BPFiscalYearInformation',
    ToBpRelationship: 'to_BPRelationship',
    ToBuPaIdentification: 'to_BuPaIdentification',
    ToBuPaIndustry: 'to_BuPaIndustry',
    ToBusinessPartner: 'to_BusinessPartner',
    ToBusinessPartnerAddress: 'to_BusinessPartnerAddress',
    ToBusinessPartnerAlias: 'to_BusinessPartnerAlias',
    ToBusinessPartnerBank: 'to_BusinessPartnerBank',
    ToBusinessPartnerContact: 'to_BusinessPartnerContact',
    ToBusinessPartnerIsBank: 'to_BusinessPartnerIsBank',
    ToBusinessPartnerRating: 'to_BusinessPartnerRating',
    ToBusinessPartnerRole: 'to_BusinessPartnerRole',
    ToBusinessPartnerTax: 'to_BusinessPartnerTax',
    ToBusPartAddrDepdntTaxNmbr: 'to_BusPartAddrDepdntTaxNmbr',
    ToCustomer: 'to_Customer',
    ToPaymentCard: 'to_PaymentCard',
    ToSupplier: 'to_Supplier'
} as const;
export type ABusinessPartnerGetExpandEnum = typeof ABusinessPartnerGetExpandEnum[keyof typeof ABusinessPartnerGetExpandEnum];
