/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERABPDataControllerType,
  APIBUSINESSPARTNERABPDataControllerTypeCreate,
  APIBUSINESSPARTNERABPDataControllerTypeUpdate,
  CollectionOfABPDataControllerType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERABPDataControllerTypeFromJSON,
    APIBUSINESSPARTNERABPDataControllerTypeToJSON,
    APIBUSINESSPARTNERABPDataControllerTypeCreateFromJSON,
    APIBUSINESSPARTNERABPDataControllerTypeCreateToJSON,
    APIBUSINESSPARTNERABPDataControllerTypeUpdateFromJSON,
    APIBUSINESSPARTNERABPDataControllerTypeUpdateToJSON,
    CollectionOfABPDataControllerTypeFromJSON,
    CollectionOfABPDataControllerTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetRequest {
    businessPartner: string;
    dataController: string;
    purposeForPersonalData: string;
    $select?: Set<ABPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetSelectEnum>;
}

export interface ABPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatchRequest {
    businessPartner: string;
    dataController: string;
    purposeForPersonalData: string;
    aPIBUSINESSPARTNERABPDataControllerTypeUpdate: APIBUSINESSPARTNERABPDataControllerTypeUpdate;
}

export interface ABPDataControllerGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPDataControllerGetOrderbyEnum>;
    $select?: Set<ABPDataControllerGetSelectEnum>;
}

export interface ABPDataControllerPostRequest {
    aPIBUSINESSPARTNERABPDataControllerTypeCreate: APIBUSINESSPARTNERABPDataControllerTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBPDataControllerGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBPDataControllerGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBPDataControllerGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBPDataControllerPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABPDataControllerTypeCreate: APIBUSINESSPARTNERABPDataControllerTypeCreate;
}

/**
 * 
 */
export class BusinessPartnerDataControllerApi extends runtime.BaseAPI {

    /**
     * Get entity from A_BPDataController by key
     */
    async aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetRaw(requestParameters: ABPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPDataControllerType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet.');
        }

        if (requestParameters.dataController === null || requestParameters.dataController === undefined) {
            throw new runtime.RequiredError('dataController','Required parameter requestParameters.dataController was null or undefined when calling aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet.');
        }

        if (requestParameters.purposeForPersonalData === null || requestParameters.purposeForPersonalData === undefined) {
            throw new runtime.RequiredError('purposeForPersonalData','Required parameter requestParameters.purposeForPersonalData was null or undefined when calling aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPDataController(BusinessPartner='{BusinessPartner}',DataController='{DataController}',PurposeForPersonalData='{PurposeForPersonalData}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"DataController"}}`, encodeURIComponent(String(requestParameters.dataController))).replace(`{${"PurposeForPersonalData"}}`, encodeURIComponent(String(requestParameters.purposeForPersonalData))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPDataControllerTypeFromJSON(jsonValue));
    }

    /**
     * Get entity from A_BPDataController by key
     */
    async aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet(requestParameters: ABPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPDataControllerType> {
        const response = await this.aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a business partner data controller identified by key fields BusinessPartner, DataController, BPDataPurposeName..
     * Updates a business partner data controller.
     */
    async aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatchRaw(requestParameters: ABPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch.');
        }

        if (requestParameters.dataController === null || requestParameters.dataController === undefined) {
            throw new runtime.RequiredError('dataController','Required parameter requestParameters.dataController was null or undefined when calling aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch.');
        }

        if (requestParameters.purposeForPersonalData === null || requestParameters.purposeForPersonalData === undefined) {
            throw new runtime.RequiredError('purposeForPersonalData','Required parameter requestParameters.purposeForPersonalData was null or undefined when calling aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPDataControllerTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERABPDataControllerTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPDataControllerTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERABPDataControllerTypeUpdate was null or undefined when calling aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPDataController(BusinessPartner='{BusinessPartner}',DataController='{DataController}',PurposeForPersonalData='{PurposeForPersonalData}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"DataController"}}`, encodeURIComponent(String(requestParameters.dataController))).replace(`{${"PurposeForPersonalData"}}`, encodeURIComponent(String(requestParameters.purposeForPersonalData))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPDataControllerTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERABPDataControllerTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a business partner data controller identified by key fields BusinessPartner, DataController, BPDataPurposeName..
     * Updates a business partner data controller.
     */
    async aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch(requestParameters: ABPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves business partner data controllers of all the available records linked to business partners in the system.
     * Retrieves business partner data controllers by using key fields.
     */
    async aBPDataControllerGetRaw(requestParameters: ABPDataControllerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPDataControllerType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPDataController`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPDataControllerTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner data controllers of all the available records linked to business partners in the system.
     * Retrieves business partner data controllers by using key fields.
     */
    async aBPDataControllerGet(requestParameters: ABPDataControllerGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPDataControllerType> {
        const response = await this.aBPDataControllerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new business partner data controller linked to an existing business partner.
     * Creates a new business partner data controller.
     */
    async aBPDataControllerPostRaw(requestParameters: ABPDataControllerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPDataControllerType>> {
        if (requestParameters.aPIBUSINESSPARTNERABPDataControllerTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPDataControllerTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPDataControllerTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPDataControllerTypeCreate was null or undefined when calling aBPDataControllerPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPDataController`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPDataControllerTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPDataControllerTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPDataControllerTypeFromJSON(jsonValue));
    }

    /**
     * Creates a new business partner data controller linked to an existing business partner.
     * Creates a new business partner data controller.
     */
    async aBPDataControllerPost(requestParameters: ABPDataControllerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPDataControllerType> {
        const response = await this.aBPDataControllerPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner data controllers of all the available records linked to business partners in the system.
     * Retrieves business partner data controllers by using key fields.
     */
    async aBusinessPartnerBusinessPartnerToBPDataControllerGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBPDataControllerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPDataControllerType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBPDataControllerGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BPDataController`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPDataControllerTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner data controllers of all the available records linked to business partners in the system.
     * Retrieves business partner data controllers by using key fields.
     */
    async aBusinessPartnerBusinessPartnerToBPDataControllerGet(requestParameters: ABusinessPartnerBusinessPartnerToBPDataControllerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPDataControllerType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBPDataControllerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new business partner data controller linked to an existing business partner.
     * Creates a new business partner data controller.
     */
    async aBusinessPartnerBusinessPartnerToBPDataControllerPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBPDataControllerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPDataControllerType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBPDataControllerPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPDataControllerTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPDataControllerTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPDataControllerTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPDataControllerTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBPDataControllerPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BPDataController`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPDataControllerTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPDataControllerTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPDataControllerTypeFromJSON(jsonValue));
    }

    /**
     * Creates a new business partner data controller linked to an existing business partner.
     * Creates a new business partner data controller.
     */
    async aBusinessPartnerBusinessPartnerToBPDataControllerPost(requestParameters: ABusinessPartnerBusinessPartnerToBPDataControllerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPDataControllerType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBPDataControllerPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    DataController: 'DataController',
    PurposeForPersonalData: 'PurposeForPersonalData',
    DataControlAssignmentStatus: 'DataControlAssignmentStatus',
    BpDataControllerIsDerived: 'BPDataControllerIsDerived',
    PurposeDerived: 'PurposeDerived',
    PurposeType: 'PurposeType',
    BusinessPurposeFlag: 'BusinessPurposeFlag'
} as const;
export type ABPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetSelectEnum = typeof ABPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetSelectEnum[keyof typeof ABPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetSelectEnum];
/**
 * @export
 */
export const ABPDataControllerGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    DataController: 'DataController',
    DataControllerDesc: 'DataController desc',
    PurposeForPersonalData: 'PurposeForPersonalData',
    PurposeForPersonalDataDesc: 'PurposeForPersonalData desc',
    DataControlAssignmentStatus: 'DataControlAssignmentStatus',
    DataControlAssignmentStatusDesc: 'DataControlAssignmentStatus desc',
    BpDataControllerIsDerived: 'BPDataControllerIsDerived',
    BpDataControllerIsDerivedDesc: 'BPDataControllerIsDerived desc',
    PurposeDerived: 'PurposeDerived',
    PurposeDerivedDesc: 'PurposeDerived desc',
    PurposeType: 'PurposeType',
    PurposeTypeDesc: 'PurposeType desc',
    BusinessPurposeFlag: 'BusinessPurposeFlag',
    BusinessPurposeFlagDesc: 'BusinessPurposeFlag desc'
} as const;
export type ABPDataControllerGetOrderbyEnum = typeof ABPDataControllerGetOrderbyEnum[keyof typeof ABPDataControllerGetOrderbyEnum];
/**
 * @export
 */
export const ABPDataControllerGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    DataController: 'DataController',
    PurposeForPersonalData: 'PurposeForPersonalData',
    DataControlAssignmentStatus: 'DataControlAssignmentStatus',
    BpDataControllerIsDerived: 'BPDataControllerIsDerived',
    PurposeDerived: 'PurposeDerived',
    PurposeType: 'PurposeType',
    BusinessPurposeFlag: 'BusinessPurposeFlag'
} as const;
export type ABPDataControllerGetSelectEnum = typeof ABPDataControllerGetSelectEnum[keyof typeof ABPDataControllerGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBPDataControllerGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    DataController: 'DataController',
    DataControllerDesc: 'DataController desc',
    PurposeForPersonalData: 'PurposeForPersonalData',
    PurposeForPersonalDataDesc: 'PurposeForPersonalData desc',
    DataControlAssignmentStatus: 'DataControlAssignmentStatus',
    DataControlAssignmentStatusDesc: 'DataControlAssignmentStatus desc',
    BpDataControllerIsDerived: 'BPDataControllerIsDerived',
    BpDataControllerIsDerivedDesc: 'BPDataControllerIsDerived desc',
    PurposeDerived: 'PurposeDerived',
    PurposeDerivedDesc: 'PurposeDerived desc',
    PurposeType: 'PurposeType',
    PurposeTypeDesc: 'PurposeType desc',
    BusinessPurposeFlag: 'BusinessPurposeFlag',
    BusinessPurposeFlagDesc: 'BusinessPurposeFlag desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBPDataControllerGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBPDataControllerGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBPDataControllerGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBPDataControllerGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    DataController: 'DataController',
    PurposeForPersonalData: 'PurposeForPersonalData',
    DataControlAssignmentStatus: 'DataControlAssignmentStatus',
    BpDataControllerIsDerived: 'BPDataControllerIsDerived',
    PurposeDerived: 'PurposeDerived',
    PurposeType: 'PurposeType',
    BusinessPurposeFlag: 'BusinessPurposeFlag'
} as const;
export type ABusinessPartnerBusinessPartnerToBPDataControllerGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBPDataControllerGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBPDataControllerGetSelectEnum];
