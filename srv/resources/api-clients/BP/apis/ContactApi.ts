/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERABPContactToAddressType,
  APIBUSINESSPARTNERABPContactToAddressTypeCreate,
  APIBUSINESSPARTNERABPContactToFuncAndDeptType,
  APIBUSINESSPARTNERABusinessPartnerContactType,
  APIBUSINESSPARTNERABusinessPartnerContactTypeCreate,
  APIBUSINESSPARTNERABusinessPartnerContactTypeUpdate,
  CollectionOfABPContactToAddressType,
  CollectionOfABusinessPartnerContactType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERABPContactToAddressTypeFromJSON,
    APIBUSINESSPARTNERABPContactToAddressTypeToJSON,
    APIBUSINESSPARTNERABPContactToAddressTypeCreateFromJSON,
    APIBUSINESSPARTNERABPContactToAddressTypeCreateToJSON,
    APIBUSINESSPARTNERABPContactToFuncAndDeptTypeFromJSON,
    APIBUSINESSPARTNERABPContactToFuncAndDeptTypeToJSON,
    APIBUSINESSPARTNERABusinessPartnerContactTypeFromJSON,
    APIBUSINESSPARTNERABusinessPartnerContactTypeToJSON,
    APIBUSINESSPARTNERABusinessPartnerContactTypeCreateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerContactTypeCreateToJSON,
    APIBUSINESSPARTNERABusinessPartnerContactTypeUpdateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerContactTypeUpdateToJSON,
    CollectionOfABPContactToAddressTypeFromJSON,
    CollectionOfABPContactToAddressTypeToJSON,
    CollectionOfABusinessPartnerContactTypeFromJSON,
    CollectionOfABusinessPartnerContactTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetSelectEnum>;
    $expand?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetExpandEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerContactPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate: APIBUSINESSPARTNERABusinessPartnerContactTypeCreate;
}

export interface ABusinessPartnerContactGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerContactGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerContactGetSelectEnum>;
    $expand?: Set<ABusinessPartnerContactGetExpandEnum>;
}

export interface ABusinessPartnerContactPostRequest {
    aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate: APIBUSINESSPARTNERABusinessPartnerContactTypeCreate;
}

export interface ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateDeleteRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
}

export interface ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    $select?: Set<ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetSelectEnum>;
    $expand?: Set<ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetExpandEnum>;
}

export interface ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatchRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    aPIBUSINESSPARTNERABusinessPartnerContactTypeUpdate: APIBUSINESSPARTNERABusinessPartnerContactTypeUpdate;
}

export interface ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetSelectEnum>;
    $expand?: Set<ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetExpandEnum>;
}

export interface ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPostRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    aPIBUSINESSPARTNERABPContactToAddressTypeCreate: APIBUSINESSPARTNERABPContactToAddressTypeCreate;
}

export interface ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    $select?: Set<ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetSelectEnum>;
}

/**
 * 
 */
export class ContactApi extends runtime.BaseAPI {

    /**
     * Retrieves business partner contact data fields of all the available records in the system.
     * Retrieves business partner contact data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerContactGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerContactType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerContactGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerContact`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerContactTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner contact data fields of all the available records in the system.
     * Retrieves business partner contact data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerContactGet(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerContactType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerContactGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new business partner contact relationship data of type \'BUR001\' to the business partner.
     * Creates new business partner contact relationship data of type \'BUR001\'
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerContactPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerContactPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerContactType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerContactPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerContactPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerContact`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerContactTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerContactTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new business partner contact relationship data of type \'BUR001\' to the business partner.
     * Creates new business partner contact relationship data of type \'BUR001\'
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerContactPost(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerContactPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerContactType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerContactPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner contact data fields of all the available records in the system.
     * Retrieves business partner contact data.
     */
    async aBusinessPartnerContactGetRaw(requestParameters: ABusinessPartnerContactGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerContactType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerContact`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerContactTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner contact data fields of all the available records in the system.
     * Retrieves business partner contact data.
     */
    async aBusinessPartnerContactGet(requestParameters: ABusinessPartnerContactGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerContactType> {
        const response = await this.aBusinessPartnerContactGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new business partner contact relationship data of type \'BUR001\' to the business partner.
     * Creates new business partner contact relationship data of type \'BUR001\'
     */
    async aBusinessPartnerContactPostRaw(requestParameters: ABusinessPartnerContactPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerContactType>> {
        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate was null or undefined when calling aBusinessPartnerContactPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerContact`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerContactTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerContactTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerContactTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new business partner contact relationship data of type \'BUR001\' to the business partner.
     * Creates new business partner contact relationship data of type \'BUR001\'
     */
    async aBusinessPartnerContactPost(requestParameters: ABusinessPartnerContactPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerContactType> {
        const response = await this.aBusinessPartnerContactPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes business partner contact data by RelationshipNumber, BusinessPartnerCompany, BusinessPartnerPerson and ValidityEndDate
     * Removes the contact person relationship assigned to the business partner by using the key fields.
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateDeleteRaw(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateDelete.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateDelete.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateDelete.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerContact(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate})`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes business partner contact data by RelationshipNumber, BusinessPartnerCompany, BusinessPartnerPerson and ValidityEndDate
     * Removes the contact person relationship assigned to the business partner by using the key fields.
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateDelete(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves business partner contact data using relationship number, BusinessPartnerCompany, BusinessPartnerPerson and ValidityEndDate
     * Retrieves business partner contact data by using key fields.
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetRaw(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerContactType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGet.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGet.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGet.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerContact(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate})`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerContactTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner contact data using relationship number, BusinessPartnerCompany, BusinessPartnerPerson and ValidityEndDate
     * Retrieves business partner contact data by using key fields.
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGet(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerContactType> {
        const response = await this.aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates business partner contact data by RelationshipNumber, BusinessPartnerCompany, BusinessPartnerPerson and ValidityEndDate
     * Updates business partner contact data.
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatchRaw(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatch.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatch.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatch.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerContactTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerContactTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerContactTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerContactTypeUpdate was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerContact(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate})`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerContactTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerContactTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates business partner contact data by RelationshipNumber, BusinessPartnerCompany, BusinessPartnerPerson and ValidityEndDate
     * Updates business partner contact data.
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatch(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all the workplace address records linked to all the business partner contact records in the system.
     * Retrieves workplace address records linked to business partner contact.
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetRaw(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPContactToAddressType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGet.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGet.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGet.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerContact(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate})/to_ContactAddress`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPContactToAddressTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the workplace address records linked to all the business partner contact records in the system.
     * Retrieves workplace address records linked to business partner contact.
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGet(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPContactToAddressType> {
        const response = await this.aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add new entity to related to_ContactAddress
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPostRaw(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPContactToAddressType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPost.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPost.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPost.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPContactToAddressTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPContactToAddressTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPContactToAddressTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPContactToAddressTypeCreate was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerContact(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate})/to_ContactAddress`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPContactToAddressTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPContactToAddressTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPContactToAddressTypeFromJSON(jsonValue));
    }

    /**
     * Add new entity to related to_ContactAddress
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPost(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPContactToAddressType> {
        const response = await this.aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the contact person department and function data linked to all business partner contact records in the system
     * Retrieves contact person department and function data.
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetRaw(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPContactToFuncAndDeptType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGet.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGet.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGet.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerContact(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate})/to_ContactRelationship`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPContactToFuncAndDeptTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the contact person department and function data linked to all business partner contact records in the system
     * Retrieves contact person department and function data.
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGet(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPContactToFuncAndDeptType> {
        const response = await this.aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetOrderbyEnum = {
    RelationshipNumber: 'RelationshipNumber',
    RelationshipNumberDesc: 'RelationshipNumber desc',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerCompanyDesc: 'BusinessPartnerCompany desc',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    BusinessPartnerPersonDesc: 'BusinessPartnerPerson desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    IsStandardRelationship: 'IsStandardRelationship',
    IsStandardRelationshipDesc: 'IsStandardRelationship desc',
    RelationshipCategory: 'RelationshipCategory',
    RelationshipCategoryDesc: 'RelationshipCategory desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetSelectEnum = {
    RelationshipNumber: 'RelationshipNumber',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    ValidityEndDate: 'ValidityEndDate',
    ValidityStartDate: 'ValidityStartDate',
    IsStandardRelationship: 'IsStandardRelationship',
    RelationshipCategory: 'RelationshipCategory'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetExpandEnum = {
    Star: '*',
    ToContactAddress: 'to_ContactAddress',
    ToContactRelationship: 'to_ContactRelationship'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetExpandEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetExpandEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerContactGetExpandEnum];
/**
 * @export
 */
export const ABusinessPartnerContactGetOrderbyEnum = {
    RelationshipNumber: 'RelationshipNumber',
    RelationshipNumberDesc: 'RelationshipNumber desc',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerCompanyDesc: 'BusinessPartnerCompany desc',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    BusinessPartnerPersonDesc: 'BusinessPartnerPerson desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    IsStandardRelationship: 'IsStandardRelationship',
    IsStandardRelationshipDesc: 'IsStandardRelationship desc',
    RelationshipCategory: 'RelationshipCategory',
    RelationshipCategoryDesc: 'RelationshipCategory desc'
} as const;
export type ABusinessPartnerContactGetOrderbyEnum = typeof ABusinessPartnerContactGetOrderbyEnum[keyof typeof ABusinessPartnerContactGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerContactGetSelectEnum = {
    RelationshipNumber: 'RelationshipNumber',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    ValidityEndDate: 'ValidityEndDate',
    ValidityStartDate: 'ValidityStartDate',
    IsStandardRelationship: 'IsStandardRelationship',
    RelationshipCategory: 'RelationshipCategory'
} as const;
export type ABusinessPartnerContactGetSelectEnum = typeof ABusinessPartnerContactGetSelectEnum[keyof typeof ABusinessPartnerContactGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerContactGetExpandEnum = {
    Star: '*',
    ToContactAddress: 'to_ContactAddress',
    ToContactRelationship: 'to_ContactRelationship'
} as const;
export type ABusinessPartnerContactGetExpandEnum = typeof ABusinessPartnerContactGetExpandEnum[keyof typeof ABusinessPartnerContactGetExpandEnum];
/**
 * @export
 */
export const ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetSelectEnum = {
    RelationshipNumber: 'RelationshipNumber',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    ValidityEndDate: 'ValidityEndDate',
    ValidityStartDate: 'ValidityStartDate',
    IsStandardRelationship: 'IsStandardRelationship',
    RelationshipCategory: 'RelationshipCategory'
} as const;
export type ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetSelectEnum = typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetSelectEnum[keyof typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetExpandEnum = {
    Star: '*',
    ToContactAddress: 'to_ContactAddress',
    ToContactRelationship: 'to_ContactRelationship'
} as const;
export type ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetExpandEnum = typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetExpandEnum[keyof typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetExpandEnum];
/**
 * @export
 */
export const ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetOrderbyEnum = {
    RelationshipNumber: 'RelationshipNumber',
    RelationshipNumberDesc: 'RelationshipNumber desc',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerCompanyDesc: 'BusinessPartnerCompany desc',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    BusinessPartnerPersonDesc: 'BusinessPartnerPerson desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    AddressNumber: 'AddressNumber',
    AddressNumberDesc: 'AddressNumber desc',
    AdditionalStreetPrefixName: 'AdditionalStreetPrefixName',
    AdditionalStreetPrefixNameDesc: 'AdditionalStreetPrefixName desc',
    AdditionalStreetSuffixName: 'AdditionalStreetSuffixName',
    AdditionalStreetSuffixNameDesc: 'AdditionalStreetSuffixName desc',
    AddressTimeZone: 'AddressTimeZone',
    AddressTimeZoneDesc: 'AddressTimeZone desc',
    CareOfName: 'CareOfName',
    CareOfNameDesc: 'CareOfName desc',
    CityCode: 'CityCode',
    CityCodeDesc: 'CityCode desc',
    CityName: 'CityName',
    CityNameDesc: 'CityName desc',
    CompanyPostalCode: 'CompanyPostalCode',
    CompanyPostalCodeDesc: 'CompanyPostalCode desc',
    Country: 'Country',
    CountryDesc: 'Country desc',
    County: 'County',
    CountyDesc: 'County desc',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceNumberDesc: 'DeliveryServiceNumber desc',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    DeliveryServiceTypeCodeDesc: 'DeliveryServiceTypeCode desc',
    District: 'District',
    DistrictDesc: 'District desc',
    FormOfAddress: 'FormOfAddress',
    FormOfAddressDesc: 'FormOfAddress desc',
    FullName: 'FullName',
    FullNameDesc: 'FullName desc',
    HomeCityName: 'HomeCityName',
    HomeCityNameDesc: 'HomeCityName desc',
    HouseNumber: 'HouseNumber',
    HouseNumberDesc: 'HouseNumber desc',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    HouseNumberSupplementTextDesc: 'HouseNumberSupplementText desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    PoBox: 'POBox',
    PoBoxDesc: 'POBox desc',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCityNameDesc: 'POBoxDeviatingCityName desc',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingCountryDesc: 'POBoxDeviatingCountry desc',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxDeviatingRegionDesc: 'POBoxDeviatingRegion desc',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxIsWithoutNumberDesc: 'POBoxIsWithoutNumber desc',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxLobbyNameDesc: 'POBoxLobbyName desc',
    PoBoxPostalCode: 'POBoxPostalCode',
    PoBoxPostalCodeDesc: 'POBoxPostalCode desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    PostalCode: 'PostalCode',
    PostalCodeDesc: 'PostalCode desc',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    PrfrdCommMediumTypeDesc: 'PrfrdCommMediumType desc',
    Region: 'Region',
    RegionDesc: 'Region desc',
    StreetName: 'StreetName',
    StreetNameDesc: 'StreetName desc',
    StreetPrefixName: 'StreetPrefixName',
    StreetPrefixNameDesc: 'StreetPrefixName desc',
    StreetSuffixName: 'StreetSuffixName',
    StreetSuffixNameDesc: 'StreetSuffixName desc',
    TaxJurisdiction: 'TaxJurisdiction',
    TaxJurisdictionDesc: 'TaxJurisdiction desc',
    TransportZone: 'TransportZone',
    TransportZoneDesc: 'TransportZone desc',
    AddressRepresentationCode: 'AddressRepresentationCode',
    AddressRepresentationCodeDesc: 'AddressRepresentationCode desc',
    ContactPersonBuilding: 'ContactPersonBuilding',
    ContactPersonBuildingDesc: 'ContactPersonBuilding desc',
    ContactPersonPrfrdCommMedium: 'ContactPersonPrfrdCommMedium',
    ContactPersonPrfrdCommMediumDesc: 'ContactPersonPrfrdCommMedium desc',
    ContactRelationshipDepartment: 'ContactRelationshipDepartment',
    ContactRelationshipDepartmentDesc: 'ContactRelationshipDepartment desc',
    ContactRelationshipFunction: 'ContactRelationshipFunction',
    ContactRelationshipFunctionDesc: 'ContactRelationshipFunction desc',
    CorrespondenceShortName: 'CorrespondenceShortName',
    CorrespondenceShortNameDesc: 'CorrespondenceShortName desc',
    Floor: 'Floor',
    FloorDesc: 'Floor desc',
    InhouseMail: 'InhouseMail',
    InhouseMailDesc: 'InhouseMail desc',
    IsDefaultAddress: 'IsDefaultAddress',
    IsDefaultAddressDesc: 'IsDefaultAddress desc',
    RoomNumber: 'RoomNumber',
    RoomNumberDesc: 'RoomNumber desc'
} as const;
export type ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetOrderbyEnum = typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetOrderbyEnum[keyof typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetSelectEnum = {
    RelationshipNumber: 'RelationshipNumber',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    ValidityEndDate: 'ValidityEndDate',
    AddressId: 'AddressID',
    AddressNumber: 'AddressNumber',
    AdditionalStreetPrefixName: 'AdditionalStreetPrefixName',
    AdditionalStreetSuffixName: 'AdditionalStreetSuffixName',
    AddressTimeZone: 'AddressTimeZone',
    CareOfName: 'CareOfName',
    CityCode: 'CityCode',
    CityName: 'CityName',
    CompanyPostalCode: 'CompanyPostalCode',
    Country: 'Country',
    County: 'County',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    District: 'District',
    FormOfAddress: 'FormOfAddress',
    FullName: 'FullName',
    HomeCityName: 'HomeCityName',
    HouseNumber: 'HouseNumber',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    Language: 'Language',
    PoBox: 'POBox',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxPostalCode: 'POBoxPostalCode',
    Person: 'Person',
    PostalCode: 'PostalCode',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    Region: 'Region',
    StreetName: 'StreetName',
    StreetPrefixName: 'StreetPrefixName',
    StreetSuffixName: 'StreetSuffixName',
    TaxJurisdiction: 'TaxJurisdiction',
    TransportZone: 'TransportZone',
    AddressRepresentationCode: 'AddressRepresentationCode',
    ContactPersonBuilding: 'ContactPersonBuilding',
    ContactPersonPrfrdCommMedium: 'ContactPersonPrfrdCommMedium',
    ContactRelationshipDepartment: 'ContactRelationshipDepartment',
    ContactRelationshipFunction: 'ContactRelationshipFunction',
    CorrespondenceShortName: 'CorrespondenceShortName',
    Floor: 'Floor',
    InhouseMail: 'InhouseMail',
    IsDefaultAddress: 'IsDefaultAddress',
    RoomNumber: 'RoomNumber'
} as const;
export type ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetSelectEnum = typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetSelectEnum[keyof typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetExpandEnum = {
    Star: '*',
    ToEmailAddress: 'to_EmailAddress',
    ToFaxNumber: 'to_FaxNumber',
    ToMobilePhoneNumber: 'to_MobilePhoneNumber',
    ToPhoneNumber: 'to_PhoneNumber',
    ToUrlAddress: 'to_URLAddress'
} as const;
export type ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetExpandEnum = typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetExpandEnum[keyof typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetExpandEnum];
/**
 * @export
 */
export const ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetSelectEnum = {
    RelationshipNumber: 'RelationshipNumber',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    ValidityEndDate: 'ValidityEndDate',
    ContactPersonAuthorityType: 'ContactPersonAuthorityType',
    ContactPersonDepartment: 'ContactPersonDepartment',
    ContactPersonDepartmentName: 'ContactPersonDepartmentName',
    ContactPersonFunction: 'ContactPersonFunction',
    ContactPersonFunctionName: 'ContactPersonFunctionName',
    ContactPersonRemarkText: 'ContactPersonRemarkText',
    ContactPersonVipType: 'ContactPersonVIPType',
    EmailAddress: 'EmailAddress',
    FaxNumber: 'FaxNumber',
    FaxNumberExtension: 'FaxNumberExtension',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberExtension: 'PhoneNumberExtension',
    RelationshipCategory: 'RelationshipCategory'
} as const;
export type ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetSelectEnum = typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetSelectEnum[keyof typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetSelectEnum];
