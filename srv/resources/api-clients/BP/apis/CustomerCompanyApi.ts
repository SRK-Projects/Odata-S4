/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERACustomerCompanyTextType,
  APIBUSINESSPARTNERACustomerCompanyTextTypeCreate,
  APIBUSINESSPARTNERACustomerCompanyType,
  APIBUSINESSPARTNERACustomerCompanyTypeCreate,
  APIBUSINESSPARTNERACustomerCompanyTypeUpdate,
  APIBUSINESSPARTNERACustomerDunningType,
  APIBUSINESSPARTNERACustomerDunningTypeCreate,
  APIBUSINESSPARTNERACustomerWithHoldingTaxType,
  APIBUSINESSPARTNERACustomerWithHoldingTaxTypeCreate,
  CollectionOfACustomerCompanyTextType,
  CollectionOfACustomerCompanyType,
  CollectionOfACustomerDunningType,
  CollectionOfACustomerWithHoldingTaxType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERACustomerCompanyTextTypeFromJSON,
    APIBUSINESSPARTNERACustomerCompanyTextTypeToJSON,
    APIBUSINESSPARTNERACustomerCompanyTextTypeCreateFromJSON,
    APIBUSINESSPARTNERACustomerCompanyTextTypeCreateToJSON,
    APIBUSINESSPARTNERACustomerCompanyTypeFromJSON,
    APIBUSINESSPARTNERACustomerCompanyTypeToJSON,
    APIBUSINESSPARTNERACustomerCompanyTypeCreateFromJSON,
    APIBUSINESSPARTNERACustomerCompanyTypeCreateToJSON,
    APIBUSINESSPARTNERACustomerCompanyTypeUpdateFromJSON,
    APIBUSINESSPARTNERACustomerCompanyTypeUpdateToJSON,
    APIBUSINESSPARTNERACustomerDunningTypeFromJSON,
    APIBUSINESSPARTNERACustomerDunningTypeToJSON,
    APIBUSINESSPARTNERACustomerDunningTypeCreateFromJSON,
    APIBUSINESSPARTNERACustomerDunningTypeCreateToJSON,
    APIBUSINESSPARTNERACustomerWithHoldingTaxTypeFromJSON,
    APIBUSINESSPARTNERACustomerWithHoldingTaxTypeToJSON,
    APIBUSINESSPARTNERACustomerWithHoldingTaxTypeCreateFromJSON,
    APIBUSINESSPARTNERACustomerWithHoldingTaxTypeCreateToJSON,
    CollectionOfACustomerCompanyTextTypeFromJSON,
    CollectionOfACustomerCompanyTextTypeToJSON,
    CollectionOfACustomerCompanyTypeFromJSON,
    CollectionOfACustomerCompanyTypeToJSON,
    CollectionOfACustomerDunningTypeFromJSON,
    CollectionOfACustomerDunningTypeToJSON,
    CollectionOfACustomerWithHoldingTaxTypeFromJSON,
    CollectionOfACustomerWithHoldingTaxTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGetRequest {
    customer: string;
    companyCode: string;
    $select?: Set<ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGetSelectEnum>;
    $expand?: Set<ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGetExpandEnum>;
}

export interface ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodePatchRequest {
    customer: string;
    companyCode: string;
    aPIBUSINESSPARTNERACustomerCompanyTypeUpdate: APIBUSINESSPARTNERACustomerCompanyTypeUpdate;
}

export interface ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetRequest {
    customer: string;
    companyCode: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum>;
    $select?: Set<ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetSelectEnum>;
}

export interface ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostRequest {
    customer: string;
    companyCode: string;
    aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate: APIBUSINESSPARTNERACustomerCompanyTextTypeCreate;
}

export interface ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetRequest {
    customer: string;
    companyCode: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetOrderbyEnum>;
    $select?: Set<ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetSelectEnum>;
}

export interface ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPostRequest {
    customer: string;
    companyCode: string;
    aPIBUSINESSPARTNERACustomerDunningTypeCreate: APIBUSINESSPARTNERACustomerDunningTypeCreate;
}

export interface ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGetRequest {
    customer: string;
    companyCode: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGetOrderbyEnum>;
    $select?: Set<ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGetSelectEnum>;
}

export interface ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxPostRequest {
    customer: string;
    companyCode: string;
    aPIBUSINESSPARTNERACustomerWithHoldingTaxTypeCreate: APIBUSINESSPARTNERACustomerWithHoldingTaxTypeCreate;
}

export interface ACustomerCompanyGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCompanyGetOrderbyEnum>;
    $select?: Set<ACustomerCompanyGetSelectEnum>;
    $expand?: Set<ACustomerCompanyGetExpandEnum>;
}

export interface ACustomerCompanyPostRequest {
    aPIBUSINESSPARTNERACustomerCompanyTypeCreate: APIBUSINESSPARTNERACustomerCompanyTypeCreate;
}

export interface ACustomerCustomerToCustomerCompanyGetRequest {
    customer: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCustomerToCustomerCompanyGetOrderbyEnum>;
    $select?: Set<ACustomerCustomerToCustomerCompanyGetSelectEnum>;
    $expand?: Set<ACustomerCustomerToCustomerCompanyGetExpandEnum>;
}

export interface ACustomerCustomerToCustomerCompanyPostRequest {
    customer: string;
    aPIBUSINESSPARTNERACustomerCompanyTypeCreate: APIBUSINESSPARTNERACustomerCompanyTypeCreate;
}

/**
 * 
 */
export class CustomerCompanyApi extends runtime.BaseAPI {

    /**
     * Retrieves customer company data by key fields such as customer and company code.
     * Retrieves customer company data by using key fields.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGetRaw(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerCompanyType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompany(Customer='{Customer}',CompanyCode='{CompanyCode}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerCompanyTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer company data by key fields such as customer and company code.
     * Retrieves customer company data by using key fields.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGet(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerCompanyType> {
        const response = await this.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates company code data linked to the customer by customer and company code.
     * Updates company code data linked to the customer.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodePatchRaw(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodePatch.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodePatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerCompanyTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERACustomerCompanyTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerCompanyTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerCompanyTypeUpdate was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompany(Customer='{Customer}',CompanyCode='{CompanyCode}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerCompanyTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerCompanyTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates company code data linked to the customer by customer and company code.
     * Updates company code data linked to the customer.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodePatch(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodePatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all the customer company text records attached to customer company in the system.
     * Retrieves customer company text records attached to company data.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetRaw(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerCompanyTextType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompany(Customer='{Customer}',CompanyCode='{CompanyCode}')/to_CompanyText`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerCompanyTextTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the customer company text records attached to customer company in the system.
     * Retrieves customer company text records attached to company data.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerCompanyTextType> {
        const response = await this.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates text data linked to customer company.
     * Creates customer company text data.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostRaw(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerCompanyTextType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompany(Customer='{Customer}',CompanyCode='{CompanyCode}')/to_CompanyText`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerCompanyTextTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerCompanyTextTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerCompanyTextTypeFromJSON(jsonValue));
    }

    /**
     * Creates text data linked to customer company.
     * Creates customer company text data.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerCompanyTextType> {
        const response = await this.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the dunning records attached to customer company in the system.
     * Retrieves dunning records attached to customer company.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetRaw(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerDunningType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompany(Customer='{Customer}',CompanyCode='{CompanyCode}')/to_CustomerDunning`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerDunningTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the dunning records attached to customer company in the system.
     * Retrieves dunning records attached to customer company.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGet(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerDunningType> {
        const response = await this.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns a new dunning record to a customer company code.
     * Creates new dunning record attached to customer company.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPostRaw(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerDunningType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPost.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerDunningTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerDunningTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerDunningTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerDunningTypeCreate was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompany(Customer='{Customer}',CompanyCode='{CompanyCode}')/to_CustomerDunning`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerDunningTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerDunningTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerDunningTypeFromJSON(jsonValue));
    }

    /**
     * Assigns a new dunning record to a customer company code.
     * Creates new dunning record attached to customer company.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPost(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerDunningType> {
        const response = await this.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the withholding tax records attached to customer company in the system.
     * Retrieves customer withholding tax records attached to customer company.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGetRaw(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerWithHoldingTaxType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompany(Customer='{Customer}',CompanyCode='{CompanyCode}')/to_WithHoldingTax`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerWithHoldingTaxTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the withholding tax records attached to customer company in the system.
     * Retrieves customer withholding tax records attached to customer company.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGet(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerWithHoldingTaxType> {
        const response = await this.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates customer withholding tax record linked to customer company.
     * Creates new customer withholding tax record.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxPostRaw(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerWithHoldingTaxType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxPost.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerWithHoldingTaxTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerWithHoldingTaxTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerWithHoldingTaxTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerWithHoldingTaxTypeCreate was null or undefined when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompany(Customer='{Customer}',CompanyCode='{CompanyCode}')/to_WithHoldingTax`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerWithHoldingTaxTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerWithHoldingTaxTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerWithHoldingTaxTypeFromJSON(jsonValue));
    }

    /**
     * Creates customer withholding tax record linked to customer company.
     * Creates new customer withholding tax record.
     */
    async aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxPost(requestParameters: ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerWithHoldingTaxType> {
        const response = await this.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves customer company data fields of all the available records in the system linked to customer.
     * Retrieves customer company data.
     */
    async aCustomerCompanyGetRaw(requestParameters: ACustomerCompanyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerCompanyType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompany`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerCompanyTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer company data fields of all the available records in the system linked to customer.
     * Retrieves customer company data.
     */
    async aCustomerCompanyGet(requestParameters: ACustomerCompanyGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerCompanyType> {
        const response = await this.aCustomerCompanyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns company code data to a customer. A customer can be assigned to multiple company records.
     * Creates new company code data linked to the customer.
     */
    async aCustomerCompanyPostRaw(requestParameters: ACustomerCompanyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerCompanyType>> {
        if (requestParameters.aPIBUSINESSPARTNERACustomerCompanyTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerCompanyTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerCompanyTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerCompanyTypeCreate was null or undefined when calling aCustomerCompanyPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerCompany`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerCompanyTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerCompanyTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerCompanyTypeFromJSON(jsonValue));
    }

    /**
     * Assigns company code data to a customer. A customer can be assigned to multiple company records.
     * Creates new company code data linked to the customer.
     */
    async aCustomerCompanyPost(requestParameters: ACustomerCompanyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerCompanyType> {
        const response = await this.aCustomerCompanyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves customer company data fields of all the available records in the system linked to customer.
     * Retrieves customer company data.
     */
    async aCustomerCustomerToCustomerCompanyGetRaw(requestParameters: ACustomerCustomerToCustomerCompanyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerCompanyType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustomerCompanyGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustomerCompany`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerCompanyTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer company data fields of all the available records in the system linked to customer.
     * Retrieves customer company data.
     */
    async aCustomerCustomerToCustomerCompanyGet(requestParameters: ACustomerCustomerToCustomerCompanyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerCompanyType> {
        const response = await this.aCustomerCustomerToCustomerCompanyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns company code data to a customer. A customer can be assigned to multiple company records.
     * Creates new company code data linked to the customer.
     */
    async aCustomerCustomerToCustomerCompanyPostRaw(requestParameters: ACustomerCustomerToCustomerCompanyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerCompanyType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustomerCompanyPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerCompanyTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerCompanyTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerCompanyTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerCompanyTypeCreate was null or undefined when calling aCustomerCustomerToCustomerCompanyPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustomerCompany`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerCompanyTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerCompanyTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerCompanyTypeFromJSON(jsonValue));
    }

    /**
     * Assigns company code data to a customer. A customer can be assigned to multiple company records.
     * Creates new company code data linked to the customer.
     */
    async aCustomerCustomerToCustomerCompanyPost(requestParameters: ACustomerCustomerToCustomerCompanyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerCompanyType> {
        const response = await this.aCustomerCustomerToCustomerCompanyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGetSelectEnum = {
    Customer: 'Customer',
    CompanyCode: 'CompanyCode',
    AparToleranceGroup: 'APARToleranceGroup',
    AccountByCustomer: 'AccountByCustomer',
    AccountingClerk: 'AccountingClerk',
    AccountingClerkFaxNumber: 'AccountingClerkFaxNumber',
    AccountingClerkInternetAddress: 'AccountingClerkInternetAddress',
    AccountingClerkPhoneNumber: 'AccountingClerkPhoneNumber',
    AlternativePayerAccount: 'AlternativePayerAccount',
    AuthorizationGroup: 'AuthorizationGroup',
    CollectiveInvoiceVariant: 'CollectiveInvoiceVariant',
    CustomerAccountNote: 'CustomerAccountNote',
    CustomerHeadOffice: 'CustomerHeadOffice',
    CustomerSupplierClearingIsUsed: 'CustomerSupplierClearingIsUsed',
    HouseBank: 'HouseBank',
    InterestCalculationCode: 'InterestCalculationCode',
    InterestCalculationDate: 'InterestCalculationDate',
    IntrstCalcFrequencyInMonths: 'IntrstCalcFrequencyInMonths',
    IsToBeLocallyProcessed: 'IsToBeLocallyProcessed',
    ItemIsToBePaidSeparately: 'ItemIsToBePaidSeparately',
    LayoutSortingRule: 'LayoutSortingRule',
    PaymentBlockingReason: 'PaymentBlockingReason',
    PaymentMethodsList: 'PaymentMethodsList',
    PaymentReason: 'PaymentReason',
    PaymentTerms: 'PaymentTerms',
    PaytAdviceIsSentbyEdi: 'PaytAdviceIsSentbyEDI',
    PhysicalInventoryBlockInd: 'PhysicalInventoryBlockInd',
    ReconciliationAccount: 'ReconciliationAccount',
    RecordPaymentHistoryIndicator: 'RecordPaymentHistoryIndicator',
    UserAtCustomer: 'UserAtCustomer',
    DeletionIndicator: 'DeletionIndicator',
    CashPlanningGroup: 'CashPlanningGroup',
    KnownOrNegotiatedLeave: 'KnownOrNegotiatedLeave',
    ValueAdjustmentKey: 'ValueAdjustmentKey',
    CustomerAccountGroup: 'CustomerAccountGroup'
} as const;
export type ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGetSelectEnum = typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGetSelectEnum[keyof typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGetSelectEnum];
/**
 * @export
 */
export const ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGetExpandEnum = {
    Star: '*',
    ToCompanyText: 'to_CompanyText',
    ToCustomerDunning: 'to_CustomerDunning',
    ToWithHoldingTax: 'to_WithHoldingTax'
} as const;
export type ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGetExpandEnum = typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGetExpandEnum[keyof typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeGetExpandEnum];
/**
 * @export
 */
export const ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    LongTextId: 'LongTextID',
    LongTextIdDesc: 'LongTextID desc'
} as const;
export type ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum = typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum[keyof typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetSelectEnum = {
    Customer: 'Customer',
    CompanyCode: 'CompanyCode',
    Language: 'Language',
    LongTextId: 'LongTextID',
    LongText: 'LongText'
} as const;
export type ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetSelectEnum = typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetSelectEnum[keyof typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetSelectEnum];
/**
 * @export
 */
export const ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    DunningArea: 'DunningArea',
    DunningAreaDesc: 'DunningArea desc',
    DunningBlock: 'DunningBlock',
    DunningBlockDesc: 'DunningBlock desc',
    DunningLevel: 'DunningLevel',
    DunningLevelDesc: 'DunningLevel desc',
    DunningProcedure: 'DunningProcedure',
    DunningProcedureDesc: 'DunningProcedure desc',
    DunningRecipient: 'DunningRecipient',
    DunningRecipientDesc: 'DunningRecipient desc',
    LastDunnedOn: 'LastDunnedOn',
    LastDunnedOnDesc: 'LastDunnedOn desc',
    LegDunningProcedureOn: 'LegDunningProcedureOn',
    LegDunningProcedureOnDesc: 'LegDunningProcedureOn desc',
    DunningClerk: 'DunningClerk',
    DunningClerkDesc: 'DunningClerk desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    CustomerAccountGroup: 'CustomerAccountGroup',
    CustomerAccountGroupDesc: 'CustomerAccountGroup desc'
} as const;
export type ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetOrderbyEnum = typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetOrderbyEnum[keyof typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetSelectEnum = {
    Customer: 'Customer',
    CompanyCode: 'CompanyCode',
    DunningArea: 'DunningArea',
    DunningBlock: 'DunningBlock',
    DunningLevel: 'DunningLevel',
    DunningProcedure: 'DunningProcedure',
    DunningRecipient: 'DunningRecipient',
    LastDunnedOn: 'LastDunnedOn',
    LegDunningProcedureOn: 'LegDunningProcedureOn',
    DunningClerk: 'DunningClerk',
    AuthorizationGroup: 'AuthorizationGroup',
    CustomerAccountGroup: 'CustomerAccountGroup'
} as const;
export type ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetSelectEnum = typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetSelectEnum[keyof typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCustomerDunningGetSelectEnum];
/**
 * @export
 */
export const ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    WithholdingTaxType: 'WithholdingTaxType',
    WithholdingTaxTypeDesc: 'WithholdingTaxType desc',
    WithholdingTaxCode: 'WithholdingTaxCode',
    WithholdingTaxCodeDesc: 'WithholdingTaxCode desc',
    WithholdingTaxAgent: 'WithholdingTaxAgent',
    WithholdingTaxAgentDesc: 'WithholdingTaxAgent desc',
    ObligationDateBegin: 'ObligationDateBegin',
    ObligationDateBeginDesc: 'ObligationDateBegin desc',
    ObligationDateEnd: 'ObligationDateEnd',
    ObligationDateEndDesc: 'ObligationDateEnd desc',
    WithholdingTaxNumber: 'WithholdingTaxNumber',
    WithholdingTaxNumberDesc: 'WithholdingTaxNumber desc',
    WithholdingTaxCertificate: 'WithholdingTaxCertificate',
    WithholdingTaxCertificateDesc: 'WithholdingTaxCertificate desc',
    WithholdingTaxExmptPercent: 'WithholdingTaxExmptPercent',
    WithholdingTaxExmptPercentDesc: 'WithholdingTaxExmptPercent desc',
    ExemptionDateBegin: 'ExemptionDateBegin',
    ExemptionDateBeginDesc: 'ExemptionDateBegin desc',
    ExemptionDateEnd: 'ExemptionDateEnd',
    ExemptionDateEndDesc: 'ExemptionDateEnd desc',
    ExemptionReason: 'ExemptionReason',
    ExemptionReasonDesc: 'ExemptionReason desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGetOrderbyEnum = typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGetOrderbyEnum[keyof typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGetSelectEnum = {
    Customer: 'Customer',
    CompanyCode: 'CompanyCode',
    WithholdingTaxType: 'WithholdingTaxType',
    WithholdingTaxCode: 'WithholdingTaxCode',
    WithholdingTaxAgent: 'WithholdingTaxAgent',
    ObligationDateBegin: 'ObligationDateBegin',
    ObligationDateEnd: 'ObligationDateEnd',
    WithholdingTaxNumber: 'WithholdingTaxNumber',
    WithholdingTaxCertificate: 'WithholdingTaxCertificate',
    WithholdingTaxExmptPercent: 'WithholdingTaxExmptPercent',
    ExemptionDateBegin: 'ExemptionDateBegin',
    ExemptionDateEnd: 'ExemptionDateEnd',
    ExemptionReason: 'ExemptionReason',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGetSelectEnum = typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGetSelectEnum[keyof typeof ACustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToWithHoldingTaxGetSelectEnum];
/**
 * @export
 */
export const ACustomerCompanyGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    AparToleranceGroup: 'APARToleranceGroup',
    AparToleranceGroupDesc: 'APARToleranceGroup desc',
    AccountByCustomer: 'AccountByCustomer',
    AccountByCustomerDesc: 'AccountByCustomer desc',
    AccountingClerk: 'AccountingClerk',
    AccountingClerkDesc: 'AccountingClerk desc',
    AccountingClerkFaxNumber: 'AccountingClerkFaxNumber',
    AccountingClerkFaxNumberDesc: 'AccountingClerkFaxNumber desc',
    AccountingClerkInternetAddress: 'AccountingClerkInternetAddress',
    AccountingClerkInternetAddressDesc: 'AccountingClerkInternetAddress desc',
    AccountingClerkPhoneNumber: 'AccountingClerkPhoneNumber',
    AccountingClerkPhoneNumberDesc: 'AccountingClerkPhoneNumber desc',
    AlternativePayerAccount: 'AlternativePayerAccount',
    AlternativePayerAccountDesc: 'AlternativePayerAccount desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    CollectiveInvoiceVariant: 'CollectiveInvoiceVariant',
    CollectiveInvoiceVariantDesc: 'CollectiveInvoiceVariant desc',
    CustomerAccountNote: 'CustomerAccountNote',
    CustomerAccountNoteDesc: 'CustomerAccountNote desc',
    CustomerHeadOffice: 'CustomerHeadOffice',
    CustomerHeadOfficeDesc: 'CustomerHeadOffice desc',
    CustomerSupplierClearingIsUsed: 'CustomerSupplierClearingIsUsed',
    CustomerSupplierClearingIsUsedDesc: 'CustomerSupplierClearingIsUsed desc',
    HouseBank: 'HouseBank',
    HouseBankDesc: 'HouseBank desc',
    InterestCalculationCode: 'InterestCalculationCode',
    InterestCalculationCodeDesc: 'InterestCalculationCode desc',
    InterestCalculationDate: 'InterestCalculationDate',
    InterestCalculationDateDesc: 'InterestCalculationDate desc',
    IntrstCalcFrequencyInMonths: 'IntrstCalcFrequencyInMonths',
    IntrstCalcFrequencyInMonthsDesc: 'IntrstCalcFrequencyInMonths desc',
    IsToBeLocallyProcessed: 'IsToBeLocallyProcessed',
    IsToBeLocallyProcessedDesc: 'IsToBeLocallyProcessed desc',
    ItemIsToBePaidSeparately: 'ItemIsToBePaidSeparately',
    ItemIsToBePaidSeparatelyDesc: 'ItemIsToBePaidSeparately desc',
    LayoutSortingRule: 'LayoutSortingRule',
    LayoutSortingRuleDesc: 'LayoutSortingRule desc',
    PaymentBlockingReason: 'PaymentBlockingReason',
    PaymentBlockingReasonDesc: 'PaymentBlockingReason desc',
    PaymentMethodsList: 'PaymentMethodsList',
    PaymentMethodsListDesc: 'PaymentMethodsList desc',
    PaymentReason: 'PaymentReason',
    PaymentReasonDesc: 'PaymentReason desc',
    PaymentTerms: 'PaymentTerms',
    PaymentTermsDesc: 'PaymentTerms desc',
    PaytAdviceIsSentbyEdi: 'PaytAdviceIsSentbyEDI',
    PaytAdviceIsSentbyEdiDesc: 'PaytAdviceIsSentbyEDI desc',
    PhysicalInventoryBlockInd: 'PhysicalInventoryBlockInd',
    PhysicalInventoryBlockIndDesc: 'PhysicalInventoryBlockInd desc',
    ReconciliationAccount: 'ReconciliationAccount',
    ReconciliationAccountDesc: 'ReconciliationAccount desc',
    RecordPaymentHistoryIndicator: 'RecordPaymentHistoryIndicator',
    RecordPaymentHistoryIndicatorDesc: 'RecordPaymentHistoryIndicator desc',
    UserAtCustomer: 'UserAtCustomer',
    UserAtCustomerDesc: 'UserAtCustomer desc',
    DeletionIndicator: 'DeletionIndicator',
    DeletionIndicatorDesc: 'DeletionIndicator desc',
    CashPlanningGroup: 'CashPlanningGroup',
    CashPlanningGroupDesc: 'CashPlanningGroup desc',
    KnownOrNegotiatedLeave: 'KnownOrNegotiatedLeave',
    KnownOrNegotiatedLeaveDesc: 'KnownOrNegotiatedLeave desc',
    ValueAdjustmentKey: 'ValueAdjustmentKey',
    ValueAdjustmentKeyDesc: 'ValueAdjustmentKey desc',
    CustomerAccountGroup: 'CustomerAccountGroup',
    CustomerAccountGroupDesc: 'CustomerAccountGroup desc'
} as const;
export type ACustomerCompanyGetOrderbyEnum = typeof ACustomerCompanyGetOrderbyEnum[keyof typeof ACustomerCompanyGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCompanyGetSelectEnum = {
    Customer: 'Customer',
    CompanyCode: 'CompanyCode',
    AparToleranceGroup: 'APARToleranceGroup',
    AccountByCustomer: 'AccountByCustomer',
    AccountingClerk: 'AccountingClerk',
    AccountingClerkFaxNumber: 'AccountingClerkFaxNumber',
    AccountingClerkInternetAddress: 'AccountingClerkInternetAddress',
    AccountingClerkPhoneNumber: 'AccountingClerkPhoneNumber',
    AlternativePayerAccount: 'AlternativePayerAccount',
    AuthorizationGroup: 'AuthorizationGroup',
    CollectiveInvoiceVariant: 'CollectiveInvoiceVariant',
    CustomerAccountNote: 'CustomerAccountNote',
    CustomerHeadOffice: 'CustomerHeadOffice',
    CustomerSupplierClearingIsUsed: 'CustomerSupplierClearingIsUsed',
    HouseBank: 'HouseBank',
    InterestCalculationCode: 'InterestCalculationCode',
    InterestCalculationDate: 'InterestCalculationDate',
    IntrstCalcFrequencyInMonths: 'IntrstCalcFrequencyInMonths',
    IsToBeLocallyProcessed: 'IsToBeLocallyProcessed',
    ItemIsToBePaidSeparately: 'ItemIsToBePaidSeparately',
    LayoutSortingRule: 'LayoutSortingRule',
    PaymentBlockingReason: 'PaymentBlockingReason',
    PaymentMethodsList: 'PaymentMethodsList',
    PaymentReason: 'PaymentReason',
    PaymentTerms: 'PaymentTerms',
    PaytAdviceIsSentbyEdi: 'PaytAdviceIsSentbyEDI',
    PhysicalInventoryBlockInd: 'PhysicalInventoryBlockInd',
    ReconciliationAccount: 'ReconciliationAccount',
    RecordPaymentHistoryIndicator: 'RecordPaymentHistoryIndicator',
    UserAtCustomer: 'UserAtCustomer',
    DeletionIndicator: 'DeletionIndicator',
    CashPlanningGroup: 'CashPlanningGroup',
    KnownOrNegotiatedLeave: 'KnownOrNegotiatedLeave',
    ValueAdjustmentKey: 'ValueAdjustmentKey',
    CustomerAccountGroup: 'CustomerAccountGroup'
} as const;
export type ACustomerCompanyGetSelectEnum = typeof ACustomerCompanyGetSelectEnum[keyof typeof ACustomerCompanyGetSelectEnum];
/**
 * @export
 */
export const ACustomerCompanyGetExpandEnum = {
    Star: '*',
    ToCompanyText: 'to_CompanyText',
    ToCustomerDunning: 'to_CustomerDunning',
    ToWithHoldingTax: 'to_WithHoldingTax'
} as const;
export type ACustomerCompanyGetExpandEnum = typeof ACustomerCompanyGetExpandEnum[keyof typeof ACustomerCompanyGetExpandEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerCompanyGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    AparToleranceGroup: 'APARToleranceGroup',
    AparToleranceGroupDesc: 'APARToleranceGroup desc',
    AccountByCustomer: 'AccountByCustomer',
    AccountByCustomerDesc: 'AccountByCustomer desc',
    AccountingClerk: 'AccountingClerk',
    AccountingClerkDesc: 'AccountingClerk desc',
    AccountingClerkFaxNumber: 'AccountingClerkFaxNumber',
    AccountingClerkFaxNumberDesc: 'AccountingClerkFaxNumber desc',
    AccountingClerkInternetAddress: 'AccountingClerkInternetAddress',
    AccountingClerkInternetAddressDesc: 'AccountingClerkInternetAddress desc',
    AccountingClerkPhoneNumber: 'AccountingClerkPhoneNumber',
    AccountingClerkPhoneNumberDesc: 'AccountingClerkPhoneNumber desc',
    AlternativePayerAccount: 'AlternativePayerAccount',
    AlternativePayerAccountDesc: 'AlternativePayerAccount desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    CollectiveInvoiceVariant: 'CollectiveInvoiceVariant',
    CollectiveInvoiceVariantDesc: 'CollectiveInvoiceVariant desc',
    CustomerAccountNote: 'CustomerAccountNote',
    CustomerAccountNoteDesc: 'CustomerAccountNote desc',
    CustomerHeadOffice: 'CustomerHeadOffice',
    CustomerHeadOfficeDesc: 'CustomerHeadOffice desc',
    CustomerSupplierClearingIsUsed: 'CustomerSupplierClearingIsUsed',
    CustomerSupplierClearingIsUsedDesc: 'CustomerSupplierClearingIsUsed desc',
    HouseBank: 'HouseBank',
    HouseBankDesc: 'HouseBank desc',
    InterestCalculationCode: 'InterestCalculationCode',
    InterestCalculationCodeDesc: 'InterestCalculationCode desc',
    InterestCalculationDate: 'InterestCalculationDate',
    InterestCalculationDateDesc: 'InterestCalculationDate desc',
    IntrstCalcFrequencyInMonths: 'IntrstCalcFrequencyInMonths',
    IntrstCalcFrequencyInMonthsDesc: 'IntrstCalcFrequencyInMonths desc',
    IsToBeLocallyProcessed: 'IsToBeLocallyProcessed',
    IsToBeLocallyProcessedDesc: 'IsToBeLocallyProcessed desc',
    ItemIsToBePaidSeparately: 'ItemIsToBePaidSeparately',
    ItemIsToBePaidSeparatelyDesc: 'ItemIsToBePaidSeparately desc',
    LayoutSortingRule: 'LayoutSortingRule',
    LayoutSortingRuleDesc: 'LayoutSortingRule desc',
    PaymentBlockingReason: 'PaymentBlockingReason',
    PaymentBlockingReasonDesc: 'PaymentBlockingReason desc',
    PaymentMethodsList: 'PaymentMethodsList',
    PaymentMethodsListDesc: 'PaymentMethodsList desc',
    PaymentReason: 'PaymentReason',
    PaymentReasonDesc: 'PaymentReason desc',
    PaymentTerms: 'PaymentTerms',
    PaymentTermsDesc: 'PaymentTerms desc',
    PaytAdviceIsSentbyEdi: 'PaytAdviceIsSentbyEDI',
    PaytAdviceIsSentbyEdiDesc: 'PaytAdviceIsSentbyEDI desc',
    PhysicalInventoryBlockInd: 'PhysicalInventoryBlockInd',
    PhysicalInventoryBlockIndDesc: 'PhysicalInventoryBlockInd desc',
    ReconciliationAccount: 'ReconciliationAccount',
    ReconciliationAccountDesc: 'ReconciliationAccount desc',
    RecordPaymentHistoryIndicator: 'RecordPaymentHistoryIndicator',
    RecordPaymentHistoryIndicatorDesc: 'RecordPaymentHistoryIndicator desc',
    UserAtCustomer: 'UserAtCustomer',
    UserAtCustomerDesc: 'UserAtCustomer desc',
    DeletionIndicator: 'DeletionIndicator',
    DeletionIndicatorDesc: 'DeletionIndicator desc',
    CashPlanningGroup: 'CashPlanningGroup',
    CashPlanningGroupDesc: 'CashPlanningGroup desc',
    KnownOrNegotiatedLeave: 'KnownOrNegotiatedLeave',
    KnownOrNegotiatedLeaveDesc: 'KnownOrNegotiatedLeave desc',
    ValueAdjustmentKey: 'ValueAdjustmentKey',
    ValueAdjustmentKeyDesc: 'ValueAdjustmentKey desc',
    CustomerAccountGroup: 'CustomerAccountGroup',
    CustomerAccountGroupDesc: 'CustomerAccountGroup desc'
} as const;
export type ACustomerCustomerToCustomerCompanyGetOrderbyEnum = typeof ACustomerCustomerToCustomerCompanyGetOrderbyEnum[keyof typeof ACustomerCustomerToCustomerCompanyGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerCompanyGetSelectEnum = {
    Customer: 'Customer',
    CompanyCode: 'CompanyCode',
    AparToleranceGroup: 'APARToleranceGroup',
    AccountByCustomer: 'AccountByCustomer',
    AccountingClerk: 'AccountingClerk',
    AccountingClerkFaxNumber: 'AccountingClerkFaxNumber',
    AccountingClerkInternetAddress: 'AccountingClerkInternetAddress',
    AccountingClerkPhoneNumber: 'AccountingClerkPhoneNumber',
    AlternativePayerAccount: 'AlternativePayerAccount',
    AuthorizationGroup: 'AuthorizationGroup',
    CollectiveInvoiceVariant: 'CollectiveInvoiceVariant',
    CustomerAccountNote: 'CustomerAccountNote',
    CustomerHeadOffice: 'CustomerHeadOffice',
    CustomerSupplierClearingIsUsed: 'CustomerSupplierClearingIsUsed',
    HouseBank: 'HouseBank',
    InterestCalculationCode: 'InterestCalculationCode',
    InterestCalculationDate: 'InterestCalculationDate',
    IntrstCalcFrequencyInMonths: 'IntrstCalcFrequencyInMonths',
    IsToBeLocallyProcessed: 'IsToBeLocallyProcessed',
    ItemIsToBePaidSeparately: 'ItemIsToBePaidSeparately',
    LayoutSortingRule: 'LayoutSortingRule',
    PaymentBlockingReason: 'PaymentBlockingReason',
    PaymentMethodsList: 'PaymentMethodsList',
    PaymentReason: 'PaymentReason',
    PaymentTerms: 'PaymentTerms',
    PaytAdviceIsSentbyEdi: 'PaytAdviceIsSentbyEDI',
    PhysicalInventoryBlockInd: 'PhysicalInventoryBlockInd',
    ReconciliationAccount: 'ReconciliationAccount',
    RecordPaymentHistoryIndicator: 'RecordPaymentHistoryIndicator',
    UserAtCustomer: 'UserAtCustomer',
    DeletionIndicator: 'DeletionIndicator',
    CashPlanningGroup: 'CashPlanningGroup',
    KnownOrNegotiatedLeave: 'KnownOrNegotiatedLeave',
    ValueAdjustmentKey: 'ValueAdjustmentKey',
    CustomerAccountGroup: 'CustomerAccountGroup'
} as const;
export type ACustomerCustomerToCustomerCompanyGetSelectEnum = typeof ACustomerCustomerToCustomerCompanyGetSelectEnum[keyof typeof ACustomerCustomerToCustomerCompanyGetSelectEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerCompanyGetExpandEnum = {
    Star: '*',
    ToCompanyText: 'to_CompanyText',
    ToCustomerDunning: 'to_CustomerDunning',
    ToWithHoldingTax: 'to_WithHoldingTax'
} as const;
export type ACustomerCustomerToCustomerCompanyGetExpandEnum = typeof ACustomerCustomerToCustomerCompanyGetExpandEnum[keyof typeof ACustomerCustomerToCustomerCompanyGetExpandEnum];
