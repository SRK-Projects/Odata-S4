/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoType,
  APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate,
  APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeUpdate,
  CollectionOfACustSlsAreaAddrDepdntTaxInfoType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeFromJSON,
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeToJSON,
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreateFromJSON,
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreateToJSON,
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeUpdateFromJSON,
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeUpdateToJSON,
    CollectionOfACustSlsAreaAddrDepdntTaxInfoTypeFromJSON,
    CollectionOfACustSlsAreaAddrDepdntTaxInfoTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ACustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryDeleteRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    addressID: string;
    departureCountry: string;
    customerTaxCategory: string;
}

export interface ACustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    addressID: string;
    departureCountry: string;
    customerTaxCategory: string;
    $select?: Set<ACustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetSelectEnum>;
}

export interface ACustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    addressID: string;
    departureCountry: string;
    customerTaxCategory: string;
    aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeUpdate: APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeUpdate;
}

export interface ACustSlsAreaAddrDepdntTaxInfoGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustSlsAreaAddrDepdntTaxInfoGetOrderbyEnum>;
    $select?: Set<ACustSlsAreaAddrDepdntTaxInfoGetSelectEnum>;
}

export interface ACustSlsAreaAddrDepdntTaxInfoPostRequest {
    aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate: APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate;
}

export interface ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    departureCountry: string;
    customerTaxCategory: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetOrderbyEnum>;
    $select?: Set<ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetSelectEnum>;
}

export interface ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPostRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    departureCountry: string;
    customerTaxCategory: string;
    aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate: APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate;
}

/**
 * 
 */
export class CustomerSalesAreaAddressDependentTaxInfoApi extends runtime.BaseAPI {

    /**
     * Deletes address dependent customer sales area tax data.
     * Deletes address dependent customer sales area tax data.
     */
    async aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryDeleteRaw(requestParameters: ACustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryDelete.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryDelete.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryDelete.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryDelete.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryDelete.');
        }

        if (requestParameters.departureCountry === null || requestParameters.departureCountry === undefined) {
            throw new runtime.RequiredError('departureCountry','Required parameter requestParameters.departureCountry was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryDelete.');
        }

        if (requestParameters.customerTaxCategory === null || requestParameters.customerTaxCategory === undefined) {
            throw new runtime.RequiredError('customerTaxCategory','Required parameter requestParameters.customerTaxCategory was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustSlsAreaAddrDepdntTaxInfo(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',AddressID='{AddressID}',DepartureCountry='{DepartureCountry}',CustomerTaxCategory='{CustomerTaxCategory}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"DepartureCountry"}}`, encodeURIComponent(String(requestParameters.departureCountry))).replace(`{${"CustomerTaxCategory"}}`, encodeURIComponent(String(requestParameters.customerTaxCategory))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes address dependent customer sales area tax data.
     * Deletes address dependent customer sales area tax data.
     */
    async aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryDelete(requestParameters: ACustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves address dependent customer sales area tax data by using key fields.
     * Retrieves address dependent customer sales area tax data by using key fields.
     */
    async aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetRaw(requestParameters: ACustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet.');
        }

        if (requestParameters.departureCountry === null || requestParameters.departureCountry === undefined) {
            throw new runtime.RequiredError('departureCountry','Required parameter requestParameters.departureCountry was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet.');
        }

        if (requestParameters.customerTaxCategory === null || requestParameters.customerTaxCategory === undefined) {
            throw new runtime.RequiredError('customerTaxCategory','Required parameter requestParameters.customerTaxCategory was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustSlsAreaAddrDepdntTaxInfo(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',AddressID='{AddressID}',DepartureCountry='{DepartureCountry}',CustomerTaxCategory='{CustomerTaxCategory}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"DepartureCountry"}}`, encodeURIComponent(String(requestParameters.departureCountry))).replace(`{${"CustomerTaxCategory"}}`, encodeURIComponent(String(requestParameters.customerTaxCategory))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent customer sales area tax data by using key fields.
     * Retrieves address dependent customer sales area tax data by using key fields.
     */
    async aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet(requestParameters: ACustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoType> {
        const response = await this.aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates address dependent customer sales area tax data.
     * Updates address dependent customer sales area tax data.
     */
    async aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchRaw(requestParameters: ACustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch.');
        }

        if (requestParameters.departureCountry === null || requestParameters.departureCountry === undefined) {
            throw new runtime.RequiredError('departureCountry','Required parameter requestParameters.departureCountry was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch.');
        }

        if (requestParameters.customerTaxCategory === null || requestParameters.customerTaxCategory === undefined) {
            throw new runtime.RequiredError('customerTaxCategory','Required parameter requestParameters.customerTaxCategory was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeUpdate was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustSlsAreaAddrDepdntTaxInfo(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',AddressID='{AddressID}',DepartureCountry='{DepartureCountry}',CustomerTaxCategory='{CustomerTaxCategory}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"DepartureCountry"}}`, encodeURIComponent(String(requestParameters.departureCountry))).replace(`{${"CustomerTaxCategory"}}`, encodeURIComponent(String(requestParameters.customerTaxCategory))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates address dependent customer sales area tax data.
     * Updates address dependent customer sales area tax data.
     */
    async aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch(requestParameters: ACustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves address dependent customer sales area tax data fields of all the available records in the system.
     * Retrieves address dependent customer sales area tax data.
     */
    async aCustSlsAreaAddrDepdntTaxInfoGetRaw(requestParameters: ACustSlsAreaAddrDepdntTaxInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustSlsAreaAddrDepdntTaxInfoType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustSlsAreaAddrDepdntTaxInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustSlsAreaAddrDepdntTaxInfoTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent customer sales area tax data fields of all the available records in the system.
     * Retrieves address dependent customer sales area tax data.
     */
    async aCustSlsAreaAddrDepdntTaxInfoGet(requestParameters: ACustSlsAreaAddrDepdntTaxInfoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustSlsAreaAddrDepdntTaxInfoType> {
        const response = await this.aCustSlsAreaAddrDepdntTaxInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new address dependent customer sales area tax data.
     * Creates new address dependent customer sales area tax data.
     */
    async aCustSlsAreaAddrDepdntTaxInfoPostRaw(requestParameters: ACustSlsAreaAddrDepdntTaxInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoType>> {
        if (requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate was null or undefined when calling aCustSlsAreaAddrDepdntTaxInfoPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustSlsAreaAddrDepdntTaxInfo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeFromJSON(jsonValue));
    }

    /**
     * Creates new address dependent customer sales area tax data.
     * Creates new address dependent customer sales area tax data.
     */
    async aCustSlsAreaAddrDepdntTaxInfoPost(requestParameters: ACustSlsAreaAddrDepdntTaxInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoType> {
        const response = await this.aCustSlsAreaAddrDepdntTaxInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves address dependent customer sales area tax data fields of all the available records in the system.
     * Retrieves address dependent customer sales area tax data.
     */
    async aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetRaw(requestParameters: ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustSlsAreaAddrDepdntTaxInfoType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGet.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGet.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGet.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGet.');
        }

        if (requestParameters.departureCountry === null || requestParameters.departureCountry === undefined) {
            throw new runtime.RequiredError('departureCountry','Required parameter requestParameters.departureCountry was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGet.');
        }

        if (requestParameters.customerTaxCategory === null || requestParameters.customerTaxCategory === undefined) {
            throw new runtime.RequiredError('customerTaxCategory','Required parameter requestParameters.customerTaxCategory was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesAreaTax(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',DepartureCountry='{DepartureCountry}',CustomerTaxCategory='{CustomerTaxCategory}')/to_SlsAreaAddrDepdntTax`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"DepartureCountry"}}`, encodeURIComponent(String(requestParameters.departureCountry))).replace(`{${"CustomerTaxCategory"}}`, encodeURIComponent(String(requestParameters.customerTaxCategory))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustSlsAreaAddrDepdntTaxInfoTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent customer sales area tax data fields of all the available records in the system.
     * Retrieves address dependent customer sales area tax data.
     */
    async aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGet(requestParameters: ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustSlsAreaAddrDepdntTaxInfoType> {
        const response = await this.aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new address dependent customer sales area tax data.
     * Creates new address dependent customer sales area tax data.
     */
    async aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPostRaw(requestParameters: ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPost.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPost.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPost.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPost.');
        }

        if (requestParameters.departureCountry === null || requestParameters.departureCountry === undefined) {
            throw new runtime.RequiredError('departureCountry','Required parameter requestParameters.departureCountry was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPost.');
        }

        if (requestParameters.customerTaxCategory === null || requestParameters.customerTaxCategory === undefined) {
            throw new runtime.RequiredError('customerTaxCategory','Required parameter requestParameters.customerTaxCategory was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesAreaTax(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',DepartureCountry='{DepartureCountry}',CustomerTaxCategory='{CustomerTaxCategory}')/to_SlsAreaAddrDepdntTax`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"DepartureCountry"}}`, encodeURIComponent(String(requestParameters.departureCountry))).replace(`{${"CustomerTaxCategory"}}`, encodeURIComponent(String(requestParameters.customerTaxCategory))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeFromJSON(jsonValue));
    }

    /**
     * Creates new address dependent customer sales area tax data.
     * Creates new address dependent customer sales area tax data.
     */
    async aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPost(requestParameters: ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoType> {
        const response = await this.aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ACustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    AddressId: 'AddressID',
    DepartureCountry: 'DepartureCountry',
    CustomerTaxCategory: 'CustomerTaxCategory',
    CustomerTaxClassification: 'CustomerTaxClassification'
} as const;
export type ACustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetSelectEnum = typeof ACustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetSelectEnum[keyof typeof ACustSlsAreaAddrDepdntTaxInfoCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionAddressIDAddressIDDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetSelectEnum];
/**
 * @export
 */
export const ACustSlsAreaAddrDepdntTaxInfoGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    DepartureCountry: 'DepartureCountry',
    DepartureCountryDesc: 'DepartureCountry desc',
    CustomerTaxCategory: 'CustomerTaxCategory',
    CustomerTaxCategoryDesc: 'CustomerTaxCategory desc',
    CustomerTaxClassification: 'CustomerTaxClassification',
    CustomerTaxClassificationDesc: 'CustomerTaxClassification desc'
} as const;
export type ACustSlsAreaAddrDepdntTaxInfoGetOrderbyEnum = typeof ACustSlsAreaAddrDepdntTaxInfoGetOrderbyEnum[keyof typeof ACustSlsAreaAddrDepdntTaxInfoGetOrderbyEnum];
/**
 * @export
 */
export const ACustSlsAreaAddrDepdntTaxInfoGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    AddressId: 'AddressID',
    DepartureCountry: 'DepartureCountry',
    CustomerTaxCategory: 'CustomerTaxCategory',
    CustomerTaxClassification: 'CustomerTaxClassification'
} as const;
export type ACustSlsAreaAddrDepdntTaxInfoGetSelectEnum = typeof ACustSlsAreaAddrDepdntTaxInfoGetSelectEnum[keyof typeof ACustSlsAreaAddrDepdntTaxInfoGetSelectEnum];
/**
 * @export
 */
export const ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    DepartureCountry: 'DepartureCountry',
    DepartureCountryDesc: 'DepartureCountry desc',
    CustomerTaxCategory: 'CustomerTaxCategory',
    CustomerTaxCategoryDesc: 'CustomerTaxCategory desc',
    CustomerTaxClassification: 'CustomerTaxClassification',
    CustomerTaxClassificationDesc: 'CustomerTaxClassification desc'
} as const;
export type ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetOrderbyEnum = typeof ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetOrderbyEnum[keyof typeof ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    AddressId: 'AddressID',
    DepartureCountry: 'DepartureCountry',
    CustomerTaxCategory: 'CustomerTaxCategory',
    CustomerTaxClassification: 'CustomerTaxClassification'
} as const;
export type ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetSelectEnum = typeof ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetSelectEnum[keyof typeof ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetSelectEnum];
