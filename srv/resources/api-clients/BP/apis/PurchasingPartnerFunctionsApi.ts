/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERASupplierPartnerFuncType,
  APIBUSINESSPARTNERASupplierPartnerFuncTypeCreate,
  APIBUSINESSPARTNERASupplierPartnerFuncTypeUpdate,
  CollectionOfASupplierPartnerFuncType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERASupplierPartnerFuncTypeFromJSON,
    APIBUSINESSPARTNERASupplierPartnerFuncTypeToJSON,
    APIBUSINESSPARTNERASupplierPartnerFuncTypeCreateFromJSON,
    APIBUSINESSPARTNERASupplierPartnerFuncTypeCreateToJSON,
    APIBUSINESSPARTNERASupplierPartnerFuncTypeUpdateFromJSON,
    APIBUSINESSPARTNERASupplierPartnerFuncTypeUpdateToJSON,
    CollectionOfASupplierPartnerFuncTypeFromJSON,
    CollectionOfASupplierPartnerFuncTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ASupplierPartnerFuncGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierPartnerFuncGetOrderbyEnum>;
    $select?: Set<ASupplierPartnerFuncGetSelectEnum>;
}

export interface ASupplierPartnerFuncPostRequest {
    aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate: APIBUSINESSPARTNERASupplierPartnerFuncTypeCreate;
}

export interface ASupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDeleteRequest {
    supplier: string;
    purchasingOrganization: string;
    supplierSubrange: string;
    plant: string;
    partnerFunction: string;
    partnerCounter: string;
}

export interface ASupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetRequest {
    supplier: string;
    purchasingOrganization: string;
    supplierSubrange: string;
    plant: string;
    partnerFunction: string;
    partnerCounter: string;
    $select?: Set<ASupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetSelectEnum>;
}

export interface ASupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatchRequest {
    supplier: string;
    purchasingOrganization: string;
    supplierSubrange: string;
    plant: string;
    partnerFunction: string;
    partnerCounter: string;
    aPIBUSINESSPARTNERASupplierPartnerFuncTypeUpdate: APIBUSINESSPARTNERASupplierPartnerFuncTypeUpdate;
}

export interface ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetRequest {
    supplier: string;
    purchasingOrganization: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetOrderbyEnum>;
    $select?: Set<ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetSelectEnum>;
}

export interface ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPostRequest {
    supplier: string;
    purchasingOrganization: string;
    aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate: APIBUSINESSPARTNERASupplierPartnerFuncTypeCreate;
}

/**
 * 
 */
export class PurchasingPartnerFunctionsApi extends runtime.BaseAPI {

    /**
     * Retrieves partner function fields of all the available records in the system linked to supplier purchasing organization
     * Retrieves supplier purchasing organization partner function records.
     */
    async aSupplierPartnerFuncGetRaw(requestParameters: ASupplierPartnerFuncGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierPartnerFuncType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierPartnerFunc`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierPartnerFuncTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves partner function fields of all the available records in the system linked to supplier purchasing organization
     * Retrieves supplier purchasing organization partner function records.
     */
    async aSupplierPartnerFuncGet(requestParameters: ASupplierPartnerFuncGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierPartnerFuncType> {
        const response = await this.aSupplierPartnerFuncGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new partner function record. Partner Counter will be automatically determined if a similar partner function already exists.
     * Creates a new partner function data linked to supplier purchasing organization.
     */
    async aSupplierPartnerFuncPostRaw(requestParameters: ASupplierPartnerFuncPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierPartnerFuncType>> {
        if (requestParameters.aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate was null or undefined when calling aSupplierPartnerFuncPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierPartnerFunc`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierPartnerFuncTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierPartnerFuncTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new partner function record. Partner Counter will be automatically determined if a similar partner function already exists.
     * Creates a new partner function data linked to supplier purchasing organization.
     */
    async aSupplierPartnerFuncPost(requestParameters: ASupplierPartnerFuncPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierPartnerFuncType> {
        const response = await this.aSupplierPartnerFuncPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes partner function record by Supplier, PurchasingOrganization, SupplierSubrange, Plant, PartnerCounter and PartnerFunction
     * Deletes partner function record linked to supplier purchasing organization.
     */
    async aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDeleteRaw(requestParameters: ASupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDelete.');
        }

        if (requestParameters.purchasingOrganization === null || requestParameters.purchasingOrganization === undefined) {
            throw new runtime.RequiredError('purchasingOrganization','Required parameter requestParameters.purchasingOrganization was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDelete.');
        }

        if (requestParameters.supplierSubrange === null || requestParameters.supplierSubrange === undefined) {
            throw new runtime.RequiredError('supplierSubrange','Required parameter requestParameters.supplierSubrange was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDelete.');
        }

        if (requestParameters.plant === null || requestParameters.plant === undefined) {
            throw new runtime.RequiredError('plant','Required parameter requestParameters.plant was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDelete.');
        }

        if (requestParameters.partnerFunction === null || requestParameters.partnerFunction === undefined) {
            throw new runtime.RequiredError('partnerFunction','Required parameter requestParameters.partnerFunction was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDelete.');
        }

        if (requestParameters.partnerCounter === null || requestParameters.partnerCounter === undefined) {
            throw new runtime.RequiredError('partnerCounter','Required parameter requestParameters.partnerCounter was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierPartnerFunc(Supplier='{Supplier}',PurchasingOrganization='{PurchasingOrganization}',SupplierSubrange='{SupplierSubrange}',Plant='{Plant}',PartnerFunction='{PartnerFunction}',PartnerCounter='{PartnerCounter}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"PurchasingOrganization"}}`, encodeURIComponent(String(requestParameters.purchasingOrganization))).replace(`{${"SupplierSubrange"}}`, encodeURIComponent(String(requestParameters.supplierSubrange))).replace(`{${"Plant"}}`, encodeURIComponent(String(requestParameters.plant))).replace(`{${"PartnerFunction"}}`, encodeURIComponent(String(requestParameters.partnerFunction))).replace(`{${"PartnerCounter"}}`, encodeURIComponent(String(requestParameters.partnerCounter))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes partner function record by Supplier, PurchasingOrganization, SupplierSubrange, Plant, PartnerCounter and PartnerFunction
     * Deletes partner function record linked to supplier purchasing organization.
     */
    async aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDelete(requestParameters: ASupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves partner function data by Supplier, PurchasingOrganization, SupplierSubrange, Plant, PartnerCounter, and PartnerFunction.
     * Retrieves supplier purchasing organization partner function data by using the key fields.
     */
    async aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetRaw(requestParameters: ASupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierPartnerFuncType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGet.');
        }

        if (requestParameters.purchasingOrganization === null || requestParameters.purchasingOrganization === undefined) {
            throw new runtime.RequiredError('purchasingOrganization','Required parameter requestParameters.purchasingOrganization was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGet.');
        }

        if (requestParameters.supplierSubrange === null || requestParameters.supplierSubrange === undefined) {
            throw new runtime.RequiredError('supplierSubrange','Required parameter requestParameters.supplierSubrange was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGet.');
        }

        if (requestParameters.plant === null || requestParameters.plant === undefined) {
            throw new runtime.RequiredError('plant','Required parameter requestParameters.plant was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGet.');
        }

        if (requestParameters.partnerFunction === null || requestParameters.partnerFunction === undefined) {
            throw new runtime.RequiredError('partnerFunction','Required parameter requestParameters.partnerFunction was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGet.');
        }

        if (requestParameters.partnerCounter === null || requestParameters.partnerCounter === undefined) {
            throw new runtime.RequiredError('partnerCounter','Required parameter requestParameters.partnerCounter was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierPartnerFunc(Supplier='{Supplier}',PurchasingOrganization='{PurchasingOrganization}',SupplierSubrange='{SupplierSubrange}',Plant='{Plant}',PartnerFunction='{PartnerFunction}',PartnerCounter='{PartnerCounter}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"PurchasingOrganization"}}`, encodeURIComponent(String(requestParameters.purchasingOrganization))).replace(`{${"SupplierSubrange"}}`, encodeURIComponent(String(requestParameters.supplierSubrange))).replace(`{${"Plant"}}`, encodeURIComponent(String(requestParameters.plant))).replace(`{${"PartnerFunction"}}`, encodeURIComponent(String(requestParameters.partnerFunction))).replace(`{${"PartnerCounter"}}`, encodeURIComponent(String(requestParameters.partnerCounter))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierPartnerFuncTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves partner function data by Supplier, PurchasingOrganization, SupplierSubrange, Plant, PartnerCounter, and PartnerFunction.
     * Retrieves supplier purchasing organization partner function data by using the key fields.
     */
    async aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGet(requestParameters: ASupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierPartnerFuncType> {
        const response = await this.aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates partner function record by Supplier, PurchasingOrganization, SupplierSubrange, Plant, PartnerCounter, and PartnerFunction.
     * Updates partner function record linked to supplier purchasing organization by using key fields.
     */
    async aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatchRaw(requestParameters: ASupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatch.');
        }

        if (requestParameters.purchasingOrganization === null || requestParameters.purchasingOrganization === undefined) {
            throw new runtime.RequiredError('purchasingOrganization','Required parameter requestParameters.purchasingOrganization was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatch.');
        }

        if (requestParameters.supplierSubrange === null || requestParameters.supplierSubrange === undefined) {
            throw new runtime.RequiredError('supplierSubrange','Required parameter requestParameters.supplierSubrange was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatch.');
        }

        if (requestParameters.plant === null || requestParameters.plant === undefined) {
            throw new runtime.RequiredError('plant','Required parameter requestParameters.plant was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatch.');
        }

        if (requestParameters.partnerFunction === null || requestParameters.partnerFunction === undefined) {
            throw new runtime.RequiredError('partnerFunction','Required parameter requestParameters.partnerFunction was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatch.');
        }

        if (requestParameters.partnerCounter === null || requestParameters.partnerCounter === undefined) {
            throw new runtime.RequiredError('partnerCounter','Required parameter requestParameters.partnerCounter was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierPartnerFuncTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERASupplierPartnerFuncTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierPartnerFuncTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierPartnerFuncTypeUpdate was null or undefined when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierPartnerFunc(Supplier='{Supplier}',PurchasingOrganization='{PurchasingOrganization}',SupplierSubrange='{SupplierSubrange}',Plant='{Plant}',PartnerFunction='{PartnerFunction}',PartnerCounter='{PartnerCounter}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"PurchasingOrganization"}}`, encodeURIComponent(String(requestParameters.purchasingOrganization))).replace(`{${"SupplierSubrange"}}`, encodeURIComponent(String(requestParameters.supplierSubrange))).replace(`{${"Plant"}}`, encodeURIComponent(String(requestParameters.plant))).replace(`{${"PartnerFunction"}}`, encodeURIComponent(String(requestParameters.partnerFunction))).replace(`{${"PartnerCounter"}}`, encodeURIComponent(String(requestParameters.partnerCounter))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierPartnerFuncTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierPartnerFuncTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates partner function record by Supplier, PurchasingOrganization, SupplierSubrange, Plant, PartnerCounter, and PartnerFunction.
     * Updates partner function record linked to supplier purchasing organization by using key fields.
     */
    async aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatch(requestParameters: ASupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves partner function fields of all the available records in the system linked to supplier purchasing organization
     * Retrieves supplier purchasing organization partner function records.
     */
    async aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetRaw(requestParameters: ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierPartnerFuncType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGet.');
        }

        if (requestParameters.purchasingOrganization === null || requestParameters.purchasingOrganization === undefined) {
            throw new runtime.RequiredError('purchasingOrganization','Required parameter requestParameters.purchasingOrganization was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierPurchasingOrg(Supplier='{Supplier}',PurchasingOrganization='{PurchasingOrganization}')/to_PartnerFunction`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"PurchasingOrganization"}}`, encodeURIComponent(String(requestParameters.purchasingOrganization))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierPartnerFuncTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves partner function fields of all the available records in the system linked to supplier purchasing organization
     * Retrieves supplier purchasing organization partner function records.
     */
    async aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGet(requestParameters: ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierPartnerFuncType> {
        const response = await this.aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new partner function record. Partner Counter will be automatically determined if a similar partner function already exists.
     * Creates a new partner function data linked to supplier purchasing organization.
     */
    async aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPostRaw(requestParameters: ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierPartnerFuncType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPost.');
        }

        if (requestParameters.purchasingOrganization === null || requestParameters.purchasingOrganization === undefined) {
            throw new runtime.RequiredError('purchasingOrganization','Required parameter requestParameters.purchasingOrganization was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierPurchasingOrg(Supplier='{Supplier}',PurchasingOrganization='{PurchasingOrganization}')/to_PartnerFunction`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"PurchasingOrganization"}}`, encodeURIComponent(String(requestParameters.purchasingOrganization))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierPartnerFuncTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierPartnerFuncTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new partner function record. Partner Counter will be automatically determined if a similar partner function already exists.
     * Creates a new partner function data linked to supplier purchasing organization.
     */
    async aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPost(requestParameters: ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierPartnerFuncType> {
        const response = await this.aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ASupplierPartnerFuncGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    PurchasingOrganization: 'PurchasingOrganization',
    PurchasingOrganizationDesc: 'PurchasingOrganization desc',
    SupplierSubrange: 'SupplierSubrange',
    SupplierSubrangeDesc: 'SupplierSubrange desc',
    Plant: 'Plant',
    PlantDesc: 'Plant desc',
    PartnerFunction: 'PartnerFunction',
    PartnerFunctionDesc: 'PartnerFunction desc',
    PartnerCounter: 'PartnerCounter',
    PartnerCounterDesc: 'PartnerCounter desc',
    DefaultPartner: 'DefaultPartner',
    DefaultPartnerDesc: 'DefaultPartner desc',
    CreationDate: 'CreationDate',
    CreationDateDesc: 'CreationDate desc',
    CreatedByUser: 'CreatedByUser',
    CreatedByUserDesc: 'CreatedByUser desc',
    ReferenceSupplier: 'ReferenceSupplier',
    ReferenceSupplierDesc: 'ReferenceSupplier desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ASupplierPartnerFuncGetOrderbyEnum = typeof ASupplierPartnerFuncGetOrderbyEnum[keyof typeof ASupplierPartnerFuncGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierPartnerFuncGetSelectEnum = {
    Supplier: 'Supplier',
    PurchasingOrganization: 'PurchasingOrganization',
    SupplierSubrange: 'SupplierSubrange',
    Plant: 'Plant',
    PartnerFunction: 'PartnerFunction',
    PartnerCounter: 'PartnerCounter',
    DefaultPartner: 'DefaultPartner',
    CreationDate: 'CreationDate',
    CreatedByUser: 'CreatedByUser',
    ReferenceSupplier: 'ReferenceSupplier',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ASupplierPartnerFuncGetSelectEnum = typeof ASupplierPartnerFuncGetSelectEnum[keyof typeof ASupplierPartnerFuncGetSelectEnum];
/**
 * @export
 */
export const ASupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetSelectEnum = {
    Supplier: 'Supplier',
    PurchasingOrganization: 'PurchasingOrganization',
    SupplierSubrange: 'SupplierSubrange',
    Plant: 'Plant',
    PartnerFunction: 'PartnerFunction',
    PartnerCounter: 'PartnerCounter',
    DefaultPartner: 'DefaultPartner',
    CreationDate: 'CreationDate',
    CreatedByUser: 'CreatedByUser',
    ReferenceSupplier: 'ReferenceSupplier',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ASupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetSelectEnum = typeof ASupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetSelectEnum[keyof typeof ASupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetSelectEnum];
/**
 * @export
 */
export const ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    PurchasingOrganization: 'PurchasingOrganization',
    PurchasingOrganizationDesc: 'PurchasingOrganization desc',
    SupplierSubrange: 'SupplierSubrange',
    SupplierSubrangeDesc: 'SupplierSubrange desc',
    Plant: 'Plant',
    PlantDesc: 'Plant desc',
    PartnerFunction: 'PartnerFunction',
    PartnerFunctionDesc: 'PartnerFunction desc',
    PartnerCounter: 'PartnerCounter',
    PartnerCounterDesc: 'PartnerCounter desc',
    DefaultPartner: 'DefaultPartner',
    DefaultPartnerDesc: 'DefaultPartner desc',
    CreationDate: 'CreationDate',
    CreationDateDesc: 'CreationDate desc',
    CreatedByUser: 'CreatedByUser',
    CreatedByUserDesc: 'CreatedByUser desc',
    ReferenceSupplier: 'ReferenceSupplier',
    ReferenceSupplierDesc: 'ReferenceSupplier desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetOrderbyEnum = typeof ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetOrderbyEnum[keyof typeof ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetSelectEnum = {
    Supplier: 'Supplier',
    PurchasingOrganization: 'PurchasingOrganization',
    SupplierSubrange: 'SupplierSubrange',
    Plant: 'Plant',
    PartnerFunction: 'PartnerFunction',
    PartnerCounter: 'PartnerCounter',
    DefaultPartner: 'DefaultPartner',
    CreationDate: 'CreationDate',
    CreatedByUser: 'CreatedByUser',
    ReferenceSupplier: 'ReferenceSupplier',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetSelectEnum = typeof ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetSelectEnum[keyof typeof ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetSelectEnum];
