/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERABPFiscalYearInformationType,
  APIBUSINESSPARTNERABPFiscalYearInformationTypeCreate,
  APIBUSINESSPARTNERABPFiscalYearInformationTypeUpdate,
  CollectionOfABPFiscalYearInformationType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERABPFiscalYearInformationTypeFromJSON,
    APIBUSINESSPARTNERABPFiscalYearInformationTypeToJSON,
    APIBUSINESSPARTNERABPFiscalYearInformationTypeCreateFromJSON,
    APIBUSINESSPARTNERABPFiscalYearInformationTypeCreateToJSON,
    APIBUSINESSPARTNERABPFiscalYearInformationTypeUpdateFromJSON,
    APIBUSINESSPARTNERABPFiscalYearInformationTypeUpdateToJSON,
    CollectionOfABPFiscalYearInformationTypeFromJSON,
    CollectionOfABPFiscalYearInformationTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearDeleteRequest {
    businessPartner: string;
    businessPartnerFiscalYear: string;
}

export interface ABPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearGetRequest {
    businessPartner: string;
    businessPartnerFiscalYear: string;
    $select?: Set<ABPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearGetSelectEnum>;
}

export interface ABPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearPatchRequest {
    businessPartner: string;
    businessPartnerFiscalYear: string;
    aPIBUSINESSPARTNERABPFiscalYearInformationTypeUpdate: APIBUSINESSPARTNERABPFiscalYearInformationTypeUpdate;
}

export interface ABPFiscalYearInformationGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPFiscalYearInformationGetOrderbyEnum>;
    $select?: Set<ABPFiscalYearInformationGetSelectEnum>;
}

export interface ABPFiscalYearInformationPostRequest {
    aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate: APIBUSINESSPARTNERABPFiscalYearInformationTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBPFiscalYearInformationPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate: APIBUSINESSPARTNERABPFiscalYearInformationTypeCreate;
}

/**
 * 
 */
export class FiscalYearInformationApi extends runtime.BaseAPI {

    /**
     * Updates financial services reporting attributes identified by business partner number.
     * Updates business partner financial services reporting attributes.
     */
    async aBPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearDeleteRaw(requestParameters: ABPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearDelete.');
        }

        if (requestParameters.businessPartnerFiscalYear === null || requestParameters.businessPartnerFiscalYear === undefined) {
            throw new runtime.RequiredError('businessPartnerFiscalYear','Required parameter requestParameters.businessPartnerFiscalYear was null or undefined when calling aBPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPFiscalYearInformation(BusinessPartner='{BusinessPartner}',BusinessPartnerFiscalYear='{BusinessPartnerFiscalYear}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"BusinessPartnerFiscalYear"}}`, encodeURIComponent(String(requestParameters.businessPartnerFiscalYear))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates financial services reporting attributes identified by business partner number.
     * Updates business partner financial services reporting attributes.
     */
    async aBPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearDelete(requestParameters: ABPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves business partner fiscal year information of all the available records linked to business partners in the system.
     * Retrieves business partner fiscal year information.
     */
    async aBPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearGetRaw(requestParameters: ABPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPFiscalYearInformationType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearGet.');
        }

        if (requestParameters.businessPartnerFiscalYear === null || requestParameters.businessPartnerFiscalYear === undefined) {
            throw new runtime.RequiredError('businessPartnerFiscalYear','Required parameter requestParameters.businessPartnerFiscalYear was null or undefined when calling aBPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPFiscalYearInformation(BusinessPartner='{BusinessPartner}',BusinessPartnerFiscalYear='{BusinessPartnerFiscalYear}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"BusinessPartnerFiscalYear"}}`, encodeURIComponent(String(requestParameters.businessPartnerFiscalYear))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPFiscalYearInformationTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner fiscal year information of all the available records linked to business partners in the system.
     * Retrieves business partner fiscal year information.
     */
    async aBPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearGet(requestParameters: ABPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPFiscalYearInformationType> {
        const response = await this.aBPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates business partner fiscal year information identified by business partner number and fiscal year.
     * Updates business partner fiscal year information.
     */
    async aBPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearPatchRaw(requestParameters: ABPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearPatch.');
        }

        if (requestParameters.businessPartnerFiscalYear === null || requestParameters.businessPartnerFiscalYear === undefined) {
            throw new runtime.RequiredError('businessPartnerFiscalYear','Required parameter requestParameters.businessPartnerFiscalYear was null or undefined when calling aBPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPFiscalYearInformationTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERABPFiscalYearInformationTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPFiscalYearInformationTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERABPFiscalYearInformationTypeUpdate was null or undefined when calling aBPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPFiscalYearInformation(BusinessPartner='{BusinessPartner}',BusinessPartnerFiscalYear='{BusinessPartnerFiscalYear}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"BusinessPartnerFiscalYear"}}`, encodeURIComponent(String(requestParameters.businessPartnerFiscalYear))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPFiscalYearInformationTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERABPFiscalYearInformationTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates business partner fiscal year information identified by business partner number and fiscal year.
     * Updates business partner fiscal year information.
     */
    async aBPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearPatch(requestParameters: ABPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves business partner fiscal year information of all the available records linked to business partners in the system.
     * Retrieves business partner fiscal year information.
     */
    async aBPFiscalYearInformationGetRaw(requestParameters: ABPFiscalYearInformationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPFiscalYearInformationType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPFiscalYearInformation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPFiscalYearInformationTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner fiscal year information of all the available records linked to business partners in the system.
     * Retrieves business partner fiscal year information.
     */
    async aBPFiscalYearInformationGet(requestParameters: ABPFiscalYearInformationGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPFiscalYearInformationType> {
        const response = await this.aBPFiscalYearInformationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates business partner fiscal year information linked to an existing business partner.
     * Creates business partner fiscal year information.
     */
    async aBPFiscalYearInformationPostRaw(requestParameters: ABPFiscalYearInformationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPFiscalYearInformationType>> {
        if (requestParameters.aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate was null or undefined when calling aBPFiscalYearInformationPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPFiscalYearInformation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPFiscalYearInformationTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPFiscalYearInformationTypeFromJSON(jsonValue));
    }

    /**
     * Creates business partner fiscal year information linked to an existing business partner.
     * Creates business partner fiscal year information.
     */
    async aBPFiscalYearInformationPost(requestParameters: ABPFiscalYearInformationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPFiscalYearInformationType> {
        const response = await this.aBPFiscalYearInformationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner fiscal year information of all the available records linked to business partners in the system.
     * Retrieves business partner fiscal year information.
     */
    async aBusinessPartnerBusinessPartnerToBPFiscalYearInformationGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPFiscalYearInformationType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBPFiscalYearInformationGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BPFiscalYearInformation`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPFiscalYearInformationTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner fiscal year information of all the available records linked to business partners in the system.
     * Retrieves business partner fiscal year information.
     */
    async aBusinessPartnerBusinessPartnerToBPFiscalYearInformationGet(requestParameters: ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPFiscalYearInformationType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBPFiscalYearInformationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates business partner fiscal year information linked to an existing business partner.
     * Creates business partner fiscal year information.
     */
    async aBusinessPartnerBusinessPartnerToBPFiscalYearInformationPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBPFiscalYearInformationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPFiscalYearInformationType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBPFiscalYearInformationPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBPFiscalYearInformationPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BPFiscalYearInformation`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPFiscalYearInformationTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPFiscalYearInformationTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPFiscalYearInformationTypeFromJSON(jsonValue));
    }

    /**
     * Creates business partner fiscal year information linked to an existing business partner.
     * Creates business partner fiscal year information.
     */
    async aBusinessPartnerBusinessPartnerToBPFiscalYearInformationPost(requestParameters: ABusinessPartnerBusinessPartnerToBPFiscalYearInformationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPFiscalYearInformationType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBPFiscalYearInformationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerFiscalYear: 'BusinessPartnerFiscalYear',
    BpBalanceSheetCurrency: 'BPBalanceSheetCurrency',
    BpAnnualStockholderMeetingDate: 'BPAnnualStockholderMeetingDate',
    BpFiscalYearStartDate: 'BPFiscalYearStartDate',
    BpFiscalYearEndDate: 'BPFiscalYearEndDate',
    BpFiscalYearIsClosed: 'BPFiscalYearIsClosed',
    BpFiscalYearClosingDate: 'BPFiscalYearClosingDate',
    BpFsclYrCnsldtdFinStatementDte: 'BPFsclYrCnsldtdFinStatementDte',
    BpCapitalStockAmtInBalShtCrcy: 'BPCapitalStockAmtInBalShtCrcy',
    BpIssdStockCptlAmtInBalShtCrcy: 'BPIssdStockCptlAmtInBalShtCrcy',
    BpPartcipnCertAmtInBalShtCrcy: 'BPPartcipnCertAmtInBalShtCrcy',
    BpEquityCapitalAmtInBalShtCrcy: 'BPEquityCapitalAmtInBalShtCrcy',
    BpGrossPremiumAmtInBalShtCrcy: 'BPGrossPremiumAmtInBalShtCrcy',
    BpNetPremiumAmtInBalShtCrcy: 'BPNetPremiumAmtInBalShtCrcy',
    BpAnnualSalesAmtInBalShtCrcy: 'BPAnnualSalesAmtInBalShtCrcy',
    BpAnnualNetIncAmtInBalShtCrcy: 'BPAnnualNetIncAmtInBalShtCrcy',
    BpDividendDistrAmtInBalShtCrcy: 'BPDividendDistrAmtInBalShtCrcy',
    BpDebtRatioInYears: 'BPDebtRatioInYears',
    BpAnnualPnLAmtInBalShtCrcy: 'BPAnnualPnLAmtInBalShtCrcy',
    BpBalSheetTotalAmtInBalShtCrcy: 'BPBalSheetTotalAmtInBalShtCrcy',
    BpNumberOfEmployees: 'BPNumberOfEmployees',
    BpCptlReserveAmtInBalShtCrcy: 'BPCptlReserveAmtInBalShtCrcy',
    BpLglRevnRsrvAmtInBalShtCrcy: 'BPLglRevnRsrvAmtInBalShtCrcy',
    RevnRsrvOwnStkAmtInBalShtCrcy: 'RevnRsrvOwnStkAmtInBalShtCrcy',
    BpStatryReserveAmtInBalShtCrcy: 'BPStatryReserveAmtInBalShtCrcy',
    BpOthRevnRsrvAmtInBalShtCrcy: 'BPOthRevnRsrvAmtInBalShtCrcy',
    BppnLCarryfwdAmtInBalShtCrcy: 'BPPnLCarryfwdAmtInBalShtCrcy',
    BpSuborddLbltyAmtInBalShtCrcy: 'BPSuborddLbltyAmtInBalShtCrcy',
    BpRetOnTotalCptlEmpldInPercent: 'BPRetOnTotalCptlEmpldInPercent',
    BpDebtClearancePeriodInYears: 'BPDebtClearancePeriodInYears',
    BpFinancingCoeffInPercent: 'BPFinancingCoeffInPercent',
    BpEquityRatioInPercent: 'BPEquityRatioInPercent'
} as const;
export type ABPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearGetSelectEnum = typeof ABPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearGetSelectEnum[keyof typeof ABPFiscalYearInformationBusinessPartnerBusinessPartnerBusinessPartnerFiscalYearBusinessPartnerFiscalYearGetSelectEnum];
/**
 * @export
 */
export const ABPFiscalYearInformationGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    BusinessPartnerFiscalYear: 'BusinessPartnerFiscalYear',
    BusinessPartnerFiscalYearDesc: 'BusinessPartnerFiscalYear desc',
    BpBalanceSheetCurrency: 'BPBalanceSheetCurrency',
    BpBalanceSheetCurrencyDesc: 'BPBalanceSheetCurrency desc',
    BpAnnualStockholderMeetingDate: 'BPAnnualStockholderMeetingDate',
    BpAnnualStockholderMeetingDateDesc: 'BPAnnualStockholderMeetingDate desc',
    BpFiscalYearStartDate: 'BPFiscalYearStartDate',
    BpFiscalYearStartDateDesc: 'BPFiscalYearStartDate desc',
    BpFiscalYearEndDate: 'BPFiscalYearEndDate',
    BpFiscalYearEndDateDesc: 'BPFiscalYearEndDate desc',
    BpFiscalYearIsClosed: 'BPFiscalYearIsClosed',
    BpFiscalYearIsClosedDesc: 'BPFiscalYearIsClosed desc',
    BpFiscalYearClosingDate: 'BPFiscalYearClosingDate',
    BpFiscalYearClosingDateDesc: 'BPFiscalYearClosingDate desc',
    BpFsclYrCnsldtdFinStatementDte: 'BPFsclYrCnsldtdFinStatementDte',
    BpFsclYrCnsldtdFinStatementDteDesc: 'BPFsclYrCnsldtdFinStatementDte desc',
    BpCapitalStockAmtInBalShtCrcy: 'BPCapitalStockAmtInBalShtCrcy',
    BpCapitalStockAmtInBalShtCrcyDesc: 'BPCapitalStockAmtInBalShtCrcy desc',
    BpIssdStockCptlAmtInBalShtCrcy: 'BPIssdStockCptlAmtInBalShtCrcy',
    BpIssdStockCptlAmtInBalShtCrcyDesc: 'BPIssdStockCptlAmtInBalShtCrcy desc',
    BpPartcipnCertAmtInBalShtCrcy: 'BPPartcipnCertAmtInBalShtCrcy',
    BpPartcipnCertAmtInBalShtCrcyDesc: 'BPPartcipnCertAmtInBalShtCrcy desc',
    BpEquityCapitalAmtInBalShtCrcy: 'BPEquityCapitalAmtInBalShtCrcy',
    BpEquityCapitalAmtInBalShtCrcyDesc: 'BPEquityCapitalAmtInBalShtCrcy desc',
    BpGrossPremiumAmtInBalShtCrcy: 'BPGrossPremiumAmtInBalShtCrcy',
    BpGrossPremiumAmtInBalShtCrcyDesc: 'BPGrossPremiumAmtInBalShtCrcy desc',
    BpNetPremiumAmtInBalShtCrcy: 'BPNetPremiumAmtInBalShtCrcy',
    BpNetPremiumAmtInBalShtCrcyDesc: 'BPNetPremiumAmtInBalShtCrcy desc',
    BpAnnualSalesAmtInBalShtCrcy: 'BPAnnualSalesAmtInBalShtCrcy',
    BpAnnualSalesAmtInBalShtCrcyDesc: 'BPAnnualSalesAmtInBalShtCrcy desc',
    BpAnnualNetIncAmtInBalShtCrcy: 'BPAnnualNetIncAmtInBalShtCrcy',
    BpAnnualNetIncAmtInBalShtCrcyDesc: 'BPAnnualNetIncAmtInBalShtCrcy desc',
    BpDividendDistrAmtInBalShtCrcy: 'BPDividendDistrAmtInBalShtCrcy',
    BpDividendDistrAmtInBalShtCrcyDesc: 'BPDividendDistrAmtInBalShtCrcy desc',
    BpDebtRatioInYears: 'BPDebtRatioInYears',
    BpDebtRatioInYearsDesc: 'BPDebtRatioInYears desc',
    BpAnnualPnLAmtInBalShtCrcy: 'BPAnnualPnLAmtInBalShtCrcy',
    BpAnnualPnLAmtInBalShtCrcyDesc: 'BPAnnualPnLAmtInBalShtCrcy desc',
    BpBalSheetTotalAmtInBalShtCrcy: 'BPBalSheetTotalAmtInBalShtCrcy',
    BpBalSheetTotalAmtInBalShtCrcyDesc: 'BPBalSheetTotalAmtInBalShtCrcy desc',
    BpNumberOfEmployees: 'BPNumberOfEmployees',
    BpNumberOfEmployeesDesc: 'BPNumberOfEmployees desc',
    BpCptlReserveAmtInBalShtCrcy: 'BPCptlReserveAmtInBalShtCrcy',
    BpCptlReserveAmtInBalShtCrcyDesc: 'BPCptlReserveAmtInBalShtCrcy desc',
    BpLglRevnRsrvAmtInBalShtCrcy: 'BPLglRevnRsrvAmtInBalShtCrcy',
    BpLglRevnRsrvAmtInBalShtCrcyDesc: 'BPLglRevnRsrvAmtInBalShtCrcy desc',
    RevnRsrvOwnStkAmtInBalShtCrcy: 'RevnRsrvOwnStkAmtInBalShtCrcy',
    RevnRsrvOwnStkAmtInBalShtCrcyDesc: 'RevnRsrvOwnStkAmtInBalShtCrcy desc',
    BpStatryReserveAmtInBalShtCrcy: 'BPStatryReserveAmtInBalShtCrcy',
    BpStatryReserveAmtInBalShtCrcyDesc: 'BPStatryReserveAmtInBalShtCrcy desc',
    BpOthRevnRsrvAmtInBalShtCrcy: 'BPOthRevnRsrvAmtInBalShtCrcy',
    BpOthRevnRsrvAmtInBalShtCrcyDesc: 'BPOthRevnRsrvAmtInBalShtCrcy desc',
    BppnLCarryfwdAmtInBalShtCrcy: 'BPPnLCarryfwdAmtInBalShtCrcy',
    BppnLCarryfwdAmtInBalShtCrcyDesc: 'BPPnLCarryfwdAmtInBalShtCrcy desc',
    BpSuborddLbltyAmtInBalShtCrcy: 'BPSuborddLbltyAmtInBalShtCrcy',
    BpSuborddLbltyAmtInBalShtCrcyDesc: 'BPSuborddLbltyAmtInBalShtCrcy desc',
    BpRetOnTotalCptlEmpldInPercent: 'BPRetOnTotalCptlEmpldInPercent',
    BpRetOnTotalCptlEmpldInPercentDesc: 'BPRetOnTotalCptlEmpldInPercent desc',
    BpDebtClearancePeriodInYears: 'BPDebtClearancePeriodInYears',
    BpDebtClearancePeriodInYearsDesc: 'BPDebtClearancePeriodInYears desc',
    BpFinancingCoeffInPercent: 'BPFinancingCoeffInPercent',
    BpFinancingCoeffInPercentDesc: 'BPFinancingCoeffInPercent desc',
    BpEquityRatioInPercent: 'BPEquityRatioInPercent',
    BpEquityRatioInPercentDesc: 'BPEquityRatioInPercent desc'
} as const;
export type ABPFiscalYearInformationGetOrderbyEnum = typeof ABPFiscalYearInformationGetOrderbyEnum[keyof typeof ABPFiscalYearInformationGetOrderbyEnum];
/**
 * @export
 */
export const ABPFiscalYearInformationGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerFiscalYear: 'BusinessPartnerFiscalYear',
    BpBalanceSheetCurrency: 'BPBalanceSheetCurrency',
    BpAnnualStockholderMeetingDate: 'BPAnnualStockholderMeetingDate',
    BpFiscalYearStartDate: 'BPFiscalYearStartDate',
    BpFiscalYearEndDate: 'BPFiscalYearEndDate',
    BpFiscalYearIsClosed: 'BPFiscalYearIsClosed',
    BpFiscalYearClosingDate: 'BPFiscalYearClosingDate',
    BpFsclYrCnsldtdFinStatementDte: 'BPFsclYrCnsldtdFinStatementDte',
    BpCapitalStockAmtInBalShtCrcy: 'BPCapitalStockAmtInBalShtCrcy',
    BpIssdStockCptlAmtInBalShtCrcy: 'BPIssdStockCptlAmtInBalShtCrcy',
    BpPartcipnCertAmtInBalShtCrcy: 'BPPartcipnCertAmtInBalShtCrcy',
    BpEquityCapitalAmtInBalShtCrcy: 'BPEquityCapitalAmtInBalShtCrcy',
    BpGrossPremiumAmtInBalShtCrcy: 'BPGrossPremiumAmtInBalShtCrcy',
    BpNetPremiumAmtInBalShtCrcy: 'BPNetPremiumAmtInBalShtCrcy',
    BpAnnualSalesAmtInBalShtCrcy: 'BPAnnualSalesAmtInBalShtCrcy',
    BpAnnualNetIncAmtInBalShtCrcy: 'BPAnnualNetIncAmtInBalShtCrcy',
    BpDividendDistrAmtInBalShtCrcy: 'BPDividendDistrAmtInBalShtCrcy',
    BpDebtRatioInYears: 'BPDebtRatioInYears',
    BpAnnualPnLAmtInBalShtCrcy: 'BPAnnualPnLAmtInBalShtCrcy',
    BpBalSheetTotalAmtInBalShtCrcy: 'BPBalSheetTotalAmtInBalShtCrcy',
    BpNumberOfEmployees: 'BPNumberOfEmployees',
    BpCptlReserveAmtInBalShtCrcy: 'BPCptlReserveAmtInBalShtCrcy',
    BpLglRevnRsrvAmtInBalShtCrcy: 'BPLglRevnRsrvAmtInBalShtCrcy',
    RevnRsrvOwnStkAmtInBalShtCrcy: 'RevnRsrvOwnStkAmtInBalShtCrcy',
    BpStatryReserveAmtInBalShtCrcy: 'BPStatryReserveAmtInBalShtCrcy',
    BpOthRevnRsrvAmtInBalShtCrcy: 'BPOthRevnRsrvAmtInBalShtCrcy',
    BppnLCarryfwdAmtInBalShtCrcy: 'BPPnLCarryfwdAmtInBalShtCrcy',
    BpSuborddLbltyAmtInBalShtCrcy: 'BPSuborddLbltyAmtInBalShtCrcy',
    BpRetOnTotalCptlEmpldInPercent: 'BPRetOnTotalCptlEmpldInPercent',
    BpDebtClearancePeriodInYears: 'BPDebtClearancePeriodInYears',
    BpFinancingCoeffInPercent: 'BPFinancingCoeffInPercent',
    BpEquityRatioInPercent: 'BPEquityRatioInPercent'
} as const;
export type ABPFiscalYearInformationGetSelectEnum = typeof ABPFiscalYearInformationGetSelectEnum[keyof typeof ABPFiscalYearInformationGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    BusinessPartnerFiscalYear: 'BusinessPartnerFiscalYear',
    BusinessPartnerFiscalYearDesc: 'BusinessPartnerFiscalYear desc',
    BpBalanceSheetCurrency: 'BPBalanceSheetCurrency',
    BpBalanceSheetCurrencyDesc: 'BPBalanceSheetCurrency desc',
    BpAnnualStockholderMeetingDate: 'BPAnnualStockholderMeetingDate',
    BpAnnualStockholderMeetingDateDesc: 'BPAnnualStockholderMeetingDate desc',
    BpFiscalYearStartDate: 'BPFiscalYearStartDate',
    BpFiscalYearStartDateDesc: 'BPFiscalYearStartDate desc',
    BpFiscalYearEndDate: 'BPFiscalYearEndDate',
    BpFiscalYearEndDateDesc: 'BPFiscalYearEndDate desc',
    BpFiscalYearIsClosed: 'BPFiscalYearIsClosed',
    BpFiscalYearIsClosedDesc: 'BPFiscalYearIsClosed desc',
    BpFiscalYearClosingDate: 'BPFiscalYearClosingDate',
    BpFiscalYearClosingDateDesc: 'BPFiscalYearClosingDate desc',
    BpFsclYrCnsldtdFinStatementDte: 'BPFsclYrCnsldtdFinStatementDte',
    BpFsclYrCnsldtdFinStatementDteDesc: 'BPFsclYrCnsldtdFinStatementDte desc',
    BpCapitalStockAmtInBalShtCrcy: 'BPCapitalStockAmtInBalShtCrcy',
    BpCapitalStockAmtInBalShtCrcyDesc: 'BPCapitalStockAmtInBalShtCrcy desc',
    BpIssdStockCptlAmtInBalShtCrcy: 'BPIssdStockCptlAmtInBalShtCrcy',
    BpIssdStockCptlAmtInBalShtCrcyDesc: 'BPIssdStockCptlAmtInBalShtCrcy desc',
    BpPartcipnCertAmtInBalShtCrcy: 'BPPartcipnCertAmtInBalShtCrcy',
    BpPartcipnCertAmtInBalShtCrcyDesc: 'BPPartcipnCertAmtInBalShtCrcy desc',
    BpEquityCapitalAmtInBalShtCrcy: 'BPEquityCapitalAmtInBalShtCrcy',
    BpEquityCapitalAmtInBalShtCrcyDesc: 'BPEquityCapitalAmtInBalShtCrcy desc',
    BpGrossPremiumAmtInBalShtCrcy: 'BPGrossPremiumAmtInBalShtCrcy',
    BpGrossPremiumAmtInBalShtCrcyDesc: 'BPGrossPremiumAmtInBalShtCrcy desc',
    BpNetPremiumAmtInBalShtCrcy: 'BPNetPremiumAmtInBalShtCrcy',
    BpNetPremiumAmtInBalShtCrcyDesc: 'BPNetPremiumAmtInBalShtCrcy desc',
    BpAnnualSalesAmtInBalShtCrcy: 'BPAnnualSalesAmtInBalShtCrcy',
    BpAnnualSalesAmtInBalShtCrcyDesc: 'BPAnnualSalesAmtInBalShtCrcy desc',
    BpAnnualNetIncAmtInBalShtCrcy: 'BPAnnualNetIncAmtInBalShtCrcy',
    BpAnnualNetIncAmtInBalShtCrcyDesc: 'BPAnnualNetIncAmtInBalShtCrcy desc',
    BpDividendDistrAmtInBalShtCrcy: 'BPDividendDistrAmtInBalShtCrcy',
    BpDividendDistrAmtInBalShtCrcyDesc: 'BPDividendDistrAmtInBalShtCrcy desc',
    BpDebtRatioInYears: 'BPDebtRatioInYears',
    BpDebtRatioInYearsDesc: 'BPDebtRatioInYears desc',
    BpAnnualPnLAmtInBalShtCrcy: 'BPAnnualPnLAmtInBalShtCrcy',
    BpAnnualPnLAmtInBalShtCrcyDesc: 'BPAnnualPnLAmtInBalShtCrcy desc',
    BpBalSheetTotalAmtInBalShtCrcy: 'BPBalSheetTotalAmtInBalShtCrcy',
    BpBalSheetTotalAmtInBalShtCrcyDesc: 'BPBalSheetTotalAmtInBalShtCrcy desc',
    BpNumberOfEmployees: 'BPNumberOfEmployees',
    BpNumberOfEmployeesDesc: 'BPNumberOfEmployees desc',
    BpCptlReserveAmtInBalShtCrcy: 'BPCptlReserveAmtInBalShtCrcy',
    BpCptlReserveAmtInBalShtCrcyDesc: 'BPCptlReserveAmtInBalShtCrcy desc',
    BpLglRevnRsrvAmtInBalShtCrcy: 'BPLglRevnRsrvAmtInBalShtCrcy',
    BpLglRevnRsrvAmtInBalShtCrcyDesc: 'BPLglRevnRsrvAmtInBalShtCrcy desc',
    RevnRsrvOwnStkAmtInBalShtCrcy: 'RevnRsrvOwnStkAmtInBalShtCrcy',
    RevnRsrvOwnStkAmtInBalShtCrcyDesc: 'RevnRsrvOwnStkAmtInBalShtCrcy desc',
    BpStatryReserveAmtInBalShtCrcy: 'BPStatryReserveAmtInBalShtCrcy',
    BpStatryReserveAmtInBalShtCrcyDesc: 'BPStatryReserveAmtInBalShtCrcy desc',
    BpOthRevnRsrvAmtInBalShtCrcy: 'BPOthRevnRsrvAmtInBalShtCrcy',
    BpOthRevnRsrvAmtInBalShtCrcyDesc: 'BPOthRevnRsrvAmtInBalShtCrcy desc',
    BppnLCarryfwdAmtInBalShtCrcy: 'BPPnLCarryfwdAmtInBalShtCrcy',
    BppnLCarryfwdAmtInBalShtCrcyDesc: 'BPPnLCarryfwdAmtInBalShtCrcy desc',
    BpSuborddLbltyAmtInBalShtCrcy: 'BPSuborddLbltyAmtInBalShtCrcy',
    BpSuborddLbltyAmtInBalShtCrcyDesc: 'BPSuborddLbltyAmtInBalShtCrcy desc',
    BpRetOnTotalCptlEmpldInPercent: 'BPRetOnTotalCptlEmpldInPercent',
    BpRetOnTotalCptlEmpldInPercentDesc: 'BPRetOnTotalCptlEmpldInPercent desc',
    BpDebtClearancePeriodInYears: 'BPDebtClearancePeriodInYears',
    BpDebtClearancePeriodInYearsDesc: 'BPDebtClearancePeriodInYears desc',
    BpFinancingCoeffInPercent: 'BPFinancingCoeffInPercent',
    BpFinancingCoeffInPercentDesc: 'BPFinancingCoeffInPercent desc',
    BpEquityRatioInPercent: 'BPEquityRatioInPercent',
    BpEquityRatioInPercentDesc: 'BPEquityRatioInPercent desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerFiscalYear: 'BusinessPartnerFiscalYear',
    BpBalanceSheetCurrency: 'BPBalanceSheetCurrency',
    BpAnnualStockholderMeetingDate: 'BPAnnualStockholderMeetingDate',
    BpFiscalYearStartDate: 'BPFiscalYearStartDate',
    BpFiscalYearEndDate: 'BPFiscalYearEndDate',
    BpFiscalYearIsClosed: 'BPFiscalYearIsClosed',
    BpFiscalYearClosingDate: 'BPFiscalYearClosingDate',
    BpFsclYrCnsldtdFinStatementDte: 'BPFsclYrCnsldtdFinStatementDte',
    BpCapitalStockAmtInBalShtCrcy: 'BPCapitalStockAmtInBalShtCrcy',
    BpIssdStockCptlAmtInBalShtCrcy: 'BPIssdStockCptlAmtInBalShtCrcy',
    BpPartcipnCertAmtInBalShtCrcy: 'BPPartcipnCertAmtInBalShtCrcy',
    BpEquityCapitalAmtInBalShtCrcy: 'BPEquityCapitalAmtInBalShtCrcy',
    BpGrossPremiumAmtInBalShtCrcy: 'BPGrossPremiumAmtInBalShtCrcy',
    BpNetPremiumAmtInBalShtCrcy: 'BPNetPremiumAmtInBalShtCrcy',
    BpAnnualSalesAmtInBalShtCrcy: 'BPAnnualSalesAmtInBalShtCrcy',
    BpAnnualNetIncAmtInBalShtCrcy: 'BPAnnualNetIncAmtInBalShtCrcy',
    BpDividendDistrAmtInBalShtCrcy: 'BPDividendDistrAmtInBalShtCrcy',
    BpDebtRatioInYears: 'BPDebtRatioInYears',
    BpAnnualPnLAmtInBalShtCrcy: 'BPAnnualPnLAmtInBalShtCrcy',
    BpBalSheetTotalAmtInBalShtCrcy: 'BPBalSheetTotalAmtInBalShtCrcy',
    BpNumberOfEmployees: 'BPNumberOfEmployees',
    BpCptlReserveAmtInBalShtCrcy: 'BPCptlReserveAmtInBalShtCrcy',
    BpLglRevnRsrvAmtInBalShtCrcy: 'BPLglRevnRsrvAmtInBalShtCrcy',
    RevnRsrvOwnStkAmtInBalShtCrcy: 'RevnRsrvOwnStkAmtInBalShtCrcy',
    BpStatryReserveAmtInBalShtCrcy: 'BPStatryReserveAmtInBalShtCrcy',
    BpOthRevnRsrvAmtInBalShtCrcy: 'BPOthRevnRsrvAmtInBalShtCrcy',
    BppnLCarryfwdAmtInBalShtCrcy: 'BPPnLCarryfwdAmtInBalShtCrcy',
    BpSuborddLbltyAmtInBalShtCrcy: 'BPSuborddLbltyAmtInBalShtCrcy',
    BpRetOnTotalCptlEmpldInPercent: 'BPRetOnTotalCptlEmpldInPercent',
    BpDebtClearancePeriodInYears: 'BPDebtClearancePeriodInYears',
    BpFinancingCoeffInPercent: 'BPFinancingCoeffInPercent',
    BpEquityRatioInPercent: 'BPEquityRatioInPercent'
} as const;
export type ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBPFiscalYearInformationGetSelectEnum];
