/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERACustAddrDepdntExtIdentifierType,
  APIBUSINESSPARTNERACustAddrDepdntExtIdentifierTypeCreate,
  APIBUSINESSPARTNERACustAddrDepdntInformationType,
  APIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate,
  APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoType,
  APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate,
  APIBUSINESSPARTNERACustomerCompanyType,
  APIBUSINESSPARTNERACustomerCompanyTypeCreate,
  APIBUSINESSPARTNERACustomerSalesAreaType,
  APIBUSINESSPARTNERACustomerSalesAreaTypeCreate,
  APIBUSINESSPARTNERACustomerTextType,
  APIBUSINESSPARTNERACustomerTextTypeCreate,
  APIBUSINESSPARTNERACustomerType,
  APIBUSINESSPARTNERACustomerTypeUpdate,
  APIBUSINESSPARTNERACustomerUnloadingPointType,
  APIBUSINESSPARTNERACustomerUnloadingPointTypeCreate,
  CollectionOfACustAddrDepdntExtIdentifierType,
  CollectionOfACustAddrDepdntInformationType,
  CollectionOfACustUnldgPtAddrDepdntInfoType,
  CollectionOfACustomerCompanyType,
  CollectionOfACustomerSalesAreaType,
  CollectionOfACustomerTaxGroupingType,
  CollectionOfACustomerTextType,
  CollectionOfACustomerType,
  CollectionOfACustomerUnloadingPointType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERACustAddrDepdntExtIdentifierTypeFromJSON,
    APIBUSINESSPARTNERACustAddrDepdntExtIdentifierTypeToJSON,
    APIBUSINESSPARTNERACustAddrDepdntExtIdentifierTypeCreateFromJSON,
    APIBUSINESSPARTNERACustAddrDepdntExtIdentifierTypeCreateToJSON,
    APIBUSINESSPARTNERACustAddrDepdntInformationTypeFromJSON,
    APIBUSINESSPARTNERACustAddrDepdntInformationTypeToJSON,
    APIBUSINESSPARTNERACustAddrDepdntInformationTypeCreateFromJSON,
    APIBUSINESSPARTNERACustAddrDepdntInformationTypeCreateToJSON,
    APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeFromJSON,
    APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeToJSON,
    APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreateFromJSON,
    APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreateToJSON,
    APIBUSINESSPARTNERACustomerCompanyTypeFromJSON,
    APIBUSINESSPARTNERACustomerCompanyTypeToJSON,
    APIBUSINESSPARTNERACustomerCompanyTypeCreateFromJSON,
    APIBUSINESSPARTNERACustomerCompanyTypeCreateToJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTypeFromJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTypeToJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTypeCreateFromJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTypeCreateToJSON,
    APIBUSINESSPARTNERACustomerTextTypeFromJSON,
    APIBUSINESSPARTNERACustomerTextTypeToJSON,
    APIBUSINESSPARTNERACustomerTextTypeCreateFromJSON,
    APIBUSINESSPARTNERACustomerTextTypeCreateToJSON,
    APIBUSINESSPARTNERACustomerTypeFromJSON,
    APIBUSINESSPARTNERACustomerTypeToJSON,
    APIBUSINESSPARTNERACustomerTypeUpdateFromJSON,
    APIBUSINESSPARTNERACustomerTypeUpdateToJSON,
    APIBUSINESSPARTNERACustomerUnloadingPointTypeFromJSON,
    APIBUSINESSPARTNERACustomerUnloadingPointTypeToJSON,
    APIBUSINESSPARTNERACustomerUnloadingPointTypeCreateFromJSON,
    APIBUSINESSPARTNERACustomerUnloadingPointTypeCreateToJSON,
    CollectionOfACustAddrDepdntExtIdentifierTypeFromJSON,
    CollectionOfACustAddrDepdntExtIdentifierTypeToJSON,
    CollectionOfACustAddrDepdntInformationTypeFromJSON,
    CollectionOfACustAddrDepdntInformationTypeToJSON,
    CollectionOfACustUnldgPtAddrDepdntInfoTypeFromJSON,
    CollectionOfACustUnldgPtAddrDepdntInfoTypeToJSON,
    CollectionOfACustomerCompanyTypeFromJSON,
    CollectionOfACustomerCompanyTypeToJSON,
    CollectionOfACustomerSalesAreaTypeFromJSON,
    CollectionOfACustomerSalesAreaTypeToJSON,
    CollectionOfACustomerTaxGroupingTypeFromJSON,
    CollectionOfACustomerTaxGroupingTypeToJSON,
    CollectionOfACustomerTextTypeFromJSON,
    CollectionOfACustomerTextTypeToJSON,
    CollectionOfACustomerTypeFromJSON,
    CollectionOfACustomerTypeToJSON,
    CollectionOfACustomerUnloadingPointTypeFromJSON,
    CollectionOfACustomerUnloadingPointTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABusinessPartnerBusinessPartnerToCustomerGetRequest {
    businessPartner: string;
    $select?: Set<ABusinessPartnerBusinessPartnerToCustomerGetSelectEnum>;
    $expand?: Set<ABusinessPartnerBusinessPartnerToCustomerGetExpandEnum>;
}

export interface ACustomerCustomerGetRequest {
    customer: string;
    $select?: Set<ACustomerCustomerGetSelectEnum>;
    $expand?: Set<ACustomerCustomerGetExpandEnum>;
}

export interface ACustomerCustomerPatchRequest {
    customer: string;
    aPIBUSINESSPARTNERACustomerTypeUpdate: APIBUSINESSPARTNERACustomerTypeUpdate;
}

export interface ACustomerCustomerToCustAddrDepdntExtIdentifierGetRequest {
    customer: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCustomerToCustAddrDepdntExtIdentifierGetOrderbyEnum>;
    $select?: Set<ACustomerCustomerToCustAddrDepdntExtIdentifierGetSelectEnum>;
}

export interface ACustomerCustomerToCustAddrDepdntExtIdentifierPostRequest {
    customer: string;
    aPIBUSINESSPARTNERACustAddrDepdntExtIdentifierTypeCreate: APIBUSINESSPARTNERACustAddrDepdntExtIdentifierTypeCreate;
}

export interface ACustomerCustomerToCustAddrDepdntInformationGetRequest {
    customer: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCustomerToCustAddrDepdntInformationGetOrderbyEnum>;
    $select?: Set<ACustomerCustomerToCustAddrDepdntInformationGetSelectEnum>;
}

export interface ACustomerCustomerToCustAddrDepdntInformationPostRequest {
    customer: string;
    aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate: APIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate;
}

export interface ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetRequest {
    customer: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetOrderbyEnum>;
    $select?: Set<ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetSelectEnum>;
}

export interface ACustomerCustomerToCustUnldgPtAddrDepdntInfoPostRequest {
    customer: string;
    aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate: APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate;
}

export interface ACustomerCustomerToCustomerCompanyGetRequest {
    customer: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCustomerToCustomerCompanyGetOrderbyEnum>;
    $select?: Set<ACustomerCustomerToCustomerCompanyGetSelectEnum>;
    $expand?: Set<ACustomerCustomerToCustomerCompanyGetExpandEnum>;
}

export interface ACustomerCustomerToCustomerCompanyPostRequest {
    customer: string;
    aPIBUSINESSPARTNERACustomerCompanyTypeCreate: APIBUSINESSPARTNERACustomerCompanyTypeCreate;
}

export interface ACustomerCustomerToCustomerSalesAreaGetRequest {
    customer: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCustomerToCustomerSalesAreaGetOrderbyEnum>;
    $select?: Set<ACustomerCustomerToCustomerSalesAreaGetSelectEnum>;
    $expand?: Set<ACustomerCustomerToCustomerSalesAreaGetExpandEnum>;
}

export interface ACustomerCustomerToCustomerSalesAreaPostRequest {
    customer: string;
    aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate: APIBUSINESSPARTNERACustomerSalesAreaTypeCreate;
}

export interface ACustomerCustomerToCustomerTaxGroupingGetRequest {
    customer: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCustomerToCustomerTaxGroupingGetOrderbyEnum>;
    $select?: Set<ACustomerCustomerToCustomerTaxGroupingGetSelectEnum>;
}

export interface ACustomerCustomerToCustomerTextGetRequest {
    customer: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCustomerToCustomerTextGetOrderbyEnum>;
    $select?: Set<ACustomerCustomerToCustomerTextGetSelectEnum>;
}

export interface ACustomerCustomerToCustomerTextPostRequest {
    customer: string;
    aPIBUSINESSPARTNERACustomerTextTypeCreate: APIBUSINESSPARTNERACustomerTextTypeCreate;
}

export interface ACustomerCustomerToCustomerUnloadingPointGetRequest {
    customer: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCustomerToCustomerUnloadingPointGetOrderbyEnum>;
    $select?: Set<ACustomerCustomerToCustomerUnloadingPointGetSelectEnum>;
}

export interface ACustomerCustomerToCustomerUnloadingPointPostRequest {
    customer: string;
    aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate: APIBUSINESSPARTNERACustomerUnloadingPointTypeCreate;
}

export interface ACustomerGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerGetOrderbyEnum>;
    $select?: Set<ACustomerGetSelectEnum>;
    $expand?: Set<ACustomerGetExpandEnum>;
}

/**
 * 
 */
export class CustomerApi extends runtime.BaseAPI {

    /**
     * Retrieves general data of all the customer records available in the system.
     * Retrieves customer general data.
     */
    async aBusinessPartnerBusinessPartnerToCustomerGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToCustomerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToCustomerGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_Customer`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves general data of all the customer records available in the system.
     * Retrieves customer general data.
     */
    async aBusinessPartnerBusinessPartnerToCustomerGet(requestParameters: ABusinessPartnerBusinessPartnerToCustomerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerType> {
        const response = await this.aBusinessPartnerBusinessPartnerToCustomerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retreives the general data of the customer record by using customer number.
     * Retrieves customer data by using customer number.
     */
    async aCustomerCustomerGetRaw(requestParameters: ACustomerCustomerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerTypeFromJSON(jsonValue));
    }

    /**
     * Retreives the general data of the customer record by using customer number.
     * Retrieves customer data by using customer number.
     */
    async aCustomerCustomerGet(requestParameters: ACustomerCustomerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerType> {
        const response = await this.aCustomerCustomerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates customer general data by using customer number.
     * Updates customer general data.
     */
    async aCustomerCustomerPatchRaw(requestParameters: ACustomerCustomerPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERACustomerTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerTypeUpdate was null or undefined when calling aCustomerCustomerPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates customer general data by using customer number.
     * Updates customer general data.
     */
    async aCustomerCustomerPatch(requestParameters: ACustomerCustomerPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustomerCustomerPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Get entities from related to_CustAddrDepdntExtIdentifier
     */
    async aCustomerCustomerToCustAddrDepdntExtIdentifierGetRaw(requestParameters: ACustomerCustomerToCustAddrDepdntExtIdentifierGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustAddrDepdntExtIdentifierType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustAddrDepdntExtIdentifierGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustAddrDepdntExtIdentifier`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustAddrDepdntExtIdentifierTypeFromJSON(jsonValue));
    }

    /**
     * Get entities from related to_CustAddrDepdntExtIdentifier
     */
    async aCustomerCustomerToCustAddrDepdntExtIdentifierGet(requestParameters: ACustomerCustomerToCustAddrDepdntExtIdentifierGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustAddrDepdntExtIdentifierType> {
        const response = await this.aCustomerCustomerToCustAddrDepdntExtIdentifierGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add new entity to related to_CustAddrDepdntExtIdentifier
     */
    async aCustomerCustomerToCustAddrDepdntExtIdentifierPostRaw(requestParameters: ACustomerCustomerToCustAddrDepdntExtIdentifierPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustAddrDepdntExtIdentifierType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustAddrDepdntExtIdentifierPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustAddrDepdntExtIdentifierTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustAddrDepdntExtIdentifierTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustAddrDepdntExtIdentifierTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustAddrDepdntExtIdentifierTypeCreate was null or undefined when calling aCustomerCustomerToCustAddrDepdntExtIdentifierPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustAddrDepdntExtIdentifier`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustAddrDepdntExtIdentifierTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustAddrDepdntExtIdentifierTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustAddrDepdntExtIdentifierTypeFromJSON(jsonValue));
    }

    /**
     * Add new entity to related to_CustAddrDepdntExtIdentifier
     */
    async aCustomerCustomerToCustAddrDepdntExtIdentifierPost(requestParameters: ACustomerCustomerToCustAddrDepdntExtIdentifierPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustAddrDepdntExtIdentifierType> {
        const response = await this.aCustomerCustomerToCustAddrDepdntExtIdentifierPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves address dependent customer data fields of all the available records in the system.
     * Retrieves address dependent customer data.
     */
    async aCustomerCustomerToCustAddrDepdntInformationGetRaw(requestParameters: ACustomerCustomerToCustAddrDepdntInformationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustAddrDepdntInformationType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustAddrDepdntInformationGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustAddrDepdntInformation`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustAddrDepdntInformationTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent customer data fields of all the available records in the system.
     * Retrieves address dependent customer data.
     */
    async aCustomerCustomerToCustAddrDepdntInformationGet(requestParameters: ACustomerCustomerToCustAddrDepdntInformationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustAddrDepdntInformationType> {
        const response = await this.aCustomerCustomerToCustAddrDepdntInformationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new address dependent customer data.
     * Creates new address dependent customer data.
     */
    async aCustomerCustomerToCustAddrDepdntInformationPostRaw(requestParameters: ACustomerCustomerToCustAddrDepdntInformationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustAddrDepdntInformationType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustAddrDepdntInformationPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate was null or undefined when calling aCustomerCustomerToCustAddrDepdntInformationPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustAddrDepdntInformation`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustAddrDepdntInformationTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustAddrDepdntInformationTypeFromJSON(jsonValue));
    }

    /**
     * Creates new address dependent customer data.
     * Creates new address dependent customer data.
     */
    async aCustomerCustomerToCustAddrDepdntInformationPost(requestParameters: ACustomerCustomerToCustAddrDepdntInformationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustAddrDepdntInformationType> {
        const response = await this.aCustomerCustomerToCustAddrDepdntInformationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves address dependent customer unloading point data fields of all the available records in the system.
     * Retrieves address dependent customer unloading point data.
     */
    async aCustomerCustomerToCustUnldgPtAddrDepdntInfoGetRaw(requestParameters: ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustUnldgPtAddrDepdntInfoType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustUnldgPtAddrDepdntInfoGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustUnldgPtAddrDepdntInfo`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustUnldgPtAddrDepdntInfoTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent customer unloading point data fields of all the available records in the system.
     * Retrieves address dependent customer unloading point data.
     */
    async aCustomerCustomerToCustUnldgPtAddrDepdntInfoGet(requestParameters: ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustUnldgPtAddrDepdntInfoType> {
        const response = await this.aCustomerCustomerToCustUnldgPtAddrDepdntInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new address dependent customer unloading point data.
     * Creates new address dependent customer unloading point data.
     */
    async aCustomerCustomerToCustUnldgPtAddrDepdntInfoPostRaw(requestParameters: ACustomerCustomerToCustUnldgPtAddrDepdntInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustUnldgPtAddrDepdntInfoPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate was null or undefined when calling aCustomerCustomerToCustUnldgPtAddrDepdntInfoPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustUnldgPtAddrDepdntInfo`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoTypeFromJSON(jsonValue));
    }

    /**
     * Creates new address dependent customer unloading point data.
     * Creates new address dependent customer unloading point data.
     */
    async aCustomerCustomerToCustUnldgPtAddrDepdntInfoPost(requestParameters: ACustomerCustomerToCustUnldgPtAddrDepdntInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustUnldgPtAddrDepdntInfoType> {
        const response = await this.aCustomerCustomerToCustUnldgPtAddrDepdntInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves customer company data fields of all the available records in the system linked to customer.
     * Retrieves customer company data.
     */
    async aCustomerCustomerToCustomerCompanyGetRaw(requestParameters: ACustomerCustomerToCustomerCompanyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerCompanyType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustomerCompanyGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustomerCompany`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerCompanyTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer company data fields of all the available records in the system linked to customer.
     * Retrieves customer company data.
     */
    async aCustomerCustomerToCustomerCompanyGet(requestParameters: ACustomerCustomerToCustomerCompanyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerCompanyType> {
        const response = await this.aCustomerCustomerToCustomerCompanyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns company code data to a customer. A customer can be assigned to multiple company records.
     * Creates new company code data linked to the customer.
     */
    async aCustomerCustomerToCustomerCompanyPostRaw(requestParameters: ACustomerCustomerToCustomerCompanyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerCompanyType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustomerCompanyPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerCompanyTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerCompanyTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerCompanyTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerCompanyTypeCreate was null or undefined when calling aCustomerCustomerToCustomerCompanyPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustomerCompany`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerCompanyTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerCompanyTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerCompanyTypeFromJSON(jsonValue));
    }

    /**
     * Assigns company code data to a customer. A customer can be assigned to multiple company records.
     * Creates new company code data linked to the customer.
     */
    async aCustomerCustomerToCustomerCompanyPost(requestParameters: ACustomerCustomerToCustomerCompanyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerCompanyType> {
        const response = await this.aCustomerCustomerToCustomerCompanyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves customer sales area data fields of all the available records in the system.
     * Retrieves customer sales area data.
     */
    async aCustomerCustomerToCustomerSalesAreaGetRaw(requestParameters: ACustomerCustomerToCustomerSalesAreaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerSalesAreaType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustomerSalesAreaGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustomerSalesArea`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerSalesAreaTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer sales area data fields of all the available records in the system.
     * Retrieves customer sales area data.
     */
    async aCustomerCustomerToCustomerSalesAreaGet(requestParameters: ACustomerCustomerToCustomerSalesAreaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerSalesAreaType> {
        const response = await this.aCustomerCustomerToCustomerSalesAreaGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates sales data linked to a customer including Sales Area Tax, Partner Functions, and Sales Area Text.
     * Creates customer sales data.
     */
    async aCustomerCustomerToCustomerSalesAreaPostRaw(requestParameters: ACustomerCustomerToCustomerSalesAreaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerSalesAreaType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustomerSalesAreaPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate was null or undefined when calling aCustomerCustomerToCustomerSalesAreaPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustomerSalesArea`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerSalesAreaTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerSalesAreaTypeFromJSON(jsonValue));
    }

    /**
     * Creates sales data linked to a customer including Sales Area Tax, Partner Functions, and Sales Area Text.
     * Creates customer sales data.
     */
    async aCustomerCustomerToCustomerSalesAreaPost(requestParameters: ACustomerCustomerToCustomerSalesAreaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerSalesAreaType> {
        const response = await this.aCustomerCustomerToCustomerSalesAreaPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the customer tax grouping data attached to a customer in the system.
     * Retrieves customer tax grouping data.
     */
    async aCustomerCustomerToCustomerTaxGroupingGetRaw(requestParameters: ACustomerCustomerToCustomerTaxGroupingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerTaxGroupingType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustomerTaxGroupingGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustomerTaxGrouping`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerTaxGroupingTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the customer tax grouping data attached to a customer in the system.
     * Retrieves customer tax grouping data.
     */
    async aCustomerCustomerToCustomerTaxGroupingGet(requestParameters: ACustomerCustomerToCustomerTaxGroupingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerTaxGroupingType> {
        const response = await this.aCustomerCustomerToCustomerTaxGroupingGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all customer text data attached to a customer in the system.
     * Retrieves customer text data.
     */
    async aCustomerCustomerToCustomerTextGetRaw(requestParameters: ACustomerCustomerToCustomerTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerTextType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustomerTextGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustomerText`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerTextTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all customer text data attached to a customer in the system.
     * Retrieves customer text data.
     */
    async aCustomerCustomerToCustomerTextGet(requestParameters: ACustomerCustomerToCustomerTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerTextType> {
        const response = await this.aCustomerCustomerToCustomerTextGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates text data attached to a customer in the system.
     * Creates customer long text.
     */
    async aCustomerCustomerToCustomerTextPostRaw(requestParameters: ACustomerCustomerToCustomerTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerTextType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustomerTextPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerTextTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerTextTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerTextTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerTextTypeCreate was null or undefined when calling aCustomerCustomerToCustomerTextPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustomerText`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerTextTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerTextTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerTextTypeFromJSON(jsonValue));
    }

    /**
     * Creates text data attached to a customer in the system.
     * Creates customer long text.
     */
    async aCustomerCustomerToCustomerTextPost(requestParameters: ACustomerCustomerToCustomerTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerTextType> {
        const response = await this.aCustomerCustomerToCustomerTextPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all unloading point data attached to a customer in the system.
     * Retrieves customer unloading point data.
     */
    async aCustomerCustomerToCustomerUnloadingPointGetRaw(requestParameters: ACustomerCustomerToCustomerUnloadingPointGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerUnloadingPointType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustomerUnloadingPointGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustomerUnloadingPoint`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerUnloadingPointTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all unloading point data attached to a customer in the system.
     * Retrieves customer unloading point data.
     */
    async aCustomerCustomerToCustomerUnloadingPointGet(requestParameters: ACustomerCustomerToCustomerUnloadingPointGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerUnloadingPointType> {
        const response = await this.aCustomerCustomerToCustomerUnloadingPointGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates customer unloading point record linked to customer.
     * Creates new customer unloading point record.
     */
    async aCustomerCustomerToCustomerUnloadingPointPostRaw(requestParameters: ACustomerCustomerToCustomerUnloadingPointPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerUnloadingPointType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustomerUnloadingPointPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate was null or undefined when calling aCustomerCustomerToCustomerUnloadingPointPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustomerUnloadingPoint`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerUnloadingPointTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerUnloadingPointTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerUnloadingPointTypeFromJSON(jsonValue));
    }

    /**
     * Creates customer unloading point record linked to customer.
     * Creates new customer unloading point record.
     */
    async aCustomerCustomerToCustomerUnloadingPointPost(requestParameters: ACustomerCustomerToCustomerUnloadingPointPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerUnloadingPointType> {
        const response = await this.aCustomerCustomerToCustomerUnloadingPointPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves general data of all the customer records available in the system.
     * Retrieves customer general data.
     */
    async aCustomerGetRaw(requestParameters: ACustomerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves general data of all the customer records available in the system.
     * Retrieves customer general data.
     */
    async aCustomerGet(requestParameters: ACustomerGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerType> {
        const response = await this.aCustomerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToCustomerGetSelectEnum = {
    Customer: 'Customer',
    AuthorizationGroup: 'AuthorizationGroup',
    BillingIsBlockedForCustomer: 'BillingIsBlockedForCustomer',
    CreatedByUser: 'CreatedByUser',
    CreationDate: 'CreationDate',
    CustomerAccountGroup: 'CustomerAccountGroup',
    CustomerClassification: 'CustomerClassification',
    CustomerFullName: 'CustomerFullName',
    BpCustomerFullName: 'BPCustomerFullName',
    CustomerName: 'CustomerName',
    BpCustomerName: 'BPCustomerName',
    DeliveryIsBlocked: 'DeliveryIsBlocked',
    FreeDefinedAttribute01: 'FreeDefinedAttribute01',
    FreeDefinedAttribute02: 'FreeDefinedAttribute02',
    FreeDefinedAttribute03: 'FreeDefinedAttribute03',
    FreeDefinedAttribute04: 'FreeDefinedAttribute04',
    FreeDefinedAttribute05: 'FreeDefinedAttribute05',
    FreeDefinedAttribute06: 'FreeDefinedAttribute06',
    FreeDefinedAttribute07: 'FreeDefinedAttribute07',
    FreeDefinedAttribute08: 'FreeDefinedAttribute08',
    FreeDefinedAttribute09: 'FreeDefinedAttribute09',
    FreeDefinedAttribute10: 'FreeDefinedAttribute10',
    NfPartnerIsNaturalPerson: 'NFPartnerIsNaturalPerson',
    OrderIsBlockedForCustomer: 'OrderIsBlockedForCustomer',
    PostingIsBlocked: 'PostingIsBlocked',
    Supplier: 'Supplier',
    CustomerCorporateGroup: 'CustomerCorporateGroup',
    FiscalAddress: 'FiscalAddress',
    Industry: 'Industry',
    IndustryCode1: 'IndustryCode1',
    IndustryCode2: 'IndustryCode2',
    IndustryCode3: 'IndustryCode3',
    IndustryCode4: 'IndustryCode4',
    IndustryCode5: 'IndustryCode5',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber3: 'InternationalLocationNumber3',
    NielsenRegion: 'NielsenRegion',
    PaymentReason: 'PaymentReason',
    ResponsibleType: 'ResponsibleType',
    TaxNumber1: 'TaxNumber1',
    TaxNumber2: 'TaxNumber2',
    TaxNumber3: 'TaxNumber3',
    TaxNumber4: 'TaxNumber4',
    TaxNumber5: 'TaxNumber5',
    TaxNumberType: 'TaxNumberType',
    VatRegistration: 'VATRegistration',
    DeletionIndicator: 'DeletionIndicator',
    ExpressTrainStationName: 'ExpressTrainStationName',
    TrainStationName: 'TrainStationName',
    CityCode: 'CityCode',
    County: 'County'
} as const;
export type ABusinessPartnerBusinessPartnerToCustomerGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToCustomerGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToCustomerGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToCustomerGetExpandEnum = {
    Star: '*',
    ToCustAddrDepdntExtIdentifier: 'to_CustAddrDepdntExtIdentifier',
    ToCustAddrDepdntInformation: 'to_CustAddrDepdntInformation',
    ToCustomerCompany: 'to_CustomerCompany',
    ToCustomerSalesArea: 'to_CustomerSalesArea',
    ToCustomerTaxGrouping: 'to_CustomerTaxGrouping',
    ToCustomerText: 'to_CustomerText',
    ToCustomerUnloadingPoint: 'to_CustomerUnloadingPoint',
    ToCustUnldgPtAddrDepdntInfo: 'to_CustUnldgPtAddrDepdntInfo'
} as const;
export type ABusinessPartnerBusinessPartnerToCustomerGetExpandEnum = typeof ABusinessPartnerBusinessPartnerToCustomerGetExpandEnum[keyof typeof ABusinessPartnerBusinessPartnerToCustomerGetExpandEnum];
/**
 * @export
 */
export const ACustomerCustomerGetSelectEnum = {
    Customer: 'Customer',
    AuthorizationGroup: 'AuthorizationGroup',
    BillingIsBlockedForCustomer: 'BillingIsBlockedForCustomer',
    CreatedByUser: 'CreatedByUser',
    CreationDate: 'CreationDate',
    CustomerAccountGroup: 'CustomerAccountGroup',
    CustomerClassification: 'CustomerClassification',
    CustomerFullName: 'CustomerFullName',
    BpCustomerFullName: 'BPCustomerFullName',
    CustomerName: 'CustomerName',
    BpCustomerName: 'BPCustomerName',
    DeliveryIsBlocked: 'DeliveryIsBlocked',
    FreeDefinedAttribute01: 'FreeDefinedAttribute01',
    FreeDefinedAttribute02: 'FreeDefinedAttribute02',
    FreeDefinedAttribute03: 'FreeDefinedAttribute03',
    FreeDefinedAttribute04: 'FreeDefinedAttribute04',
    FreeDefinedAttribute05: 'FreeDefinedAttribute05',
    FreeDefinedAttribute06: 'FreeDefinedAttribute06',
    FreeDefinedAttribute07: 'FreeDefinedAttribute07',
    FreeDefinedAttribute08: 'FreeDefinedAttribute08',
    FreeDefinedAttribute09: 'FreeDefinedAttribute09',
    FreeDefinedAttribute10: 'FreeDefinedAttribute10',
    NfPartnerIsNaturalPerson: 'NFPartnerIsNaturalPerson',
    OrderIsBlockedForCustomer: 'OrderIsBlockedForCustomer',
    PostingIsBlocked: 'PostingIsBlocked',
    Supplier: 'Supplier',
    CustomerCorporateGroup: 'CustomerCorporateGroup',
    FiscalAddress: 'FiscalAddress',
    Industry: 'Industry',
    IndustryCode1: 'IndustryCode1',
    IndustryCode2: 'IndustryCode2',
    IndustryCode3: 'IndustryCode3',
    IndustryCode4: 'IndustryCode4',
    IndustryCode5: 'IndustryCode5',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber3: 'InternationalLocationNumber3',
    NielsenRegion: 'NielsenRegion',
    PaymentReason: 'PaymentReason',
    ResponsibleType: 'ResponsibleType',
    TaxNumber1: 'TaxNumber1',
    TaxNumber2: 'TaxNumber2',
    TaxNumber3: 'TaxNumber3',
    TaxNumber4: 'TaxNumber4',
    TaxNumber5: 'TaxNumber5',
    TaxNumberType: 'TaxNumberType',
    VatRegistration: 'VATRegistration',
    DeletionIndicator: 'DeletionIndicator',
    ExpressTrainStationName: 'ExpressTrainStationName',
    TrainStationName: 'TrainStationName',
    CityCode: 'CityCode',
    County: 'County'
} as const;
export type ACustomerCustomerGetSelectEnum = typeof ACustomerCustomerGetSelectEnum[keyof typeof ACustomerCustomerGetSelectEnum];
/**
 * @export
 */
export const ACustomerCustomerGetExpandEnum = {
    Star: '*',
    ToCustAddrDepdntExtIdentifier: 'to_CustAddrDepdntExtIdentifier',
    ToCustAddrDepdntInformation: 'to_CustAddrDepdntInformation',
    ToCustomerCompany: 'to_CustomerCompany',
    ToCustomerSalesArea: 'to_CustomerSalesArea',
    ToCustomerTaxGrouping: 'to_CustomerTaxGrouping',
    ToCustomerText: 'to_CustomerText',
    ToCustomerUnloadingPoint: 'to_CustomerUnloadingPoint',
    ToCustUnldgPtAddrDepdntInfo: 'to_CustUnldgPtAddrDepdntInfo'
} as const;
export type ACustomerCustomerGetExpandEnum = typeof ACustomerCustomerGetExpandEnum[keyof typeof ACustomerCustomerGetExpandEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustAddrDepdntExtIdentifierGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    CustomerExternalRefId: 'CustomerExternalRefID',
    CustomerExternalRefIdDesc: 'CustomerExternalRefID desc'
} as const;
export type ACustomerCustomerToCustAddrDepdntExtIdentifierGetOrderbyEnum = typeof ACustomerCustomerToCustAddrDepdntExtIdentifierGetOrderbyEnum[keyof typeof ACustomerCustomerToCustAddrDepdntExtIdentifierGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustAddrDepdntExtIdentifierGetSelectEnum = {
    Customer: 'Customer',
    AddressId: 'AddressID',
    CustomerExternalRefId: 'CustomerExternalRefID'
} as const;
export type ACustomerCustomerToCustAddrDepdntExtIdentifierGetSelectEnum = typeof ACustomerCustomerToCustAddrDepdntExtIdentifierGetSelectEnum[keyof typeof ACustomerCustomerToCustAddrDepdntExtIdentifierGetSelectEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustAddrDepdntInformationGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    ExpressTrainStationName: 'ExpressTrainStationName',
    ExpressTrainStationNameDesc: 'ExpressTrainStationName desc',
    TrainStationName: 'TrainStationName',
    TrainStationNameDesc: 'TrainStationName desc',
    CityCode: 'CityCode',
    CityCodeDesc: 'CityCode desc',
    County: 'County',
    CountyDesc: 'County desc'
} as const;
export type ACustomerCustomerToCustAddrDepdntInformationGetOrderbyEnum = typeof ACustomerCustomerToCustAddrDepdntInformationGetOrderbyEnum[keyof typeof ACustomerCustomerToCustAddrDepdntInformationGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustAddrDepdntInformationGetSelectEnum = {
    Customer: 'Customer',
    AddressId: 'AddressID',
    ExpressTrainStationName: 'ExpressTrainStationName',
    TrainStationName: 'TrainStationName',
    CityCode: 'CityCode',
    County: 'County'
} as const;
export type ACustomerCustomerToCustAddrDepdntInformationGetSelectEnum = typeof ACustomerCustomerToCustAddrDepdntInformationGetSelectEnum[keyof typeof ACustomerCustomerToCustAddrDepdntInformationGetSelectEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    UnloadingPointName: 'UnloadingPointName',
    UnloadingPointNameDesc: 'UnloadingPointName desc',
    CustomerFactoryCalenderCode: 'CustomerFactoryCalenderCode',
    CustomerFactoryCalenderCodeDesc: 'CustomerFactoryCalenderCode desc',
    BpGoodsReceivingHoursCode: 'BPGoodsReceivingHoursCode',
    BpGoodsReceivingHoursCodeDesc: 'BPGoodsReceivingHoursCode desc',
    IsDfltBpUnloadingPoint: 'IsDfltBPUnloadingPoint',
    IsDfltBpUnloadingPointDesc: 'IsDfltBPUnloadingPoint desc',
    MondayMorningOpeningTime: 'MondayMorningOpeningTime',
    MondayMorningOpeningTimeDesc: 'MondayMorningOpeningTime desc',
    MondayMorningClosingTime: 'MondayMorningClosingTime',
    MondayMorningClosingTimeDesc: 'MondayMorningClosingTime desc',
    MondayAfternoonOpeningTime: 'MondayAfternoonOpeningTime',
    MondayAfternoonOpeningTimeDesc: 'MondayAfternoonOpeningTime desc',
    MondayAfternoonClosingTime: 'MondayAfternoonClosingTime',
    MondayAfternoonClosingTimeDesc: 'MondayAfternoonClosingTime desc',
    TuesdayMorningOpeningTime: 'TuesdayMorningOpeningTime',
    TuesdayMorningOpeningTimeDesc: 'TuesdayMorningOpeningTime desc',
    TuesdayMorningClosingTime: 'TuesdayMorningClosingTime',
    TuesdayMorningClosingTimeDesc: 'TuesdayMorningClosingTime desc',
    TuesdayAfternoonOpeningTime: 'TuesdayAfternoonOpeningTime',
    TuesdayAfternoonOpeningTimeDesc: 'TuesdayAfternoonOpeningTime desc',
    TuesdayAfternoonClosingTime: 'TuesdayAfternoonClosingTime',
    TuesdayAfternoonClosingTimeDesc: 'TuesdayAfternoonClosingTime desc',
    WednesdayMorningOpeningTime: 'WednesdayMorningOpeningTime',
    WednesdayMorningOpeningTimeDesc: 'WednesdayMorningOpeningTime desc',
    WednesdayMorningClosingTime: 'WednesdayMorningClosingTime',
    WednesdayMorningClosingTimeDesc: 'WednesdayMorningClosingTime desc',
    WednesdayAfternoonOpeningTime: 'WednesdayAfternoonOpeningTime',
    WednesdayAfternoonOpeningTimeDesc: 'WednesdayAfternoonOpeningTime desc',
    WednesdayAfternoonClosingTime: 'WednesdayAfternoonClosingTime',
    WednesdayAfternoonClosingTimeDesc: 'WednesdayAfternoonClosingTime desc',
    ThursdayMorningOpeningTime: 'ThursdayMorningOpeningTime',
    ThursdayMorningOpeningTimeDesc: 'ThursdayMorningOpeningTime desc',
    ThursdayMorningClosingTime: 'ThursdayMorningClosingTime',
    ThursdayMorningClosingTimeDesc: 'ThursdayMorningClosingTime desc',
    ThursdayAfternoonOpeningTime: 'ThursdayAfternoonOpeningTime',
    ThursdayAfternoonOpeningTimeDesc: 'ThursdayAfternoonOpeningTime desc',
    ThursdayAfternoonClosingTime: 'ThursdayAfternoonClosingTime',
    ThursdayAfternoonClosingTimeDesc: 'ThursdayAfternoonClosingTime desc',
    FridayMorningOpeningTime: 'FridayMorningOpeningTime',
    FridayMorningOpeningTimeDesc: 'FridayMorningOpeningTime desc',
    FridayMorningClosingTime: 'FridayMorningClosingTime',
    FridayMorningClosingTimeDesc: 'FridayMorningClosingTime desc',
    FridayAfternoonOpeningTime: 'FridayAfternoonOpeningTime',
    FridayAfternoonOpeningTimeDesc: 'FridayAfternoonOpeningTime desc',
    FridayAfternoonClosingTime: 'FridayAfternoonClosingTime',
    FridayAfternoonClosingTimeDesc: 'FridayAfternoonClosingTime desc',
    SaturdayMorningOpeningTime: 'SaturdayMorningOpeningTime',
    SaturdayMorningOpeningTimeDesc: 'SaturdayMorningOpeningTime desc',
    SaturdayMorningClosingTime: 'SaturdayMorningClosingTime',
    SaturdayMorningClosingTimeDesc: 'SaturdayMorningClosingTime desc',
    SaturdayAfternoonOpeningTime: 'SaturdayAfternoonOpeningTime',
    SaturdayAfternoonOpeningTimeDesc: 'SaturdayAfternoonOpeningTime desc',
    SaturdayAfternoonClosingTime: 'SaturdayAfternoonClosingTime',
    SaturdayAfternoonClosingTimeDesc: 'SaturdayAfternoonClosingTime desc',
    SundayMorningOpeningTime: 'SundayMorningOpeningTime',
    SundayMorningOpeningTimeDesc: 'SundayMorningOpeningTime desc',
    SundayMorningClosingTime: 'SundayMorningClosingTime',
    SundayMorningClosingTimeDesc: 'SundayMorningClosingTime desc',
    SundayAfternoonOpeningTime: 'SundayAfternoonOpeningTime',
    SundayAfternoonOpeningTimeDesc: 'SundayAfternoonOpeningTime desc',
    SundayAfternoonClosingTime: 'SundayAfternoonClosingTime',
    SundayAfternoonClosingTimeDesc: 'SundayAfternoonClosingTime desc'
} as const;
export type ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetOrderbyEnum = typeof ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetOrderbyEnum[keyof typeof ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetSelectEnum = {
    Customer: 'Customer',
    AddressId: 'AddressID',
    UnloadingPointName: 'UnloadingPointName',
    CustomerFactoryCalenderCode: 'CustomerFactoryCalenderCode',
    BpGoodsReceivingHoursCode: 'BPGoodsReceivingHoursCode',
    IsDfltBpUnloadingPoint: 'IsDfltBPUnloadingPoint',
    MondayMorningOpeningTime: 'MondayMorningOpeningTime',
    MondayMorningClosingTime: 'MondayMorningClosingTime',
    MondayAfternoonOpeningTime: 'MondayAfternoonOpeningTime',
    MondayAfternoonClosingTime: 'MondayAfternoonClosingTime',
    TuesdayMorningOpeningTime: 'TuesdayMorningOpeningTime',
    TuesdayMorningClosingTime: 'TuesdayMorningClosingTime',
    TuesdayAfternoonOpeningTime: 'TuesdayAfternoonOpeningTime',
    TuesdayAfternoonClosingTime: 'TuesdayAfternoonClosingTime',
    WednesdayMorningOpeningTime: 'WednesdayMorningOpeningTime',
    WednesdayMorningClosingTime: 'WednesdayMorningClosingTime',
    WednesdayAfternoonOpeningTime: 'WednesdayAfternoonOpeningTime',
    WednesdayAfternoonClosingTime: 'WednesdayAfternoonClosingTime',
    ThursdayMorningOpeningTime: 'ThursdayMorningOpeningTime',
    ThursdayMorningClosingTime: 'ThursdayMorningClosingTime',
    ThursdayAfternoonOpeningTime: 'ThursdayAfternoonOpeningTime',
    ThursdayAfternoonClosingTime: 'ThursdayAfternoonClosingTime',
    FridayMorningOpeningTime: 'FridayMorningOpeningTime',
    FridayMorningClosingTime: 'FridayMorningClosingTime',
    FridayAfternoonOpeningTime: 'FridayAfternoonOpeningTime',
    FridayAfternoonClosingTime: 'FridayAfternoonClosingTime',
    SaturdayMorningOpeningTime: 'SaturdayMorningOpeningTime',
    SaturdayMorningClosingTime: 'SaturdayMorningClosingTime',
    SaturdayAfternoonOpeningTime: 'SaturdayAfternoonOpeningTime',
    SaturdayAfternoonClosingTime: 'SaturdayAfternoonClosingTime',
    SundayMorningOpeningTime: 'SundayMorningOpeningTime',
    SundayMorningClosingTime: 'SundayMorningClosingTime',
    SundayAfternoonOpeningTime: 'SundayAfternoonOpeningTime',
    SundayAfternoonClosingTime: 'SundayAfternoonClosingTime'
} as const;
export type ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetSelectEnum = typeof ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetSelectEnum[keyof typeof ACustomerCustomerToCustUnldgPtAddrDepdntInfoGetSelectEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerCompanyGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    AparToleranceGroup: 'APARToleranceGroup',
    AparToleranceGroupDesc: 'APARToleranceGroup desc',
    AccountByCustomer: 'AccountByCustomer',
    AccountByCustomerDesc: 'AccountByCustomer desc',
    AccountingClerk: 'AccountingClerk',
    AccountingClerkDesc: 'AccountingClerk desc',
    AccountingClerkFaxNumber: 'AccountingClerkFaxNumber',
    AccountingClerkFaxNumberDesc: 'AccountingClerkFaxNumber desc',
    AccountingClerkInternetAddress: 'AccountingClerkInternetAddress',
    AccountingClerkInternetAddressDesc: 'AccountingClerkInternetAddress desc',
    AccountingClerkPhoneNumber: 'AccountingClerkPhoneNumber',
    AccountingClerkPhoneNumberDesc: 'AccountingClerkPhoneNumber desc',
    AlternativePayerAccount: 'AlternativePayerAccount',
    AlternativePayerAccountDesc: 'AlternativePayerAccount desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    CollectiveInvoiceVariant: 'CollectiveInvoiceVariant',
    CollectiveInvoiceVariantDesc: 'CollectiveInvoiceVariant desc',
    CustomerAccountNote: 'CustomerAccountNote',
    CustomerAccountNoteDesc: 'CustomerAccountNote desc',
    CustomerHeadOffice: 'CustomerHeadOffice',
    CustomerHeadOfficeDesc: 'CustomerHeadOffice desc',
    CustomerSupplierClearingIsUsed: 'CustomerSupplierClearingIsUsed',
    CustomerSupplierClearingIsUsedDesc: 'CustomerSupplierClearingIsUsed desc',
    HouseBank: 'HouseBank',
    HouseBankDesc: 'HouseBank desc',
    InterestCalculationCode: 'InterestCalculationCode',
    InterestCalculationCodeDesc: 'InterestCalculationCode desc',
    InterestCalculationDate: 'InterestCalculationDate',
    InterestCalculationDateDesc: 'InterestCalculationDate desc',
    IntrstCalcFrequencyInMonths: 'IntrstCalcFrequencyInMonths',
    IntrstCalcFrequencyInMonthsDesc: 'IntrstCalcFrequencyInMonths desc',
    IsToBeLocallyProcessed: 'IsToBeLocallyProcessed',
    IsToBeLocallyProcessedDesc: 'IsToBeLocallyProcessed desc',
    ItemIsToBePaidSeparately: 'ItemIsToBePaidSeparately',
    ItemIsToBePaidSeparatelyDesc: 'ItemIsToBePaidSeparately desc',
    LayoutSortingRule: 'LayoutSortingRule',
    LayoutSortingRuleDesc: 'LayoutSortingRule desc',
    PaymentBlockingReason: 'PaymentBlockingReason',
    PaymentBlockingReasonDesc: 'PaymentBlockingReason desc',
    PaymentMethodsList: 'PaymentMethodsList',
    PaymentMethodsListDesc: 'PaymentMethodsList desc',
    PaymentReason: 'PaymentReason',
    PaymentReasonDesc: 'PaymentReason desc',
    PaymentTerms: 'PaymentTerms',
    PaymentTermsDesc: 'PaymentTerms desc',
    PaytAdviceIsSentbyEdi: 'PaytAdviceIsSentbyEDI',
    PaytAdviceIsSentbyEdiDesc: 'PaytAdviceIsSentbyEDI desc',
    PhysicalInventoryBlockInd: 'PhysicalInventoryBlockInd',
    PhysicalInventoryBlockIndDesc: 'PhysicalInventoryBlockInd desc',
    ReconciliationAccount: 'ReconciliationAccount',
    ReconciliationAccountDesc: 'ReconciliationAccount desc',
    RecordPaymentHistoryIndicator: 'RecordPaymentHistoryIndicator',
    RecordPaymentHistoryIndicatorDesc: 'RecordPaymentHistoryIndicator desc',
    UserAtCustomer: 'UserAtCustomer',
    UserAtCustomerDesc: 'UserAtCustomer desc',
    DeletionIndicator: 'DeletionIndicator',
    DeletionIndicatorDesc: 'DeletionIndicator desc',
    CashPlanningGroup: 'CashPlanningGroup',
    CashPlanningGroupDesc: 'CashPlanningGroup desc',
    KnownOrNegotiatedLeave: 'KnownOrNegotiatedLeave',
    KnownOrNegotiatedLeaveDesc: 'KnownOrNegotiatedLeave desc',
    ValueAdjustmentKey: 'ValueAdjustmentKey',
    ValueAdjustmentKeyDesc: 'ValueAdjustmentKey desc',
    CustomerAccountGroup: 'CustomerAccountGroup',
    CustomerAccountGroupDesc: 'CustomerAccountGroup desc'
} as const;
export type ACustomerCustomerToCustomerCompanyGetOrderbyEnum = typeof ACustomerCustomerToCustomerCompanyGetOrderbyEnum[keyof typeof ACustomerCustomerToCustomerCompanyGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerCompanyGetSelectEnum = {
    Customer: 'Customer',
    CompanyCode: 'CompanyCode',
    AparToleranceGroup: 'APARToleranceGroup',
    AccountByCustomer: 'AccountByCustomer',
    AccountingClerk: 'AccountingClerk',
    AccountingClerkFaxNumber: 'AccountingClerkFaxNumber',
    AccountingClerkInternetAddress: 'AccountingClerkInternetAddress',
    AccountingClerkPhoneNumber: 'AccountingClerkPhoneNumber',
    AlternativePayerAccount: 'AlternativePayerAccount',
    AuthorizationGroup: 'AuthorizationGroup',
    CollectiveInvoiceVariant: 'CollectiveInvoiceVariant',
    CustomerAccountNote: 'CustomerAccountNote',
    CustomerHeadOffice: 'CustomerHeadOffice',
    CustomerSupplierClearingIsUsed: 'CustomerSupplierClearingIsUsed',
    HouseBank: 'HouseBank',
    InterestCalculationCode: 'InterestCalculationCode',
    InterestCalculationDate: 'InterestCalculationDate',
    IntrstCalcFrequencyInMonths: 'IntrstCalcFrequencyInMonths',
    IsToBeLocallyProcessed: 'IsToBeLocallyProcessed',
    ItemIsToBePaidSeparately: 'ItemIsToBePaidSeparately',
    LayoutSortingRule: 'LayoutSortingRule',
    PaymentBlockingReason: 'PaymentBlockingReason',
    PaymentMethodsList: 'PaymentMethodsList',
    PaymentReason: 'PaymentReason',
    PaymentTerms: 'PaymentTerms',
    PaytAdviceIsSentbyEdi: 'PaytAdviceIsSentbyEDI',
    PhysicalInventoryBlockInd: 'PhysicalInventoryBlockInd',
    ReconciliationAccount: 'ReconciliationAccount',
    RecordPaymentHistoryIndicator: 'RecordPaymentHistoryIndicator',
    UserAtCustomer: 'UserAtCustomer',
    DeletionIndicator: 'DeletionIndicator',
    CashPlanningGroup: 'CashPlanningGroup',
    KnownOrNegotiatedLeave: 'KnownOrNegotiatedLeave',
    ValueAdjustmentKey: 'ValueAdjustmentKey',
    CustomerAccountGroup: 'CustomerAccountGroup'
} as const;
export type ACustomerCustomerToCustomerCompanyGetSelectEnum = typeof ACustomerCustomerToCustomerCompanyGetSelectEnum[keyof typeof ACustomerCustomerToCustomerCompanyGetSelectEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerCompanyGetExpandEnum = {
    Star: '*',
    ToCompanyText: 'to_CompanyText',
    ToCustomerDunning: 'to_CustomerDunning',
    ToWithHoldingTax: 'to_WithHoldingTax'
} as const;
export type ACustomerCustomerToCustomerCompanyGetExpandEnum = typeof ACustomerCustomerToCustomerCompanyGetExpandEnum[keyof typeof ACustomerCustomerToCustomerCompanyGetExpandEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerSalesAreaGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    AccountByCustomer: 'AccountByCustomer',
    AccountByCustomerDesc: 'AccountByCustomer desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    BillingIsBlockedForCustomer: 'BillingIsBlockedForCustomer',
    BillingIsBlockedForCustomerDesc: 'BillingIsBlockedForCustomer desc',
    CompleteDeliveryIsDefined: 'CompleteDeliveryIsDefined',
    CompleteDeliveryIsDefinedDesc: 'CompleteDeliveryIsDefined desc',
    CreditControlArea: 'CreditControlArea',
    CreditControlAreaDesc: 'CreditControlArea desc',
    Currency: 'Currency',
    CurrencyDesc: 'Currency desc',
    CustIsRlvtForSettlmtMgmt: 'CustIsRlvtForSettlmtMgmt',
    CustIsRlvtForSettlmtMgmtDesc: 'CustIsRlvtForSettlmtMgmt desc',
    CustomerAbcClassification: 'CustomerABCClassification',
    CustomerAbcClassificationDesc: 'CustomerABCClassification desc',
    CustomerAccountAssignmentGroup: 'CustomerAccountAssignmentGroup',
    CustomerAccountAssignmentGroupDesc: 'CustomerAccountAssignmentGroup desc',
    CustomerGroup: 'CustomerGroup',
    CustomerGroupDesc: 'CustomerGroup desc',
    CustomerIsRebateRelevant: 'CustomerIsRebateRelevant',
    CustomerIsRebateRelevantDesc: 'CustomerIsRebateRelevant desc',
    CustomerPaymentTerms: 'CustomerPaymentTerms',
    CustomerPaymentTermsDesc: 'CustomerPaymentTerms desc',
    CustomerPriceGroup: 'CustomerPriceGroup',
    CustomerPriceGroupDesc: 'CustomerPriceGroup desc',
    CustomerPricingProcedure: 'CustomerPricingProcedure',
    CustomerPricingProcedureDesc: 'CustomerPricingProcedure desc',
    CustProdProposalProcedure: 'CustProdProposalProcedure',
    CustProdProposalProcedureDesc: 'CustProdProposalProcedure desc',
    DeliveryIsBlockedForCustomer: 'DeliveryIsBlockedForCustomer',
    DeliveryIsBlockedForCustomerDesc: 'DeliveryIsBlockedForCustomer desc',
    DeliveryPriority: 'DeliveryPriority',
    DeliveryPriorityDesc: 'DeliveryPriority desc',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsClassificationDesc: 'IncotermsClassification desc',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsLocation2Desc: 'IncotermsLocation2 desc',
    IncotermsVersion: 'IncotermsVersion',
    IncotermsVersionDesc: 'IncotermsVersion desc',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsLocation1Desc: 'IncotermsLocation1 desc',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc1AddlUuidDesc: 'IncotermsSupChnLoc1AddlUUID desc',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnLoc2AddlUuidDesc: 'IncotermsSupChnLoc2AddlUUID desc',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    IncotermsSupChnDvtgLocAddlUuidDesc: 'IncotermsSupChnDvtgLocAddlUUID desc',
    DeletionIndicator: 'DeletionIndicator',
    DeletionIndicatorDesc: 'DeletionIndicator desc',
    IncotermsTransferLocation: 'IncotermsTransferLocation',
    IncotermsTransferLocationDesc: 'IncotermsTransferLocation desc',
    InspSbstHasNoTimeOrQuantity: 'InspSbstHasNoTimeOrQuantity',
    InspSbstHasNoTimeOrQuantityDesc: 'InspSbstHasNoTimeOrQuantity desc',
    InvoiceDate: 'InvoiceDate',
    InvoiceDateDesc: 'InvoiceDate desc',
    ItemOrderProbabilityInPercent: 'ItemOrderProbabilityInPercent',
    ItemOrderProbabilityInPercentDesc: 'ItemOrderProbabilityInPercent desc',
    ManualInvoiceMaintIsRelevant: 'ManualInvoiceMaintIsRelevant',
    ManualInvoiceMaintIsRelevantDesc: 'ManualInvoiceMaintIsRelevant desc',
    MaxNmbrOfPartialDelivery: 'MaxNmbrOfPartialDelivery',
    MaxNmbrOfPartialDeliveryDesc: 'MaxNmbrOfPartialDelivery desc',
    OrderCombinationIsAllowed: 'OrderCombinationIsAllowed',
    OrderCombinationIsAllowedDesc: 'OrderCombinationIsAllowed desc',
    OrderIsBlockedForCustomer: 'OrderIsBlockedForCustomer',
    OrderIsBlockedForCustomerDesc: 'OrderIsBlockedForCustomer desc',
    OverdelivTolrtdLmtRatioInPct: 'OverdelivTolrtdLmtRatioInPct',
    OverdelivTolrtdLmtRatioInPctDesc: 'OverdelivTolrtdLmtRatioInPct desc',
    PartialDeliveryIsAllowed: 'PartialDeliveryIsAllowed',
    PartialDeliveryIsAllowedDesc: 'PartialDeliveryIsAllowed desc',
    PriceListType: 'PriceListType',
    PriceListTypeDesc: 'PriceListType desc',
    ProductUnitGroup: 'ProductUnitGroup',
    ProductUnitGroupDesc: 'ProductUnitGroup desc',
    ProofOfDeliveryTimeValue: 'ProofOfDeliveryTimeValue',
    ProofOfDeliveryTimeValueDesc: 'ProofOfDeliveryTimeValue desc',
    SalesGroup: 'SalesGroup',
    SalesGroupDesc: 'SalesGroup desc',
    SalesItemProposal: 'SalesItemProposal',
    SalesItemProposalDesc: 'SalesItemProposal desc',
    SalesOffice: 'SalesOffice',
    SalesOfficeDesc: 'SalesOffice desc',
    ShippingCondition: 'ShippingCondition',
    ShippingConditionDesc: 'ShippingCondition desc',
    SlsDocIsRlvtForProofOfDeliv: 'SlsDocIsRlvtForProofOfDeliv',
    SlsDocIsRlvtForProofOfDelivDesc: 'SlsDocIsRlvtForProofOfDeliv desc',
    SlsUnlmtdOvrdelivIsAllwd: 'SlsUnlmtdOvrdelivIsAllwd',
    SlsUnlmtdOvrdelivIsAllwdDesc: 'SlsUnlmtdOvrdelivIsAllwd desc',
    SupplyingPlant: 'SupplyingPlant',
    SupplyingPlantDesc: 'SupplyingPlant desc',
    SalesDistrict: 'SalesDistrict',
    SalesDistrictDesc: 'SalesDistrict desc',
    UnderdelivTolrtdLmtRatioInPct: 'UnderdelivTolrtdLmtRatioInPct',
    UnderdelivTolrtdLmtRatioInPctDesc: 'UnderdelivTolrtdLmtRatioInPct desc',
    InvoiceListSchedule: 'InvoiceListSchedule',
    InvoiceListScheduleDesc: 'InvoiceListSchedule desc',
    ExchangeRateType: 'ExchangeRateType',
    ExchangeRateTypeDesc: 'ExchangeRateType desc',
    AdditionalCustomerGroup1: 'AdditionalCustomerGroup1',
    AdditionalCustomerGroup1Desc: 'AdditionalCustomerGroup1 desc',
    AdditionalCustomerGroup2: 'AdditionalCustomerGroup2',
    AdditionalCustomerGroup2Desc: 'AdditionalCustomerGroup2 desc',
    AdditionalCustomerGroup3: 'AdditionalCustomerGroup3',
    AdditionalCustomerGroup3Desc: 'AdditionalCustomerGroup3 desc',
    AdditionalCustomerGroup4: 'AdditionalCustomerGroup4',
    AdditionalCustomerGroup4Desc: 'AdditionalCustomerGroup4 desc',
    AdditionalCustomerGroup5: 'AdditionalCustomerGroup5',
    AdditionalCustomerGroup5Desc: 'AdditionalCustomerGroup5 desc',
    PaymentGuaranteeProcedure: 'PaymentGuaranteeProcedure',
    PaymentGuaranteeProcedureDesc: 'PaymentGuaranteeProcedure desc',
    CustomerAccountGroup: 'CustomerAccountGroup',
    CustomerAccountGroupDesc: 'CustomerAccountGroup desc'
} as const;
export type ACustomerCustomerToCustomerSalesAreaGetOrderbyEnum = typeof ACustomerCustomerToCustomerSalesAreaGetOrderbyEnum[keyof typeof ACustomerCustomerToCustomerSalesAreaGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerSalesAreaGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    AccountByCustomer: 'AccountByCustomer',
    AuthorizationGroup: 'AuthorizationGroup',
    BillingIsBlockedForCustomer: 'BillingIsBlockedForCustomer',
    CompleteDeliveryIsDefined: 'CompleteDeliveryIsDefined',
    CreditControlArea: 'CreditControlArea',
    Currency: 'Currency',
    CustIsRlvtForSettlmtMgmt: 'CustIsRlvtForSettlmtMgmt',
    CustomerAbcClassification: 'CustomerABCClassification',
    CustomerAccountAssignmentGroup: 'CustomerAccountAssignmentGroup',
    CustomerGroup: 'CustomerGroup',
    CustomerIsRebateRelevant: 'CustomerIsRebateRelevant',
    CustomerPaymentTerms: 'CustomerPaymentTerms',
    CustomerPriceGroup: 'CustomerPriceGroup',
    CustomerPricingProcedure: 'CustomerPricingProcedure',
    CustProdProposalProcedure: 'CustProdProposalProcedure',
    DeliveryIsBlockedForCustomer: 'DeliveryIsBlockedForCustomer',
    DeliveryPriority: 'DeliveryPriority',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsVersion: 'IncotermsVersion',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    DeletionIndicator: 'DeletionIndicator',
    IncotermsTransferLocation: 'IncotermsTransferLocation',
    InspSbstHasNoTimeOrQuantity: 'InspSbstHasNoTimeOrQuantity',
    InvoiceDate: 'InvoiceDate',
    ItemOrderProbabilityInPercent: 'ItemOrderProbabilityInPercent',
    ManualInvoiceMaintIsRelevant: 'ManualInvoiceMaintIsRelevant',
    MaxNmbrOfPartialDelivery: 'MaxNmbrOfPartialDelivery',
    OrderCombinationIsAllowed: 'OrderCombinationIsAllowed',
    OrderIsBlockedForCustomer: 'OrderIsBlockedForCustomer',
    OverdelivTolrtdLmtRatioInPct: 'OverdelivTolrtdLmtRatioInPct',
    PartialDeliveryIsAllowed: 'PartialDeliveryIsAllowed',
    PriceListType: 'PriceListType',
    ProductUnitGroup: 'ProductUnitGroup',
    ProofOfDeliveryTimeValue: 'ProofOfDeliveryTimeValue',
    SalesGroup: 'SalesGroup',
    SalesItemProposal: 'SalesItemProposal',
    SalesOffice: 'SalesOffice',
    ShippingCondition: 'ShippingCondition',
    SlsDocIsRlvtForProofOfDeliv: 'SlsDocIsRlvtForProofOfDeliv',
    SlsUnlmtdOvrdelivIsAllwd: 'SlsUnlmtdOvrdelivIsAllwd',
    SupplyingPlant: 'SupplyingPlant',
    SalesDistrict: 'SalesDistrict',
    UnderdelivTolrtdLmtRatioInPct: 'UnderdelivTolrtdLmtRatioInPct',
    InvoiceListSchedule: 'InvoiceListSchedule',
    ExchangeRateType: 'ExchangeRateType',
    AdditionalCustomerGroup1: 'AdditionalCustomerGroup1',
    AdditionalCustomerGroup2: 'AdditionalCustomerGroup2',
    AdditionalCustomerGroup3: 'AdditionalCustomerGroup3',
    AdditionalCustomerGroup4: 'AdditionalCustomerGroup4',
    AdditionalCustomerGroup5: 'AdditionalCustomerGroup5',
    PaymentGuaranteeProcedure: 'PaymentGuaranteeProcedure',
    CustomerAccountGroup: 'CustomerAccountGroup'
} as const;
export type ACustomerCustomerToCustomerSalesAreaGetSelectEnum = typeof ACustomerCustomerToCustomerSalesAreaGetSelectEnum[keyof typeof ACustomerCustomerToCustomerSalesAreaGetSelectEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerSalesAreaGetExpandEnum = {
    Star: '*',
    ToPartnerFunction: 'to_PartnerFunction',
    ToSalesAreaTax: 'to_SalesAreaTax',
    ToSalesAreaText: 'to_SalesAreaText',
    ToSlsAreaAddrDepdntInfo: 'to_SlsAreaAddrDepdntInfo'
} as const;
export type ACustomerCustomerToCustomerSalesAreaGetExpandEnum = typeof ACustomerCustomerToCustomerSalesAreaGetExpandEnum[keyof typeof ACustomerCustomerToCustomerSalesAreaGetExpandEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerTaxGroupingGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    CustomerTaxGroupingCode: 'CustomerTaxGroupingCode',
    CustomerTaxGroupingCodeDesc: 'CustomerTaxGroupingCode desc',
    CustTaxGrpExemptionCertificate: 'CustTaxGrpExemptionCertificate',
    CustTaxGrpExemptionCertificateDesc: 'CustTaxGrpExemptionCertificate desc',
    CustTaxGroupExemptionRate: 'CustTaxGroupExemptionRate',
    CustTaxGroupExemptionRateDesc: 'CustTaxGroupExemptionRate desc',
    CustTaxGroupExemptionStartDate: 'CustTaxGroupExemptionStartDate',
    CustTaxGroupExemptionStartDateDesc: 'CustTaxGroupExemptionStartDate desc',
    CustTaxGroupExemptionEndDate: 'CustTaxGroupExemptionEndDate',
    CustTaxGroupExemptionEndDateDesc: 'CustTaxGroupExemptionEndDate desc',
    CustTaxGroupSubjectedStartDate: 'CustTaxGroupSubjectedStartDate',
    CustTaxGroupSubjectedStartDateDesc: 'CustTaxGroupSubjectedStartDate desc',
    CustTaxGroupSubjectedEndDate: 'CustTaxGroupSubjectedEndDate',
    CustTaxGroupSubjectedEndDateDesc: 'CustTaxGroupSubjectedEndDate desc'
} as const;
export type ACustomerCustomerToCustomerTaxGroupingGetOrderbyEnum = typeof ACustomerCustomerToCustomerTaxGroupingGetOrderbyEnum[keyof typeof ACustomerCustomerToCustomerTaxGroupingGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerTaxGroupingGetSelectEnum = {
    Customer: 'Customer',
    CustomerTaxGroupingCode: 'CustomerTaxGroupingCode',
    CustTaxGrpExemptionCertificate: 'CustTaxGrpExemptionCertificate',
    CustTaxGroupExemptionRate: 'CustTaxGroupExemptionRate',
    CustTaxGroupExemptionStartDate: 'CustTaxGroupExemptionStartDate',
    CustTaxGroupExemptionEndDate: 'CustTaxGroupExemptionEndDate',
    CustTaxGroupSubjectedStartDate: 'CustTaxGroupSubjectedStartDate',
    CustTaxGroupSubjectedEndDate: 'CustTaxGroupSubjectedEndDate'
} as const;
export type ACustomerCustomerToCustomerTaxGroupingGetSelectEnum = typeof ACustomerCustomerToCustomerTaxGroupingGetSelectEnum[keyof typeof ACustomerCustomerToCustomerTaxGroupingGetSelectEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerTextGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    LongTextId: 'LongTextID',
    LongTextIdDesc: 'LongTextID desc'
} as const;
export type ACustomerCustomerToCustomerTextGetOrderbyEnum = typeof ACustomerCustomerToCustomerTextGetOrderbyEnum[keyof typeof ACustomerCustomerToCustomerTextGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerTextGetSelectEnum = {
    Customer: 'Customer',
    Language: 'Language',
    LongTextId: 'LongTextID',
    LongText: 'LongText'
} as const;
export type ACustomerCustomerToCustomerTextGetSelectEnum = typeof ACustomerCustomerToCustomerTextGetSelectEnum[keyof typeof ACustomerCustomerToCustomerTextGetSelectEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerUnloadingPointGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    UnloadingPointName: 'UnloadingPointName',
    UnloadingPointNameDesc: 'UnloadingPointName desc',
    CustomerFactoryCalenderCode: 'CustomerFactoryCalenderCode',
    CustomerFactoryCalenderCodeDesc: 'CustomerFactoryCalenderCode desc',
    BpGoodsReceivingHoursCode: 'BPGoodsReceivingHoursCode',
    BpGoodsReceivingHoursCodeDesc: 'BPGoodsReceivingHoursCode desc',
    IsDfltBpUnloadingPoint: 'IsDfltBPUnloadingPoint',
    IsDfltBpUnloadingPointDesc: 'IsDfltBPUnloadingPoint desc',
    MondayMorningOpeningTime: 'MondayMorningOpeningTime',
    MondayMorningOpeningTimeDesc: 'MondayMorningOpeningTime desc',
    MondayMorningClosingTime: 'MondayMorningClosingTime',
    MondayMorningClosingTimeDesc: 'MondayMorningClosingTime desc',
    MondayAfternoonOpeningTime: 'MondayAfternoonOpeningTime',
    MondayAfternoonOpeningTimeDesc: 'MondayAfternoonOpeningTime desc',
    MondayAfternoonClosingTime: 'MondayAfternoonClosingTime',
    MondayAfternoonClosingTimeDesc: 'MondayAfternoonClosingTime desc',
    TuesdayMorningOpeningTime: 'TuesdayMorningOpeningTime',
    TuesdayMorningOpeningTimeDesc: 'TuesdayMorningOpeningTime desc',
    TuesdayMorningClosingTime: 'TuesdayMorningClosingTime',
    TuesdayMorningClosingTimeDesc: 'TuesdayMorningClosingTime desc',
    TuesdayAfternoonOpeningTime: 'TuesdayAfternoonOpeningTime',
    TuesdayAfternoonOpeningTimeDesc: 'TuesdayAfternoonOpeningTime desc',
    TuesdayAfternoonClosingTime: 'TuesdayAfternoonClosingTime',
    TuesdayAfternoonClosingTimeDesc: 'TuesdayAfternoonClosingTime desc',
    WednesdayMorningOpeningTime: 'WednesdayMorningOpeningTime',
    WednesdayMorningOpeningTimeDesc: 'WednesdayMorningOpeningTime desc',
    WednesdayMorningClosingTime: 'WednesdayMorningClosingTime',
    WednesdayMorningClosingTimeDesc: 'WednesdayMorningClosingTime desc',
    WednesdayAfternoonOpeningTime: 'WednesdayAfternoonOpeningTime',
    WednesdayAfternoonOpeningTimeDesc: 'WednesdayAfternoonOpeningTime desc',
    WednesdayAfternoonClosingTime: 'WednesdayAfternoonClosingTime',
    WednesdayAfternoonClosingTimeDesc: 'WednesdayAfternoonClosingTime desc',
    ThursdayMorningOpeningTime: 'ThursdayMorningOpeningTime',
    ThursdayMorningOpeningTimeDesc: 'ThursdayMorningOpeningTime desc',
    ThursdayMorningClosingTime: 'ThursdayMorningClosingTime',
    ThursdayMorningClosingTimeDesc: 'ThursdayMorningClosingTime desc',
    ThursdayAfternoonOpeningTime: 'ThursdayAfternoonOpeningTime',
    ThursdayAfternoonOpeningTimeDesc: 'ThursdayAfternoonOpeningTime desc',
    ThursdayAfternoonClosingTime: 'ThursdayAfternoonClosingTime',
    ThursdayAfternoonClosingTimeDesc: 'ThursdayAfternoonClosingTime desc',
    FridayMorningOpeningTime: 'FridayMorningOpeningTime',
    FridayMorningOpeningTimeDesc: 'FridayMorningOpeningTime desc',
    FridayMorningClosingTime: 'FridayMorningClosingTime',
    FridayMorningClosingTimeDesc: 'FridayMorningClosingTime desc',
    FridayAfternoonOpeningTime: 'FridayAfternoonOpeningTime',
    FridayAfternoonOpeningTimeDesc: 'FridayAfternoonOpeningTime desc',
    FridayAfternoonClosingTime: 'FridayAfternoonClosingTime',
    FridayAfternoonClosingTimeDesc: 'FridayAfternoonClosingTime desc',
    SaturdayMorningOpeningTime: 'SaturdayMorningOpeningTime',
    SaturdayMorningOpeningTimeDesc: 'SaturdayMorningOpeningTime desc',
    SaturdayMorningClosingTime: 'SaturdayMorningClosingTime',
    SaturdayMorningClosingTimeDesc: 'SaturdayMorningClosingTime desc',
    SaturdayAfternoonOpeningTime: 'SaturdayAfternoonOpeningTime',
    SaturdayAfternoonOpeningTimeDesc: 'SaturdayAfternoonOpeningTime desc',
    SaturdayAfternoonClosingTime: 'SaturdayAfternoonClosingTime',
    SaturdayAfternoonClosingTimeDesc: 'SaturdayAfternoonClosingTime desc',
    SundayMorningOpeningTime: 'SundayMorningOpeningTime',
    SundayMorningOpeningTimeDesc: 'SundayMorningOpeningTime desc',
    SundayMorningClosingTime: 'SundayMorningClosingTime',
    SundayMorningClosingTimeDesc: 'SundayMorningClosingTime desc',
    SundayAfternoonOpeningTime: 'SundayAfternoonOpeningTime',
    SundayAfternoonOpeningTimeDesc: 'SundayAfternoonOpeningTime desc',
    SundayAfternoonClosingTime: 'SundayAfternoonClosingTime',
    SundayAfternoonClosingTimeDesc: 'SundayAfternoonClosingTime desc'
} as const;
export type ACustomerCustomerToCustomerUnloadingPointGetOrderbyEnum = typeof ACustomerCustomerToCustomerUnloadingPointGetOrderbyEnum[keyof typeof ACustomerCustomerToCustomerUnloadingPointGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustomerUnloadingPointGetSelectEnum = {
    Customer: 'Customer',
    UnloadingPointName: 'UnloadingPointName',
    CustomerFactoryCalenderCode: 'CustomerFactoryCalenderCode',
    BpGoodsReceivingHoursCode: 'BPGoodsReceivingHoursCode',
    IsDfltBpUnloadingPoint: 'IsDfltBPUnloadingPoint',
    MondayMorningOpeningTime: 'MondayMorningOpeningTime',
    MondayMorningClosingTime: 'MondayMorningClosingTime',
    MondayAfternoonOpeningTime: 'MondayAfternoonOpeningTime',
    MondayAfternoonClosingTime: 'MondayAfternoonClosingTime',
    TuesdayMorningOpeningTime: 'TuesdayMorningOpeningTime',
    TuesdayMorningClosingTime: 'TuesdayMorningClosingTime',
    TuesdayAfternoonOpeningTime: 'TuesdayAfternoonOpeningTime',
    TuesdayAfternoonClosingTime: 'TuesdayAfternoonClosingTime',
    WednesdayMorningOpeningTime: 'WednesdayMorningOpeningTime',
    WednesdayMorningClosingTime: 'WednesdayMorningClosingTime',
    WednesdayAfternoonOpeningTime: 'WednesdayAfternoonOpeningTime',
    WednesdayAfternoonClosingTime: 'WednesdayAfternoonClosingTime',
    ThursdayMorningOpeningTime: 'ThursdayMorningOpeningTime',
    ThursdayMorningClosingTime: 'ThursdayMorningClosingTime',
    ThursdayAfternoonOpeningTime: 'ThursdayAfternoonOpeningTime',
    ThursdayAfternoonClosingTime: 'ThursdayAfternoonClosingTime',
    FridayMorningOpeningTime: 'FridayMorningOpeningTime',
    FridayMorningClosingTime: 'FridayMorningClosingTime',
    FridayAfternoonOpeningTime: 'FridayAfternoonOpeningTime',
    FridayAfternoonClosingTime: 'FridayAfternoonClosingTime',
    SaturdayMorningOpeningTime: 'SaturdayMorningOpeningTime',
    SaturdayMorningClosingTime: 'SaturdayMorningClosingTime',
    SaturdayAfternoonOpeningTime: 'SaturdayAfternoonOpeningTime',
    SaturdayAfternoonClosingTime: 'SaturdayAfternoonClosingTime',
    SundayMorningOpeningTime: 'SundayMorningOpeningTime',
    SundayMorningClosingTime: 'SundayMorningClosingTime',
    SundayAfternoonOpeningTime: 'SundayAfternoonOpeningTime',
    SundayAfternoonClosingTime: 'SundayAfternoonClosingTime'
} as const;
export type ACustomerCustomerToCustomerUnloadingPointGetSelectEnum = typeof ACustomerCustomerToCustomerUnloadingPointGetSelectEnum[keyof typeof ACustomerCustomerToCustomerUnloadingPointGetSelectEnum];
/**
 * @export
 */
export const ACustomerGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    BillingIsBlockedForCustomer: 'BillingIsBlockedForCustomer',
    BillingIsBlockedForCustomerDesc: 'BillingIsBlockedForCustomer desc',
    CreatedByUser: 'CreatedByUser',
    CreatedByUserDesc: 'CreatedByUser desc',
    CreationDate: 'CreationDate',
    CreationDateDesc: 'CreationDate desc',
    CustomerAccountGroup: 'CustomerAccountGroup',
    CustomerAccountGroupDesc: 'CustomerAccountGroup desc',
    CustomerClassification: 'CustomerClassification',
    CustomerClassificationDesc: 'CustomerClassification desc',
    CustomerFullName: 'CustomerFullName',
    CustomerFullNameDesc: 'CustomerFullName desc',
    BpCustomerFullName: 'BPCustomerFullName',
    BpCustomerFullNameDesc: 'BPCustomerFullName desc',
    CustomerName: 'CustomerName',
    CustomerNameDesc: 'CustomerName desc',
    BpCustomerName: 'BPCustomerName',
    BpCustomerNameDesc: 'BPCustomerName desc',
    DeliveryIsBlocked: 'DeliveryIsBlocked',
    DeliveryIsBlockedDesc: 'DeliveryIsBlocked desc',
    FreeDefinedAttribute01: 'FreeDefinedAttribute01',
    FreeDefinedAttribute01Desc: 'FreeDefinedAttribute01 desc',
    FreeDefinedAttribute02: 'FreeDefinedAttribute02',
    FreeDefinedAttribute02Desc: 'FreeDefinedAttribute02 desc',
    FreeDefinedAttribute03: 'FreeDefinedAttribute03',
    FreeDefinedAttribute03Desc: 'FreeDefinedAttribute03 desc',
    FreeDefinedAttribute04: 'FreeDefinedAttribute04',
    FreeDefinedAttribute04Desc: 'FreeDefinedAttribute04 desc',
    FreeDefinedAttribute05: 'FreeDefinedAttribute05',
    FreeDefinedAttribute05Desc: 'FreeDefinedAttribute05 desc',
    FreeDefinedAttribute06: 'FreeDefinedAttribute06',
    FreeDefinedAttribute06Desc: 'FreeDefinedAttribute06 desc',
    FreeDefinedAttribute07: 'FreeDefinedAttribute07',
    FreeDefinedAttribute07Desc: 'FreeDefinedAttribute07 desc',
    FreeDefinedAttribute08: 'FreeDefinedAttribute08',
    FreeDefinedAttribute08Desc: 'FreeDefinedAttribute08 desc',
    FreeDefinedAttribute09: 'FreeDefinedAttribute09',
    FreeDefinedAttribute09Desc: 'FreeDefinedAttribute09 desc',
    FreeDefinedAttribute10: 'FreeDefinedAttribute10',
    FreeDefinedAttribute10Desc: 'FreeDefinedAttribute10 desc',
    NfPartnerIsNaturalPerson: 'NFPartnerIsNaturalPerson',
    NfPartnerIsNaturalPersonDesc: 'NFPartnerIsNaturalPerson desc',
    OrderIsBlockedForCustomer: 'OrderIsBlockedForCustomer',
    OrderIsBlockedForCustomerDesc: 'OrderIsBlockedForCustomer desc',
    PostingIsBlocked: 'PostingIsBlocked',
    PostingIsBlockedDesc: 'PostingIsBlocked desc',
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    CustomerCorporateGroup: 'CustomerCorporateGroup',
    CustomerCorporateGroupDesc: 'CustomerCorporateGroup desc',
    FiscalAddress: 'FiscalAddress',
    FiscalAddressDesc: 'FiscalAddress desc',
    Industry: 'Industry',
    IndustryDesc: 'Industry desc',
    IndustryCode1: 'IndustryCode1',
    IndustryCode1Desc: 'IndustryCode1 desc',
    IndustryCode2: 'IndustryCode2',
    IndustryCode2Desc: 'IndustryCode2 desc',
    IndustryCode3: 'IndustryCode3',
    IndustryCode3Desc: 'IndustryCode3 desc',
    IndustryCode4: 'IndustryCode4',
    IndustryCode4Desc: 'IndustryCode4 desc',
    IndustryCode5: 'IndustryCode5',
    IndustryCode5Desc: 'IndustryCode5 desc',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber1Desc: 'InternationalLocationNumber1 desc',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber2Desc: 'InternationalLocationNumber2 desc',
    InternationalLocationNumber3: 'InternationalLocationNumber3',
    InternationalLocationNumber3Desc: 'InternationalLocationNumber3 desc',
    NielsenRegion: 'NielsenRegion',
    NielsenRegionDesc: 'NielsenRegion desc',
    PaymentReason: 'PaymentReason',
    PaymentReasonDesc: 'PaymentReason desc',
    ResponsibleType: 'ResponsibleType',
    ResponsibleTypeDesc: 'ResponsibleType desc',
    TaxNumber1: 'TaxNumber1',
    TaxNumber1Desc: 'TaxNumber1 desc',
    TaxNumber2: 'TaxNumber2',
    TaxNumber2Desc: 'TaxNumber2 desc',
    TaxNumber3: 'TaxNumber3',
    TaxNumber3Desc: 'TaxNumber3 desc',
    TaxNumber4: 'TaxNumber4',
    TaxNumber4Desc: 'TaxNumber4 desc',
    TaxNumber5: 'TaxNumber5',
    TaxNumber5Desc: 'TaxNumber5 desc',
    TaxNumberType: 'TaxNumberType',
    TaxNumberTypeDesc: 'TaxNumberType desc',
    VatRegistration: 'VATRegistration',
    VatRegistrationDesc: 'VATRegistration desc',
    DeletionIndicator: 'DeletionIndicator',
    DeletionIndicatorDesc: 'DeletionIndicator desc',
    ExpressTrainStationName: 'ExpressTrainStationName',
    ExpressTrainStationNameDesc: 'ExpressTrainStationName desc',
    TrainStationName: 'TrainStationName',
    TrainStationNameDesc: 'TrainStationName desc',
    CityCode: 'CityCode',
    CityCodeDesc: 'CityCode desc',
    County: 'County',
    CountyDesc: 'County desc'
} as const;
export type ACustomerGetOrderbyEnum = typeof ACustomerGetOrderbyEnum[keyof typeof ACustomerGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerGetSelectEnum = {
    Customer: 'Customer',
    AuthorizationGroup: 'AuthorizationGroup',
    BillingIsBlockedForCustomer: 'BillingIsBlockedForCustomer',
    CreatedByUser: 'CreatedByUser',
    CreationDate: 'CreationDate',
    CustomerAccountGroup: 'CustomerAccountGroup',
    CustomerClassification: 'CustomerClassification',
    CustomerFullName: 'CustomerFullName',
    BpCustomerFullName: 'BPCustomerFullName',
    CustomerName: 'CustomerName',
    BpCustomerName: 'BPCustomerName',
    DeliveryIsBlocked: 'DeliveryIsBlocked',
    FreeDefinedAttribute01: 'FreeDefinedAttribute01',
    FreeDefinedAttribute02: 'FreeDefinedAttribute02',
    FreeDefinedAttribute03: 'FreeDefinedAttribute03',
    FreeDefinedAttribute04: 'FreeDefinedAttribute04',
    FreeDefinedAttribute05: 'FreeDefinedAttribute05',
    FreeDefinedAttribute06: 'FreeDefinedAttribute06',
    FreeDefinedAttribute07: 'FreeDefinedAttribute07',
    FreeDefinedAttribute08: 'FreeDefinedAttribute08',
    FreeDefinedAttribute09: 'FreeDefinedAttribute09',
    FreeDefinedAttribute10: 'FreeDefinedAttribute10',
    NfPartnerIsNaturalPerson: 'NFPartnerIsNaturalPerson',
    OrderIsBlockedForCustomer: 'OrderIsBlockedForCustomer',
    PostingIsBlocked: 'PostingIsBlocked',
    Supplier: 'Supplier',
    CustomerCorporateGroup: 'CustomerCorporateGroup',
    FiscalAddress: 'FiscalAddress',
    Industry: 'Industry',
    IndustryCode1: 'IndustryCode1',
    IndustryCode2: 'IndustryCode2',
    IndustryCode3: 'IndustryCode3',
    IndustryCode4: 'IndustryCode4',
    IndustryCode5: 'IndustryCode5',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber3: 'InternationalLocationNumber3',
    NielsenRegion: 'NielsenRegion',
    PaymentReason: 'PaymentReason',
    ResponsibleType: 'ResponsibleType',
    TaxNumber1: 'TaxNumber1',
    TaxNumber2: 'TaxNumber2',
    TaxNumber3: 'TaxNumber3',
    TaxNumber4: 'TaxNumber4',
    TaxNumber5: 'TaxNumber5',
    TaxNumberType: 'TaxNumberType',
    VatRegistration: 'VATRegistration',
    DeletionIndicator: 'DeletionIndicator',
    ExpressTrainStationName: 'ExpressTrainStationName',
    TrainStationName: 'TrainStationName',
    CityCode: 'CityCode',
    County: 'County'
} as const;
export type ACustomerGetSelectEnum = typeof ACustomerGetSelectEnum[keyof typeof ACustomerGetSelectEnum];
/**
 * @export
 */
export const ACustomerGetExpandEnum = {
    Star: '*',
    ToCustAddrDepdntExtIdentifier: 'to_CustAddrDepdntExtIdentifier',
    ToCustAddrDepdntInformation: 'to_CustAddrDepdntInformation',
    ToCustomerCompany: 'to_CustomerCompany',
    ToCustomerSalesArea: 'to_CustomerSalesArea',
    ToCustomerTaxGrouping: 'to_CustomerTaxGrouping',
    ToCustomerText: 'to_CustomerText',
    ToCustomerUnloadingPoint: 'to_CustomerUnloadingPoint',
    ToCustUnldgPtAddrDepdntInfo: 'to_CustUnldgPtAddrDepdntInfo'
} as const;
export type ACustomerGetExpandEnum = typeof ACustomerGetExpandEnum[keyof typeof ACustomerGetExpandEnum];
