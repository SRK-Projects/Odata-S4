/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERAAddressEmailAddressType,
  APIBUSINESSPARTNERAAddressEmailAddressTypeCreate,
  APIBUSINESSPARTNERAAddressFaxNumberType,
  APIBUSINESSPARTNERAAddressFaxNumberTypeCreate,
  APIBUSINESSPARTNERAAddressHomePageURLType,
  APIBUSINESSPARTNERAAddressHomePageURLTypeCreate,
  APIBUSINESSPARTNERAAddressPhoneNumberType,
  APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate,
  APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberType,
  APIBUSINESSPARTNERABPIntlAddressVersionType,
  APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate,
  APIBUSINESSPARTNERABuPaAddressUsageType,
  APIBUSINESSPARTNERABuPaAddressUsageTypeCreate,
  APIBUSINESSPARTNERABusinessPartnerAddressType,
  APIBUSINESSPARTNERABusinessPartnerAddressTypeCreate,
  APIBUSINESSPARTNERABusinessPartnerAddressTypeUpdate,
  CollectionOfAAddressEmailAddressType,
  CollectionOfAAddressFaxNumberType,
  CollectionOfAAddressHomePageURLType,
  CollectionOfAAddressPhoneNumberType,
  CollectionOfABPIntlAddressVersionType,
  CollectionOfABuPaAddressUsageType,
  CollectionOfABusinessPartnerAddressType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERAAddressEmailAddressTypeFromJSON,
    APIBUSINESSPARTNERAAddressEmailAddressTypeToJSON,
    APIBUSINESSPARTNERAAddressEmailAddressTypeCreateFromJSON,
    APIBUSINESSPARTNERAAddressEmailAddressTypeCreateToJSON,
    APIBUSINESSPARTNERAAddressFaxNumberTypeFromJSON,
    APIBUSINESSPARTNERAAddressFaxNumberTypeToJSON,
    APIBUSINESSPARTNERAAddressFaxNumberTypeCreateFromJSON,
    APIBUSINESSPARTNERAAddressFaxNumberTypeCreateToJSON,
    APIBUSINESSPARTNERAAddressHomePageURLTypeFromJSON,
    APIBUSINESSPARTNERAAddressHomePageURLTypeToJSON,
    APIBUSINESSPARTNERAAddressHomePageURLTypeCreateFromJSON,
    APIBUSINESSPARTNERAAddressHomePageURLTypeCreateToJSON,
    APIBUSINESSPARTNERAAddressPhoneNumberTypeFromJSON,
    APIBUSINESSPARTNERAAddressPhoneNumberTypeToJSON,
    APIBUSINESSPARTNERAAddressPhoneNumberTypeCreateFromJSON,
    APIBUSINESSPARTNERAAddressPhoneNumberTypeCreateToJSON,
    APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeFromJSON,
    APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeToJSON,
    APIBUSINESSPARTNERABPIntlAddressVersionTypeFromJSON,
    APIBUSINESSPARTNERABPIntlAddressVersionTypeToJSON,
    APIBUSINESSPARTNERABPIntlAddressVersionTypeCreateFromJSON,
    APIBUSINESSPARTNERABPIntlAddressVersionTypeCreateToJSON,
    APIBUSINESSPARTNERABuPaAddressUsageTypeFromJSON,
    APIBUSINESSPARTNERABuPaAddressUsageTypeToJSON,
    APIBUSINESSPARTNERABuPaAddressUsageTypeCreateFromJSON,
    APIBUSINESSPARTNERABuPaAddressUsageTypeCreateToJSON,
    APIBUSINESSPARTNERABusinessPartnerAddressTypeFromJSON,
    APIBUSINESSPARTNERABusinessPartnerAddressTypeToJSON,
    APIBUSINESSPARTNERABusinessPartnerAddressTypeCreateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerAddressTypeCreateToJSON,
    APIBUSINESSPARTNERABusinessPartnerAddressTypeUpdateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerAddressTypeUpdateToJSON,
    CollectionOfAAddressEmailAddressTypeFromJSON,
    CollectionOfAAddressEmailAddressTypeToJSON,
    CollectionOfAAddressFaxNumberTypeFromJSON,
    CollectionOfAAddressFaxNumberTypeToJSON,
    CollectionOfAAddressHomePageURLTypeFromJSON,
    CollectionOfAAddressHomePageURLTypeToJSON,
    CollectionOfAAddressPhoneNumberTypeFromJSON,
    CollectionOfAAddressPhoneNumberTypeToJSON,
    CollectionOfABPIntlAddressVersionTypeFromJSON,
    CollectionOfABPIntlAddressVersionTypeToJSON,
    CollectionOfABuPaAddressUsageTypeFromJSON,
    CollectionOfABuPaAddressUsageTypeToJSON,
    CollectionOfABusinessPartnerAddressTypeFromJSON,
    CollectionOfABusinessPartnerAddressTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteRequest {
    businessPartner: string;
    addressID: string;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetRequest {
    businessPartner: string;
    addressID: string;
    $select?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetSelectEnum>;
    $expand?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetExpandEnum>;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatchRequest {
    businessPartner: string;
    addressID: string;
    aPIBUSINESSPARTNERABusinessPartnerAddressTypeUpdate: APIBUSINESSPARTNERABusinessPartnerAddressTypeUpdate;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetRequest {
    businessPartner: string;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetSelectEnum>;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostRequest {
    businessPartner: string;
    addressID: string;
    aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate: APIBUSINESSPARTNERABuPaAddressUsageTypeCreate;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetRequest {
    businessPartner: string;
    addressID: string;
    $select?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetSelectEnum>;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetRequest {
    businessPartner: string;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetSelectEnum>;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostRequest {
    businessPartner: string;
    addressID: string;
    aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate: APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetRequest {
    businessPartner: string;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetSelectEnum>;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostRequest {
    businessPartner: string;
    addressID: string;
    aPIBUSINESSPARTNERAAddressEmailAddressTypeCreate: APIBUSINESSPARTNERAAddressEmailAddressTypeCreate;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetRequest {
    businessPartner: string;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetSelectEnum>;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostRequest {
    businessPartner: string;
    addressID: string;
    aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate: APIBUSINESSPARTNERAAddressFaxNumberTypeCreate;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetRequest {
    businessPartner: string;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetSelectEnum>;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostRequest {
    businessPartner: string;
    addressID: string;
    aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetRequest {
    businessPartner: string;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetSelectEnum>;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostRequest {
    businessPartner: string;
    addressID: string;
    aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetRequest {
    businessPartner: string;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetSelectEnum>;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostRequest {
    businessPartner: string;
    addressID: string;
    aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate: APIBUSINESSPARTNERAAddressHomePageURLTypeCreate;
}

export interface ABusinessPartnerAddressGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerAddressGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerAddressGetSelectEnum>;
    $expand?: Set<ABusinessPartnerAddressGetExpandEnum>;
}

export interface ABusinessPartnerAddressPostRequest {
    aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate: APIBUSINESSPARTNERABusinessPartnerAddressTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetSelectEnum>;
    $expand?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetExpandEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerAddressPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate: APIBUSINESSPARTNERABusinessPartnerAddressTypeCreate;
}

/**
 * 
 */
export class AddressApi extends runtime.BaseAPI {

    /**
     * Deletes address data of the business partner including Phone, Fax, Email, URI, and Usage data.
     * Deletes business partner address record identified by address ID and business partner number.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes address data of the business partner including Phone, Fax, Email, URI, and Usage data.
     * Deletes business partner address record identified by address ID and business partner number.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves business partner address data by using business partner number and address ID.
     * Retrieves business partner address data by using the key field.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerAddressType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerAddressTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner address data by using business partner number and address ID.
     * Retrieves business partner address data by using the key field.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerAddressType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates business partner address data of the record identified by address ID and business partner number.
     * Updates business partner address data.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatchRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerAddressTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerAddressTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerAddressTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerAddressTypeUpdate was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerAddressTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerAddressTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates business partner address data of the record identified by address ID and business partner number.
     * Updates business partner address data.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all the address usage records linked to all business partner address records in the system.
     * Retrieves address usage linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABuPaAddressUsageType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_AddressUsage`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABuPaAddressUsageTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the address usage records linked to all business partner address records in the system.
     * Retrieves address usage linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABuPaAddressUsageType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns address usage data to existing business partner address.
     * Creates an address usage record linked to a existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABuPaAddressUsageType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_AddressUsage`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABuPaAddressUsageTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABuPaAddressUsageTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABuPaAddressUsageTypeFromJSON(jsonValue));
    }

    /**
     * Assigns address usage data to existing business partner address.
     * Creates an address usage record linked to a existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABuPaAddressUsageType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves general data of all the supplier records available in the system.
     * Retrieves address dependent data for the business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_BPAddrDepdntIntlLocNumber`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves general data of all the supplier records available in the system.
     * Retrieves address dependent data for the business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPAddrDepdntIntlLocNumberType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get entities from related to_BPIntlAddressVersion
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPIntlAddressVersionType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_BPIntlAddressVersion`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPIntlAddressVersionTypeFromJSON(jsonValue));
    }

    /**
     * Get entities from related to_BPIntlAddressVersion
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPIntlAddressVersionType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add new entity to related to_BPIntlAddressVersion
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPIntlAddressVersionType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_BPIntlAddressVersion`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPIntlAddressVersionTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPIntlAddressVersionTypeFromJSON(jsonValue));
    }

    /**
     * Add new entity to related to_BPIntlAddressVersion
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPIntlAddressVersionType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the email address data linked to all business partner address records in the system.
     * Retrieves email address data linked to business partner address fields.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressEmailAddressType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_EmailAddress`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressEmailAddressTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the email address data linked to all business partner address records in the system.
     * Retrieves email address data linked to business partner address fields.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressEmailAddressType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new email address data for the existing business partner address record. Multiple emails can be linked to an address record.
     * Creates a new email address data for the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressEmailAddressType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressEmailAddressTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressEmailAddressTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressEmailAddressTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressEmailAddressTypeCreate was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_EmailAddress`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressEmailAddressTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressEmailAddressTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressEmailAddressTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new email address data for the existing business partner address record. Multiple emails can be linked to an address record.
     * Creates a new email address data for the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressEmailAddressType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the fax address data linked to all the business partner address records in the system
     * Retrieves fax address data linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressFaxNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_FaxNumber`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressFaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the fax address data linked to all the business partner address records in the system
     * Retrieves fax address data linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressFaxNumberType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new fax address record for the existing business partner address record. Multiple fax can be linked to an address record.
     * Creates a new fax address data for the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressFaxNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_FaxNumber`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressFaxNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressFaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new fax address record for the existing business partner address record. Multiple fax can be linked to an address record.
     * Creates a new fax address data for the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressFaxNumberType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressPhoneNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_MobilePhoneNumber`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressPhoneNumberType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressPhoneNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_MobilePhoneNumber`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressPhoneNumberType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressPhoneNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_PhoneNumber`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressPhoneNumberType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressPhoneNumberType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_PhoneNumber`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressPhoneNumberType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the home page URL address records linked to all business partner address records in the system.
     * Retrieves home page URL address records linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressHomePageURLType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_URLAddress`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressHomePageURLTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the home page URL address records linked to all business partner address records in the system.
     * Retrieves home page URL address records linked to business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressHomePageURLType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new home page URL to the existing business partner address record. Multiple URLs can be linked to an address record.
     * Creates a new home page URL address record to the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressHomePageURLType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_URLAddress`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressHomePageURLTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressHomePageURLTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new home page URL to the existing business partner address record. Multiple URLs can be linked to an address record.
     * Creates a new home page URL address record to the existing business partner address.
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressHomePageURLType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner address data fields of all the available records in the system.
     * Retrieves business partner address data.
     */
    async aBusinessPartnerAddressGetRaw(requestParameters: ABusinessPartnerAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerAddressType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerAddressTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner address data fields of all the available records in the system.
     * Retrieves business partner address data.
     */
    async aBusinessPartnerAddressGet(requestParameters: ABusinessPartnerAddressGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerAddressType> {
        const response = await this.aBusinessPartnerAddressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new address data for an existing business partner. Address ID is automatically generated.
     * Creates a new address data for an existing business partner.
     */
    async aBusinessPartnerAddressPostRaw(requestParameters: ABusinessPartnerAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerAddressType>> {
        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate was null or undefined when calling aBusinessPartnerAddressPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerAddressTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerAddressTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new address data for an existing business partner. Address ID is automatically generated.
     * Creates a new address data for an existing business partner.
     */
    async aBusinessPartnerAddressPost(requestParameters: ABusinessPartnerAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerAddressType> {
        const response = await this.aBusinessPartnerAddressPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner address data fields of all the available records in the system.
     * Retrieves business partner address data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerAddressType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerAddress`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerAddressTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner address data fields of all the available records in the system.
     * Retrieves business partner address data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerAddressType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new address data for an existing business partner. Address ID is automatically generated.
     * Creates a new address data for an existing business partner.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerAddressType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerAddress`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerAddressTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerAddressTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerAddressTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new address data for an existing business partner. Address ID is automatically generated.
     * Creates a new address data for an existing business partner.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerAddressType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    ValidityStartDate: 'ValidityStartDate',
    ValidityEndDate: 'ValidityEndDate',
    AuthorizationGroup: 'AuthorizationGroup',
    AddressUuid: 'AddressUUID',
    AdditionalStreetPrefixName: 'AdditionalStreetPrefixName',
    AdditionalStreetSuffixName: 'AdditionalStreetSuffixName',
    AddressTimeZone: 'AddressTimeZone',
    CareOfName: 'CareOfName',
    CityCode: 'CityCode',
    CityName: 'CityName',
    CompanyPostalCode: 'CompanyPostalCode',
    Country: 'Country',
    County: 'County',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    District: 'District',
    FormOfAddress: 'FormOfAddress',
    FullName: 'FullName',
    HomeCityName: 'HomeCityName',
    HouseNumber: 'HouseNumber',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    Language: 'Language',
    PoBox: 'POBox',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxPostalCode: 'POBoxPostalCode',
    Person: 'Person',
    PostalCode: 'PostalCode',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    Region: 'Region',
    StreetName: 'StreetName',
    StreetPrefixName: 'StreetPrefixName',
    StreetSuffixName: 'StreetSuffixName',
    TaxJurisdiction: 'TaxJurisdiction',
    TransportZone: 'TransportZone',
    AddressIdbyExternalSystem: 'AddressIDByExternalSystem',
    CountyCode: 'CountyCode',
    TownshipCode: 'TownshipCode',
    TownshipName: 'TownshipName'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetSelectEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetSelectEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetExpandEnum = {
    Star: '*',
    ToAddressUsage: 'to_AddressUsage',
    ToBpAddrDepdntIntlLocNumber: 'to_BPAddrDepdntIntlLocNumber',
    ToBpIntlAddressVersion: 'to_BPIntlAddressVersion',
    ToEmailAddress: 'to_EmailAddress',
    ToFaxNumber: 'to_FaxNumber',
    ToMobilePhoneNumber: 'to_MobilePhoneNumber',
    ToPhoneNumber: 'to_PhoneNumber',
    ToUrlAddress: 'to_URLAddress'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetExpandEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetExpandEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetExpandEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    AddressUsage: 'AddressUsage',
    AddressUsageDesc: 'AddressUsage desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    StandardUsage: 'StandardUsage',
    StandardUsageDesc: 'StandardUsage desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetOrderbyEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetOrderbyEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    ValidityEndDate: 'ValidityEndDate',
    AddressUsage: 'AddressUsage',
    AddressId: 'AddressID',
    ValidityStartDate: 'ValidityStartDate',
    StandardUsage: 'StandardUsage',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetSelectEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetSelectEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber3: 'InternationalLocationNumber3'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetSelectEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetSelectEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    AddressRepresentationCode: 'AddressRepresentationCode',
    AddressRepresentationCodeDesc: 'AddressRepresentationCode desc',
    AddresseeFullName: 'AddresseeFullName',
    AddresseeFullNameDesc: 'AddresseeFullName desc',
    AddressIdbyExternalSystem: 'AddressIDByExternalSystem',
    AddressIdbyExternalSystemDesc: 'AddressIDByExternalSystem desc',
    AddressPersonId: 'AddressPersonID',
    AddressPersonIdDesc: 'AddressPersonID desc',
    AddressSearchTerm1: 'AddressSearchTerm1',
    AddressSearchTerm1Desc: 'AddressSearchTerm1 desc',
    AddressSearchTerm2: 'AddressSearchTerm2',
    AddressSearchTerm2Desc: 'AddressSearchTerm2 desc',
    AddressTimeZone: 'AddressTimeZone',
    AddressTimeZoneDesc: 'AddressTimeZone desc',
    CareOfName: 'CareOfName',
    CareOfNameDesc: 'CareOfName desc',
    CityName: 'CityName',
    CityNameDesc: 'CityName desc',
    CityNumber: 'CityNumber',
    CityNumberDesc: 'CityNumber desc',
    CompanyPostalCode: 'CompanyPostalCode',
    CompanyPostalCodeDesc: 'CompanyPostalCode desc',
    Country: 'Country',
    CountryDesc: 'Country desc',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceNumberDesc: 'DeliveryServiceNumber desc',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    DeliveryServiceTypeCodeDesc: 'DeliveryServiceTypeCode desc',
    DistrictName: 'DistrictName',
    DistrictNameDesc: 'DistrictName desc',
    FormOfAddress: 'FormOfAddress',
    FormOfAddressDesc: 'FormOfAddress desc',
    HouseNumber: 'HouseNumber',
    HouseNumberDesc: 'HouseNumber desc',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    HouseNumberSupplementTextDesc: 'HouseNumberSupplementText desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    OrganizationName1: 'OrganizationName1',
    OrganizationName1Desc: 'OrganizationName1 desc',
    OrganizationName2: 'OrganizationName2',
    OrganizationName2Desc: 'OrganizationName2 desc',
    OrganizationName3: 'OrganizationName3',
    OrganizationName3Desc: 'OrganizationName3 desc',
    OrganizationName4: 'OrganizationName4',
    OrganizationName4Desc: 'OrganizationName4 desc',
    PersonFamilyName: 'PersonFamilyName',
    PersonFamilyNameDesc: 'PersonFamilyName desc',
    PersonGivenName: 'PersonGivenName',
    PersonGivenNameDesc: 'PersonGivenName desc',
    PoBox: 'POBox',
    PoBoxDesc: 'POBox desc',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCityNameDesc: 'POBoxDeviatingCityName desc',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingCountryDesc: 'POBoxDeviatingCountry desc',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxDeviatingRegionDesc: 'POBoxDeviatingRegion desc',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxIsWithoutNumberDesc: 'POBoxIsWithoutNumber desc',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxLobbyNameDesc: 'POBoxLobbyName desc',
    PoBoxPostalCode: 'POBoxPostalCode',
    PoBoxPostalCodeDesc: 'POBoxPostalCode desc',
    PostalCode: 'PostalCode',
    PostalCodeDesc: 'PostalCode desc',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    PrfrdCommMediumTypeDesc: 'PrfrdCommMediumType desc',
    Region: 'Region',
    RegionDesc: 'Region desc',
    SecondaryRegion: 'SecondaryRegion',
    SecondaryRegionDesc: 'SecondaryRegion desc',
    SecondaryRegionName: 'SecondaryRegionName',
    SecondaryRegionNameDesc: 'SecondaryRegionName desc',
    StreetName: 'StreetName',
    StreetNameDesc: 'StreetName desc',
    StreetPrefixName1: 'StreetPrefixName1',
    StreetPrefixName1Desc: 'StreetPrefixName1 desc',
    StreetPrefixName2: 'StreetPrefixName2',
    StreetPrefixName2Desc: 'StreetPrefixName2 desc',
    StreetSuffixName1: 'StreetSuffixName1',
    StreetSuffixName1Desc: 'StreetSuffixName1 desc',
    StreetSuffixName2: 'StreetSuffixName2',
    StreetSuffixName2Desc: 'StreetSuffixName2 desc',
    TaxJurisdiction: 'TaxJurisdiction',
    TaxJurisdictionDesc: 'TaxJurisdiction desc',
    TertiaryRegion: 'TertiaryRegion',
    TertiaryRegionDesc: 'TertiaryRegion desc',
    TertiaryRegionName: 'TertiaryRegionName',
    TertiaryRegionNameDesc: 'TertiaryRegionName desc',
    TransportZone: 'TransportZone',
    TransportZoneDesc: 'TransportZone desc',
    VillageName: 'VillageName',
    VillageNameDesc: 'VillageName desc'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetOrderbyEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetOrderbyEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    AddressRepresentationCode: 'AddressRepresentationCode',
    AddresseeFullName: 'AddresseeFullName',
    AddressIdbyExternalSystem: 'AddressIDByExternalSystem',
    AddressPersonId: 'AddressPersonID',
    AddressSearchTerm1: 'AddressSearchTerm1',
    AddressSearchTerm2: 'AddressSearchTerm2',
    AddressTimeZone: 'AddressTimeZone',
    CareOfName: 'CareOfName',
    CityName: 'CityName',
    CityNumber: 'CityNumber',
    CompanyPostalCode: 'CompanyPostalCode',
    Country: 'Country',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    DistrictName: 'DistrictName',
    FormOfAddress: 'FormOfAddress',
    HouseNumber: 'HouseNumber',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    Language: 'Language',
    OrganizationName1: 'OrganizationName1',
    OrganizationName2: 'OrganizationName2',
    OrganizationName3: 'OrganizationName3',
    OrganizationName4: 'OrganizationName4',
    PersonFamilyName: 'PersonFamilyName',
    PersonGivenName: 'PersonGivenName',
    PoBox: 'POBox',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxPostalCode: 'POBoxPostalCode',
    PostalCode: 'PostalCode',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    Region: 'Region',
    SecondaryRegion: 'SecondaryRegion',
    SecondaryRegionName: 'SecondaryRegionName',
    StreetName: 'StreetName',
    StreetPrefixName1: 'StreetPrefixName1',
    StreetPrefixName2: 'StreetPrefixName2',
    StreetSuffixName1: 'StreetSuffixName1',
    StreetSuffixName2: 'StreetSuffixName2',
    TaxJurisdiction: 'TaxJurisdiction',
    TertiaryRegion: 'TertiaryRegion',
    TertiaryRegionName: 'TertiaryRegionName',
    TransportZone: 'TransportZone',
    VillageName: 'VillageName'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetSelectEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetSelectEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    IsDefaultEmailAddress: 'IsDefaultEmailAddress',
    IsDefaultEmailAddressDesc: 'IsDefaultEmailAddress desc',
    EmailAddress: 'EmailAddress',
    EmailAddressDesc: 'EmailAddress desc',
    SearchEmailAddress: 'SearchEmailAddress',
    SearchEmailAddressDesc: 'SearchEmailAddress desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetOrderbyEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetOrderbyEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    IsDefaultEmailAddress: 'IsDefaultEmailAddress',
    EmailAddress: 'EmailAddress',
    SearchEmailAddress: 'SearchEmailAddress',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetSelectEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetSelectEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    IsDefaultFaxNumber: 'IsDefaultFaxNumber',
    IsDefaultFaxNumberDesc: 'IsDefaultFaxNumber desc',
    FaxCountry: 'FaxCountry',
    FaxCountryDesc: 'FaxCountry desc',
    FaxNumber: 'FaxNumber',
    FaxNumberDesc: 'FaxNumber desc',
    FaxNumberExtension: 'FaxNumberExtension',
    FaxNumberExtensionDesc: 'FaxNumberExtension desc',
    InternationalFaxNumber: 'InternationalFaxNumber',
    InternationalFaxNumberDesc: 'InternationalFaxNumber desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetOrderbyEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetOrderbyEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    IsDefaultFaxNumber: 'IsDefaultFaxNumber',
    FaxCountry: 'FaxCountry',
    FaxNumber: 'FaxNumber',
    FaxNumberExtension: 'FaxNumberExtension',
    InternationalFaxNumber: 'InternationalFaxNumber',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetSelectEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetSelectEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    DestinationLocationCountry: 'DestinationLocationCountry',
    DestinationLocationCountryDesc: 'DestinationLocationCountry desc',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    IsDefaultPhoneNumberDesc: 'IsDefaultPhoneNumber desc',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberDesc: 'PhoneNumber desc',
    PhoneNumberExtension: 'PhoneNumberExtension',
    PhoneNumberExtensionDesc: 'PhoneNumberExtension desc',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    InternationalPhoneNumberDesc: 'InternationalPhoneNumber desc',
    PhoneNumberType: 'PhoneNumberType',
    PhoneNumberTypeDesc: 'PhoneNumberType desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    DestinationLocationCountry: 'DestinationLocationCountry',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberExtension: 'PhoneNumberExtension',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    PhoneNumberType: 'PhoneNumberType',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetSelectEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetSelectEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    DestinationLocationCountry: 'DestinationLocationCountry',
    DestinationLocationCountryDesc: 'DestinationLocationCountry desc',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    IsDefaultPhoneNumberDesc: 'IsDefaultPhoneNumber desc',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberDesc: 'PhoneNumber desc',
    PhoneNumberExtension: 'PhoneNumberExtension',
    PhoneNumberExtensionDesc: 'PhoneNumberExtension desc',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    InternationalPhoneNumberDesc: 'InternationalPhoneNumber desc',
    PhoneNumberType: 'PhoneNumberType',
    PhoneNumberTypeDesc: 'PhoneNumberType desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetOrderbyEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetOrderbyEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    DestinationLocationCountry: 'DestinationLocationCountry',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberExtension: 'PhoneNumberExtension',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    PhoneNumberType: 'PhoneNumberType',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetSelectEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetSelectEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    IsDefaultUrlAddressDesc: 'IsDefaultURLAddress desc',
    SearchUrlAddress: 'SearchURLAddress',
    SearchUrlAddressDesc: 'SearchURLAddress desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc',
    UrlFieldLength: 'URLFieldLength',
    UrlFieldLengthDesc: 'URLFieldLength desc',
    WebsiteUrl: 'WebsiteURL',
    WebsiteUrlDesc: 'WebsiteURL desc'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetOrderbyEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetOrderbyEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    ValidityStartDate: 'ValidityStartDate',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    SearchUrlAddress: 'SearchURLAddress',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    UrlFieldLength: 'URLFieldLength',
    WebsiteUrl: 'WebsiteURL'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetSelectEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetSelectEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    AddressUuid: 'AddressUUID',
    AddressUuidDesc: 'AddressUUID desc',
    AdditionalStreetPrefixName: 'AdditionalStreetPrefixName',
    AdditionalStreetPrefixNameDesc: 'AdditionalStreetPrefixName desc',
    AdditionalStreetSuffixName: 'AdditionalStreetSuffixName',
    AdditionalStreetSuffixNameDesc: 'AdditionalStreetSuffixName desc',
    AddressTimeZone: 'AddressTimeZone',
    AddressTimeZoneDesc: 'AddressTimeZone desc',
    CareOfName: 'CareOfName',
    CareOfNameDesc: 'CareOfName desc',
    CityCode: 'CityCode',
    CityCodeDesc: 'CityCode desc',
    CityName: 'CityName',
    CityNameDesc: 'CityName desc',
    CompanyPostalCode: 'CompanyPostalCode',
    CompanyPostalCodeDesc: 'CompanyPostalCode desc',
    Country: 'Country',
    CountryDesc: 'Country desc',
    County: 'County',
    CountyDesc: 'County desc',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceNumberDesc: 'DeliveryServiceNumber desc',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    DeliveryServiceTypeCodeDesc: 'DeliveryServiceTypeCode desc',
    District: 'District',
    DistrictDesc: 'District desc',
    FormOfAddress: 'FormOfAddress',
    FormOfAddressDesc: 'FormOfAddress desc',
    FullName: 'FullName',
    FullNameDesc: 'FullName desc',
    HomeCityName: 'HomeCityName',
    HomeCityNameDesc: 'HomeCityName desc',
    HouseNumber: 'HouseNumber',
    HouseNumberDesc: 'HouseNumber desc',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    HouseNumberSupplementTextDesc: 'HouseNumberSupplementText desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    PoBox: 'POBox',
    PoBoxDesc: 'POBox desc',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCityNameDesc: 'POBoxDeviatingCityName desc',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingCountryDesc: 'POBoxDeviatingCountry desc',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxDeviatingRegionDesc: 'POBoxDeviatingRegion desc',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxIsWithoutNumberDesc: 'POBoxIsWithoutNumber desc',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxLobbyNameDesc: 'POBoxLobbyName desc',
    PoBoxPostalCode: 'POBoxPostalCode',
    PoBoxPostalCodeDesc: 'POBoxPostalCode desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    PostalCode: 'PostalCode',
    PostalCodeDesc: 'PostalCode desc',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    PrfrdCommMediumTypeDesc: 'PrfrdCommMediumType desc',
    Region: 'Region',
    RegionDesc: 'Region desc',
    StreetName: 'StreetName',
    StreetNameDesc: 'StreetName desc',
    StreetPrefixName: 'StreetPrefixName',
    StreetPrefixNameDesc: 'StreetPrefixName desc',
    StreetSuffixName: 'StreetSuffixName',
    StreetSuffixNameDesc: 'StreetSuffixName desc',
    TaxJurisdiction: 'TaxJurisdiction',
    TaxJurisdictionDesc: 'TaxJurisdiction desc',
    TransportZone: 'TransportZone',
    TransportZoneDesc: 'TransportZone desc',
    AddressIdbyExternalSystem: 'AddressIDByExternalSystem',
    AddressIdbyExternalSystemDesc: 'AddressIDByExternalSystem desc',
    CountyCode: 'CountyCode',
    CountyCodeDesc: 'CountyCode desc',
    TownshipCode: 'TownshipCode',
    TownshipCodeDesc: 'TownshipCode desc',
    TownshipName: 'TownshipName',
    TownshipNameDesc: 'TownshipName desc'
} as const;
export type ABusinessPartnerAddressGetOrderbyEnum = typeof ABusinessPartnerAddressGetOrderbyEnum[keyof typeof ABusinessPartnerAddressGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    ValidityStartDate: 'ValidityStartDate',
    ValidityEndDate: 'ValidityEndDate',
    AuthorizationGroup: 'AuthorizationGroup',
    AddressUuid: 'AddressUUID',
    AdditionalStreetPrefixName: 'AdditionalStreetPrefixName',
    AdditionalStreetSuffixName: 'AdditionalStreetSuffixName',
    AddressTimeZone: 'AddressTimeZone',
    CareOfName: 'CareOfName',
    CityCode: 'CityCode',
    CityName: 'CityName',
    CompanyPostalCode: 'CompanyPostalCode',
    Country: 'Country',
    County: 'County',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    District: 'District',
    FormOfAddress: 'FormOfAddress',
    FullName: 'FullName',
    HomeCityName: 'HomeCityName',
    HouseNumber: 'HouseNumber',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    Language: 'Language',
    PoBox: 'POBox',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxPostalCode: 'POBoxPostalCode',
    Person: 'Person',
    PostalCode: 'PostalCode',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    Region: 'Region',
    StreetName: 'StreetName',
    StreetPrefixName: 'StreetPrefixName',
    StreetSuffixName: 'StreetSuffixName',
    TaxJurisdiction: 'TaxJurisdiction',
    TransportZone: 'TransportZone',
    AddressIdbyExternalSystem: 'AddressIDByExternalSystem',
    CountyCode: 'CountyCode',
    TownshipCode: 'TownshipCode',
    TownshipName: 'TownshipName'
} as const;
export type ABusinessPartnerAddressGetSelectEnum = typeof ABusinessPartnerAddressGetSelectEnum[keyof typeof ABusinessPartnerAddressGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressGetExpandEnum = {
    Star: '*',
    ToAddressUsage: 'to_AddressUsage',
    ToBpAddrDepdntIntlLocNumber: 'to_BPAddrDepdntIntlLocNumber',
    ToBpIntlAddressVersion: 'to_BPIntlAddressVersion',
    ToEmailAddress: 'to_EmailAddress',
    ToFaxNumber: 'to_FaxNumber',
    ToMobilePhoneNumber: 'to_MobilePhoneNumber',
    ToPhoneNumber: 'to_PhoneNumber',
    ToUrlAddress: 'to_URLAddress'
} as const;
export type ABusinessPartnerAddressGetExpandEnum = typeof ABusinessPartnerAddressGetExpandEnum[keyof typeof ABusinessPartnerAddressGetExpandEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    AddressUuid: 'AddressUUID',
    AddressUuidDesc: 'AddressUUID desc',
    AdditionalStreetPrefixName: 'AdditionalStreetPrefixName',
    AdditionalStreetPrefixNameDesc: 'AdditionalStreetPrefixName desc',
    AdditionalStreetSuffixName: 'AdditionalStreetSuffixName',
    AdditionalStreetSuffixNameDesc: 'AdditionalStreetSuffixName desc',
    AddressTimeZone: 'AddressTimeZone',
    AddressTimeZoneDesc: 'AddressTimeZone desc',
    CareOfName: 'CareOfName',
    CareOfNameDesc: 'CareOfName desc',
    CityCode: 'CityCode',
    CityCodeDesc: 'CityCode desc',
    CityName: 'CityName',
    CityNameDesc: 'CityName desc',
    CompanyPostalCode: 'CompanyPostalCode',
    CompanyPostalCodeDesc: 'CompanyPostalCode desc',
    Country: 'Country',
    CountryDesc: 'Country desc',
    County: 'County',
    CountyDesc: 'County desc',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceNumberDesc: 'DeliveryServiceNumber desc',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    DeliveryServiceTypeCodeDesc: 'DeliveryServiceTypeCode desc',
    District: 'District',
    DistrictDesc: 'District desc',
    FormOfAddress: 'FormOfAddress',
    FormOfAddressDesc: 'FormOfAddress desc',
    FullName: 'FullName',
    FullNameDesc: 'FullName desc',
    HomeCityName: 'HomeCityName',
    HomeCityNameDesc: 'HomeCityName desc',
    HouseNumber: 'HouseNumber',
    HouseNumberDesc: 'HouseNumber desc',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    HouseNumberSupplementTextDesc: 'HouseNumberSupplementText desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    PoBox: 'POBox',
    PoBoxDesc: 'POBox desc',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCityNameDesc: 'POBoxDeviatingCityName desc',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingCountryDesc: 'POBoxDeviatingCountry desc',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxDeviatingRegionDesc: 'POBoxDeviatingRegion desc',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxIsWithoutNumberDesc: 'POBoxIsWithoutNumber desc',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxLobbyNameDesc: 'POBoxLobbyName desc',
    PoBoxPostalCode: 'POBoxPostalCode',
    PoBoxPostalCodeDesc: 'POBoxPostalCode desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    PostalCode: 'PostalCode',
    PostalCodeDesc: 'PostalCode desc',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    PrfrdCommMediumTypeDesc: 'PrfrdCommMediumType desc',
    Region: 'Region',
    RegionDesc: 'Region desc',
    StreetName: 'StreetName',
    StreetNameDesc: 'StreetName desc',
    StreetPrefixName: 'StreetPrefixName',
    StreetPrefixNameDesc: 'StreetPrefixName desc',
    StreetSuffixName: 'StreetSuffixName',
    StreetSuffixNameDesc: 'StreetSuffixName desc',
    TaxJurisdiction: 'TaxJurisdiction',
    TaxJurisdictionDesc: 'TaxJurisdiction desc',
    TransportZone: 'TransportZone',
    TransportZoneDesc: 'TransportZone desc',
    AddressIdbyExternalSystem: 'AddressIDByExternalSystem',
    AddressIdbyExternalSystemDesc: 'AddressIDByExternalSystem desc',
    CountyCode: 'CountyCode',
    CountyCodeDesc: 'CountyCode desc',
    TownshipCode: 'TownshipCode',
    TownshipCodeDesc: 'TownshipCode desc',
    TownshipName: 'TownshipName',
    TownshipNameDesc: 'TownshipName desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    ValidityStartDate: 'ValidityStartDate',
    ValidityEndDate: 'ValidityEndDate',
    AuthorizationGroup: 'AuthorizationGroup',
    AddressUuid: 'AddressUUID',
    AdditionalStreetPrefixName: 'AdditionalStreetPrefixName',
    AdditionalStreetSuffixName: 'AdditionalStreetSuffixName',
    AddressTimeZone: 'AddressTimeZone',
    CareOfName: 'CareOfName',
    CityCode: 'CityCode',
    CityName: 'CityName',
    CompanyPostalCode: 'CompanyPostalCode',
    Country: 'Country',
    County: 'County',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    District: 'District',
    FormOfAddress: 'FormOfAddress',
    FullName: 'FullName',
    HomeCityName: 'HomeCityName',
    HouseNumber: 'HouseNumber',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    Language: 'Language',
    PoBox: 'POBox',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxPostalCode: 'POBoxPostalCode',
    Person: 'Person',
    PostalCode: 'PostalCode',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    Region: 'Region',
    StreetName: 'StreetName',
    StreetPrefixName: 'StreetPrefixName',
    StreetSuffixName: 'StreetSuffixName',
    TaxJurisdiction: 'TaxJurisdiction',
    TransportZone: 'TransportZone',
    AddressIdbyExternalSystem: 'AddressIDByExternalSystem',
    CountyCode: 'CountyCode',
    TownshipCode: 'TownshipCode',
    TownshipName: 'TownshipName'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetExpandEnum = {
    Star: '*',
    ToAddressUsage: 'to_AddressUsage',
    ToBpAddrDepdntIntlLocNumber: 'to_BPAddrDepdntIntlLocNumber',
    ToBpIntlAddressVersion: 'to_BPIntlAddressVersion',
    ToEmailAddress: 'to_EmailAddress',
    ToFaxNumber: 'to_FaxNumber',
    ToMobilePhoneNumber: 'to_MobilePhoneNumber',
    ToPhoneNumber: 'to_PhoneNumber',
    ToUrlAddress: 'to_URLAddress'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetExpandEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetExpandEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerAddressGetExpandEnum];
