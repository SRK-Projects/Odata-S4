/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERASupplierCompanyType,
  APIBUSINESSPARTNERASupplierCompanyTypeCreate,
  APIBUSINESSPARTNERASupplierPurchasingOrgType,
  APIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate,
  APIBUSINESSPARTNERASupplierTextType,
  APIBUSINESSPARTNERASupplierTextTypeCreate,
  APIBUSINESSPARTNERASupplierType,
  APIBUSINESSPARTNERASupplierTypeUpdate,
  CollectionOfASupplierCompanyType,
  CollectionOfASupplierPurchasingOrgType,
  CollectionOfASupplierTextType,
  CollectionOfASupplierType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERASupplierCompanyTypeFromJSON,
    APIBUSINESSPARTNERASupplierCompanyTypeToJSON,
    APIBUSINESSPARTNERASupplierCompanyTypeCreateFromJSON,
    APIBUSINESSPARTNERASupplierCompanyTypeCreateToJSON,
    APIBUSINESSPARTNERASupplierPurchasingOrgTypeFromJSON,
    APIBUSINESSPARTNERASupplierPurchasingOrgTypeToJSON,
    APIBUSINESSPARTNERASupplierPurchasingOrgTypeCreateFromJSON,
    APIBUSINESSPARTNERASupplierPurchasingOrgTypeCreateToJSON,
    APIBUSINESSPARTNERASupplierTextTypeFromJSON,
    APIBUSINESSPARTNERASupplierTextTypeToJSON,
    APIBUSINESSPARTNERASupplierTextTypeCreateFromJSON,
    APIBUSINESSPARTNERASupplierTextTypeCreateToJSON,
    APIBUSINESSPARTNERASupplierTypeFromJSON,
    APIBUSINESSPARTNERASupplierTypeToJSON,
    APIBUSINESSPARTNERASupplierTypeUpdateFromJSON,
    APIBUSINESSPARTNERASupplierTypeUpdateToJSON,
    CollectionOfASupplierCompanyTypeFromJSON,
    CollectionOfASupplierCompanyTypeToJSON,
    CollectionOfASupplierPurchasingOrgTypeFromJSON,
    CollectionOfASupplierPurchasingOrgTypeToJSON,
    CollectionOfASupplierTextTypeFromJSON,
    CollectionOfASupplierTextTypeToJSON,
    CollectionOfASupplierTypeFromJSON,
    CollectionOfASupplierTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABusinessPartnerBusinessPartnerToSupplierGetRequest {
    businessPartner: string;
    $select?: Set<ABusinessPartnerBusinessPartnerToSupplierGetSelectEnum>;
    $expand?: Set<ABusinessPartnerBusinessPartnerToSupplierGetExpandEnum>;
}

export interface ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetRequest {
    supplier: string;
    companyCode: string;
    $select?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetSelectEnum>;
    $expand?: Set<ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetExpandEnum>;
}

export interface ASupplierGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierGetOrderbyEnum>;
    $select?: Set<ASupplierGetSelectEnum>;
    $expand?: Set<ASupplierGetExpandEnum>;
}

export interface ASupplierSupplierGetRequest {
    supplier: string;
    $select?: Set<ASupplierSupplierGetSelectEnum>;
    $expand?: Set<ASupplierSupplierGetExpandEnum>;
}

export interface ASupplierSupplierPatchRequest {
    supplier: string;
    aPIBUSINESSPARTNERASupplierTypeUpdate: APIBUSINESSPARTNERASupplierTypeUpdate;
}

export interface ASupplierSupplierToSupplierCompanyGetRequest {
    supplier: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierSupplierToSupplierCompanyGetOrderbyEnum>;
    $select?: Set<ASupplierSupplierToSupplierCompanyGetSelectEnum>;
    $expand?: Set<ASupplierSupplierToSupplierCompanyGetExpandEnum>;
}

export interface ASupplierSupplierToSupplierCompanyPostRequest {
    supplier: string;
    aPIBUSINESSPARTNERASupplierCompanyTypeCreate: APIBUSINESSPARTNERASupplierCompanyTypeCreate;
}

export interface ASupplierSupplierToSupplierPurchasingOrgGetRequest {
    supplier: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierSupplierToSupplierPurchasingOrgGetOrderbyEnum>;
    $select?: Set<ASupplierSupplierToSupplierPurchasingOrgGetSelectEnum>;
    $expand?: Set<ASupplierSupplierToSupplierPurchasingOrgGetExpandEnum>;
}

export interface ASupplierSupplierToSupplierPurchasingOrgPostRequest {
    supplier: string;
    aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate: APIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate;
}

export interface ASupplierSupplierToSupplierTextGetRequest {
    supplier: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierSupplierToSupplierTextGetOrderbyEnum>;
    $select?: Set<ASupplierSupplierToSupplierTextGetSelectEnum>;
}

export interface ASupplierSupplierToSupplierTextPostRequest {
    supplier: string;
    aPIBUSINESSPARTNERASupplierTextTypeCreate: APIBUSINESSPARTNERASupplierTextTypeCreate;
}

/**
 * 
 */
export class SupplierApi extends runtime.BaseAPI {

    /**
     * Retrieves general data of all the supplier records available in the system.
     * Retrieves supplier general data.
     */
    async aBusinessPartnerBusinessPartnerToSupplierGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToSupplierGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToSupplierGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_Supplier`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves general data of all the supplier records available in the system.
     * Retrieves supplier general data.
     */
    async aBusinessPartnerBusinessPartnerToSupplierGet(requestParameters: ABusinessPartnerBusinessPartnerToSupplierGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierType> {
        const response = await this.aBusinessPartnerBusinessPartnerToSupplierGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves general data of all the supplier records available in the system.
     * Retrieves supplier general data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetRaw(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGet.');
        }

        if (requestParameters.companyCode === null || requestParameters.companyCode === undefined) {
            throw new runtime.RequiredError('companyCode','Required parameter requestParameters.companyCode was null or undefined when calling aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierCompany(Supplier='{Supplier}',CompanyCode='{CompanyCode}')/to_Supplier`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"CompanyCode"}}`, encodeURIComponent(String(requestParameters.companyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves general data of all the supplier records available in the system.
     * Retrieves supplier general data.
     */
    async aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGet(requestParameters: ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierType> {
        const response = await this.aSupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves general data of all the supplier records available in the system.
     * Retrieves supplier general data.
     */
    async aSupplierGetRaw(requestParameters: ASupplierGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Supplier`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves general data of all the supplier records available in the system.
     * Retrieves supplier general data.
     */
    async aSupplierGet(requestParameters: ASupplierGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierType> {
        const response = await this.aSupplierGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the general data of the supplier record by using supplier number.
     * Retrieves supplier general data by using supplier number.
     */
    async aSupplierSupplierGetRaw(requestParameters: ASupplierSupplierGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierSupplierGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Supplier('{Supplier}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves the general data of the supplier record by using supplier number.
     * Retrieves supplier general data by using supplier number.
     */
    async aSupplierSupplierGet(requestParameters: ASupplierSupplierGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierType> {
        const response = await this.aSupplierSupplierGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates supplier general data by using supplier number.
     * Updates supplier general data.
     */
    async aSupplierSupplierPatchRaw(requestParameters: ASupplierSupplierPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierSupplierPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERASupplierTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierTypeUpdate was null or undefined when calling aSupplierSupplierPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Supplier('{Supplier}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates supplier general data by using supplier number.
     * Updates supplier general data.
     */
    async aSupplierSupplierPatch(requestParameters: ASupplierSupplierPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aSupplierSupplierPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all supplier company data available in the system.
     * Retrieves supplier company data.
     */
    async aSupplierSupplierToSupplierCompanyGetRaw(requestParameters: ASupplierSupplierToSupplierCompanyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierCompanyType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierSupplierToSupplierCompanyGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Supplier('{Supplier}')/to_SupplierCompany`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierCompanyTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all supplier company data available in the system.
     * Retrieves supplier company data.
     */
    async aSupplierSupplierToSupplierCompanyGet(requestParameters: ASupplierSupplierToSupplierCompanyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierCompanyType> {
        const response = await this.aSupplierSupplierToSupplierCompanyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates supplier company data including Dunning, WithholdingTax, and Text data.
     * Creates supplier company data.
     */
    async aSupplierSupplierToSupplierCompanyPostRaw(requestParameters: ASupplierSupplierToSupplierCompanyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierCompanyType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierSupplierToSupplierCompanyPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierCompanyTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierCompanyTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierCompanyTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierCompanyTypeCreate was null or undefined when calling aSupplierSupplierToSupplierCompanyPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Supplier('{Supplier}')/to_SupplierCompany`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierCompanyTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierCompanyTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierCompanyTypeFromJSON(jsonValue));
    }

    /**
     * Creates supplier company data including Dunning, WithholdingTax, and Text data.
     * Creates supplier company data.
     */
    async aSupplierSupplierToSupplierCompanyPost(requestParameters: ASupplierSupplierToSupplierCompanyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierCompanyType> {
        const response = await this.aSupplierSupplierToSupplierCompanyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the supplier purchasing organization data attached to supplier records in the system.
     * Retrieves supplier purchasing organization data.
     */
    async aSupplierSupplierToSupplierPurchasingOrgGetRaw(requestParameters: ASupplierSupplierToSupplierPurchasingOrgGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierPurchasingOrgType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierSupplierToSupplierPurchasingOrgGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Supplier('{Supplier}')/to_SupplierPurchasingOrg`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierPurchasingOrgTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the supplier purchasing organization data attached to supplier records in the system.
     * Retrieves supplier purchasing organization data.
     */
    async aSupplierSupplierToSupplierPurchasingOrgGet(requestParameters: ASupplierSupplierToSupplierPurchasingOrgGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierPurchasingOrgType> {
        const response = await this.aSupplierSupplierToSupplierPurchasingOrgGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates supplier purchasing organization data including PartnerFunctions and Text data.
     * Creates supplier purchasing organization data.
     */
    async aSupplierSupplierToSupplierPurchasingOrgPostRaw(requestParameters: ASupplierSupplierToSupplierPurchasingOrgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierPurchasingOrgType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierSupplierToSupplierPurchasingOrgPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate was null or undefined when calling aSupplierSupplierToSupplierPurchasingOrgPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Supplier('{Supplier}')/to_SupplierPurchasingOrg`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierPurchasingOrgTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierPurchasingOrgTypeFromJSON(jsonValue));
    }

    /**
     * Creates supplier purchasing organization data including PartnerFunctions and Text data.
     * Creates supplier purchasing organization data.
     */
    async aSupplierSupplierToSupplierPurchasingOrgPost(requestParameters: ASupplierSupplierToSupplierPurchasingOrgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierPurchasingOrgType> {
        const response = await this.aSupplierSupplierToSupplierPurchasingOrgPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the supplier text data attached to purchasing organization in the system.
     * Retrieves supplier text data.
     */
    async aSupplierSupplierToSupplierTextGetRaw(requestParameters: ASupplierSupplierToSupplierTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierTextType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierSupplierToSupplierTextGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Supplier('{Supplier}')/to_SupplierText`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierTextTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the supplier text data attached to purchasing organization in the system.
     * Retrieves supplier text data.
     */
    async aSupplierSupplierToSupplierTextGet(requestParameters: ASupplierSupplierToSupplierTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierTextType> {
        const response = await this.aSupplierSupplierToSupplierTextGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates text data attached to a supplier in the system.
     * Creates supplier text data.
     */
    async aSupplierSupplierToSupplierTextPostRaw(requestParameters: ASupplierSupplierToSupplierTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierTextType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierSupplierToSupplierTextPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierTextTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierTextTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierTextTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierTextTypeCreate was null or undefined when calling aSupplierSupplierToSupplierTextPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Supplier('{Supplier}')/to_SupplierText`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierTextTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierTextTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierTextTypeFromJSON(jsonValue));
    }

    /**
     * Creates text data attached to a supplier in the system.
     * Creates supplier text data.
     */
    async aSupplierSupplierToSupplierTextPost(requestParameters: ASupplierSupplierToSupplierTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierTextType> {
        const response = await this.aSupplierSupplierToSupplierTextPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToSupplierGetSelectEnum = {
    Supplier: 'Supplier',
    AlternativePayeeAccountNumber: 'AlternativePayeeAccountNumber',
    AuthorizationGroup: 'AuthorizationGroup',
    BusinessPartnerPanNumber: 'BusinessPartnerPanNumber',
    CreatedByUser: 'CreatedByUser',
    CreationDate: 'CreationDate',
    Customer: 'Customer',
    PaymentIsBlockedForSupplier: 'PaymentIsBlockedForSupplier',
    PostingIsBlocked: 'PostingIsBlocked',
    PurchasingIsBlocked: 'PurchasingIsBlocked',
    SupplierAccountGroup: 'SupplierAccountGroup',
    SupplierFullName: 'SupplierFullName',
    SupplierName: 'SupplierName',
    VatRegistration: 'VATRegistration',
    BirthDate: 'BirthDate',
    ConcatenatedInternationalLocNo: 'ConcatenatedInternationalLocNo',
    DeletionIndicator: 'DeletionIndicator',
    FiscalAddress: 'FiscalAddress',
    Industry: 'Industry',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber3: 'InternationalLocationNumber3',
    IsNaturalPerson: 'IsNaturalPerson',
    PaymentReason: 'PaymentReason',
    ResponsibleType: 'ResponsibleType',
    SuplrQltyInProcmtCertfnValidTo: 'SuplrQltyInProcmtCertfnValidTo',
    SuplrQualityManagementSystem: 'SuplrQualityManagementSystem',
    SupplierCorporateGroup: 'SupplierCorporateGroup',
    SupplierProcurementBlock: 'SupplierProcurementBlock',
    TaxNumber1: 'TaxNumber1',
    TaxNumber2: 'TaxNumber2',
    TaxNumber3: 'TaxNumber3',
    TaxNumber4: 'TaxNumber4',
    TaxNumber5: 'TaxNumber5',
    TaxNumberResponsible: 'TaxNumberResponsible',
    TaxNumberType: 'TaxNumberType',
    SuplrProofOfDelivRlvtCode: 'SuplrProofOfDelivRlvtCode',
    BrTaxIsSplit: 'BR_TaxIsSplit',
    DataExchangeInstructionKey: 'DataExchangeInstructionKey'
} as const;
export type ABusinessPartnerBusinessPartnerToSupplierGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToSupplierGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToSupplierGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToSupplierGetExpandEnum = {
    Star: '*',
    ToSupplierCompany: 'to_SupplierCompany',
    ToSupplierPurchasingOrg: 'to_SupplierPurchasingOrg',
    ToSupplierText: 'to_SupplierText'
} as const;
export type ABusinessPartnerBusinessPartnerToSupplierGetExpandEnum = typeof ABusinessPartnerBusinessPartnerToSupplierGetExpandEnum[keyof typeof ABusinessPartnerBusinessPartnerToSupplierGetExpandEnum];
/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetSelectEnum = {
    Supplier: 'Supplier',
    AlternativePayeeAccountNumber: 'AlternativePayeeAccountNumber',
    AuthorizationGroup: 'AuthorizationGroup',
    BusinessPartnerPanNumber: 'BusinessPartnerPanNumber',
    CreatedByUser: 'CreatedByUser',
    CreationDate: 'CreationDate',
    Customer: 'Customer',
    PaymentIsBlockedForSupplier: 'PaymentIsBlockedForSupplier',
    PostingIsBlocked: 'PostingIsBlocked',
    PurchasingIsBlocked: 'PurchasingIsBlocked',
    SupplierAccountGroup: 'SupplierAccountGroup',
    SupplierFullName: 'SupplierFullName',
    SupplierName: 'SupplierName',
    VatRegistration: 'VATRegistration',
    BirthDate: 'BirthDate',
    ConcatenatedInternationalLocNo: 'ConcatenatedInternationalLocNo',
    DeletionIndicator: 'DeletionIndicator',
    FiscalAddress: 'FiscalAddress',
    Industry: 'Industry',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber3: 'InternationalLocationNumber3',
    IsNaturalPerson: 'IsNaturalPerson',
    PaymentReason: 'PaymentReason',
    ResponsibleType: 'ResponsibleType',
    SuplrQltyInProcmtCertfnValidTo: 'SuplrQltyInProcmtCertfnValidTo',
    SuplrQualityManagementSystem: 'SuplrQualityManagementSystem',
    SupplierCorporateGroup: 'SupplierCorporateGroup',
    SupplierProcurementBlock: 'SupplierProcurementBlock',
    TaxNumber1: 'TaxNumber1',
    TaxNumber2: 'TaxNumber2',
    TaxNumber3: 'TaxNumber3',
    TaxNumber4: 'TaxNumber4',
    TaxNumber5: 'TaxNumber5',
    TaxNumberResponsible: 'TaxNumberResponsible',
    TaxNumberType: 'TaxNumberType',
    SuplrProofOfDelivRlvtCode: 'SuplrProofOfDelivRlvtCode',
    BrTaxIsSplit: 'BR_TaxIsSplit',
    DataExchangeInstructionKey: 'DataExchangeInstructionKey'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetSelectEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetSelectEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetSelectEnum];
/**
 * @export
 */
export const ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetExpandEnum = {
    Star: '*',
    ToSupplierCompany: 'to_SupplierCompany',
    ToSupplierPurchasingOrg: 'to_SupplierPurchasingOrg',
    ToSupplierText: 'to_SupplierText'
} as const;
export type ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetExpandEnum = typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetExpandEnum[keyof typeof ASupplierCompanySupplierSupplierCompanyCodeCompanyCodeToSupplierGetExpandEnum];
/**
 * @export
 */
export const ASupplierGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    AlternativePayeeAccountNumber: 'AlternativePayeeAccountNumber',
    AlternativePayeeAccountNumberDesc: 'AlternativePayeeAccountNumber desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    BusinessPartnerPanNumber: 'BusinessPartnerPanNumber',
    BusinessPartnerPanNumberDesc: 'BusinessPartnerPanNumber desc',
    CreatedByUser: 'CreatedByUser',
    CreatedByUserDesc: 'CreatedByUser desc',
    CreationDate: 'CreationDate',
    CreationDateDesc: 'CreationDate desc',
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    PaymentIsBlockedForSupplier: 'PaymentIsBlockedForSupplier',
    PaymentIsBlockedForSupplierDesc: 'PaymentIsBlockedForSupplier desc',
    PostingIsBlocked: 'PostingIsBlocked',
    PostingIsBlockedDesc: 'PostingIsBlocked desc',
    PurchasingIsBlocked: 'PurchasingIsBlocked',
    PurchasingIsBlockedDesc: 'PurchasingIsBlocked desc',
    SupplierAccountGroup: 'SupplierAccountGroup',
    SupplierAccountGroupDesc: 'SupplierAccountGroup desc',
    SupplierFullName: 'SupplierFullName',
    SupplierFullNameDesc: 'SupplierFullName desc',
    SupplierName: 'SupplierName',
    SupplierNameDesc: 'SupplierName desc',
    VatRegistration: 'VATRegistration',
    VatRegistrationDesc: 'VATRegistration desc',
    BirthDate: 'BirthDate',
    BirthDateDesc: 'BirthDate desc',
    ConcatenatedInternationalLocNo: 'ConcatenatedInternationalLocNo',
    ConcatenatedInternationalLocNoDesc: 'ConcatenatedInternationalLocNo desc',
    DeletionIndicator: 'DeletionIndicator',
    DeletionIndicatorDesc: 'DeletionIndicator desc',
    FiscalAddress: 'FiscalAddress',
    FiscalAddressDesc: 'FiscalAddress desc',
    Industry: 'Industry',
    IndustryDesc: 'Industry desc',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber1Desc: 'InternationalLocationNumber1 desc',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber2Desc: 'InternationalLocationNumber2 desc',
    InternationalLocationNumber3: 'InternationalLocationNumber3',
    InternationalLocationNumber3Desc: 'InternationalLocationNumber3 desc',
    IsNaturalPerson: 'IsNaturalPerson',
    IsNaturalPersonDesc: 'IsNaturalPerson desc',
    PaymentReason: 'PaymentReason',
    PaymentReasonDesc: 'PaymentReason desc',
    ResponsibleType: 'ResponsibleType',
    ResponsibleTypeDesc: 'ResponsibleType desc',
    SuplrQltyInProcmtCertfnValidTo: 'SuplrQltyInProcmtCertfnValidTo',
    SuplrQltyInProcmtCertfnValidToDesc: 'SuplrQltyInProcmtCertfnValidTo desc',
    SuplrQualityManagementSystem: 'SuplrQualityManagementSystem',
    SuplrQualityManagementSystemDesc: 'SuplrQualityManagementSystem desc',
    SupplierCorporateGroup: 'SupplierCorporateGroup',
    SupplierCorporateGroupDesc: 'SupplierCorporateGroup desc',
    SupplierProcurementBlock: 'SupplierProcurementBlock',
    SupplierProcurementBlockDesc: 'SupplierProcurementBlock desc',
    TaxNumber1: 'TaxNumber1',
    TaxNumber1Desc: 'TaxNumber1 desc',
    TaxNumber2: 'TaxNumber2',
    TaxNumber2Desc: 'TaxNumber2 desc',
    TaxNumber3: 'TaxNumber3',
    TaxNumber3Desc: 'TaxNumber3 desc',
    TaxNumber4: 'TaxNumber4',
    TaxNumber4Desc: 'TaxNumber4 desc',
    TaxNumber5: 'TaxNumber5',
    TaxNumber5Desc: 'TaxNumber5 desc',
    TaxNumberResponsible: 'TaxNumberResponsible',
    TaxNumberResponsibleDesc: 'TaxNumberResponsible desc',
    TaxNumberType: 'TaxNumberType',
    TaxNumberTypeDesc: 'TaxNumberType desc',
    SuplrProofOfDelivRlvtCode: 'SuplrProofOfDelivRlvtCode',
    SuplrProofOfDelivRlvtCodeDesc: 'SuplrProofOfDelivRlvtCode desc',
    BrTaxIsSplit: 'BR_TaxIsSplit',
    BrTaxIsSplitDesc: 'BR_TaxIsSplit desc',
    DataExchangeInstructionKey: 'DataExchangeInstructionKey',
    DataExchangeInstructionKeyDesc: 'DataExchangeInstructionKey desc'
} as const;
export type ASupplierGetOrderbyEnum = typeof ASupplierGetOrderbyEnum[keyof typeof ASupplierGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierGetSelectEnum = {
    Supplier: 'Supplier',
    AlternativePayeeAccountNumber: 'AlternativePayeeAccountNumber',
    AuthorizationGroup: 'AuthorizationGroup',
    BusinessPartnerPanNumber: 'BusinessPartnerPanNumber',
    CreatedByUser: 'CreatedByUser',
    CreationDate: 'CreationDate',
    Customer: 'Customer',
    PaymentIsBlockedForSupplier: 'PaymentIsBlockedForSupplier',
    PostingIsBlocked: 'PostingIsBlocked',
    PurchasingIsBlocked: 'PurchasingIsBlocked',
    SupplierAccountGroup: 'SupplierAccountGroup',
    SupplierFullName: 'SupplierFullName',
    SupplierName: 'SupplierName',
    VatRegistration: 'VATRegistration',
    BirthDate: 'BirthDate',
    ConcatenatedInternationalLocNo: 'ConcatenatedInternationalLocNo',
    DeletionIndicator: 'DeletionIndicator',
    FiscalAddress: 'FiscalAddress',
    Industry: 'Industry',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber3: 'InternationalLocationNumber3',
    IsNaturalPerson: 'IsNaturalPerson',
    PaymentReason: 'PaymentReason',
    ResponsibleType: 'ResponsibleType',
    SuplrQltyInProcmtCertfnValidTo: 'SuplrQltyInProcmtCertfnValidTo',
    SuplrQualityManagementSystem: 'SuplrQualityManagementSystem',
    SupplierCorporateGroup: 'SupplierCorporateGroup',
    SupplierProcurementBlock: 'SupplierProcurementBlock',
    TaxNumber1: 'TaxNumber1',
    TaxNumber2: 'TaxNumber2',
    TaxNumber3: 'TaxNumber3',
    TaxNumber4: 'TaxNumber4',
    TaxNumber5: 'TaxNumber5',
    TaxNumberResponsible: 'TaxNumberResponsible',
    TaxNumberType: 'TaxNumberType',
    SuplrProofOfDelivRlvtCode: 'SuplrProofOfDelivRlvtCode',
    BrTaxIsSplit: 'BR_TaxIsSplit',
    DataExchangeInstructionKey: 'DataExchangeInstructionKey'
} as const;
export type ASupplierGetSelectEnum = typeof ASupplierGetSelectEnum[keyof typeof ASupplierGetSelectEnum];
/**
 * @export
 */
export const ASupplierGetExpandEnum = {
    Star: '*',
    ToSupplierCompany: 'to_SupplierCompany',
    ToSupplierPurchasingOrg: 'to_SupplierPurchasingOrg',
    ToSupplierText: 'to_SupplierText'
} as const;
export type ASupplierGetExpandEnum = typeof ASupplierGetExpandEnum[keyof typeof ASupplierGetExpandEnum];
/**
 * @export
 */
export const ASupplierSupplierGetSelectEnum = {
    Supplier: 'Supplier',
    AlternativePayeeAccountNumber: 'AlternativePayeeAccountNumber',
    AuthorizationGroup: 'AuthorizationGroup',
    BusinessPartnerPanNumber: 'BusinessPartnerPanNumber',
    CreatedByUser: 'CreatedByUser',
    CreationDate: 'CreationDate',
    Customer: 'Customer',
    PaymentIsBlockedForSupplier: 'PaymentIsBlockedForSupplier',
    PostingIsBlocked: 'PostingIsBlocked',
    PurchasingIsBlocked: 'PurchasingIsBlocked',
    SupplierAccountGroup: 'SupplierAccountGroup',
    SupplierFullName: 'SupplierFullName',
    SupplierName: 'SupplierName',
    VatRegistration: 'VATRegistration',
    BirthDate: 'BirthDate',
    ConcatenatedInternationalLocNo: 'ConcatenatedInternationalLocNo',
    DeletionIndicator: 'DeletionIndicator',
    FiscalAddress: 'FiscalAddress',
    Industry: 'Industry',
    InternationalLocationNumber1: 'InternationalLocationNumber1',
    InternationalLocationNumber2: 'InternationalLocationNumber2',
    InternationalLocationNumber3: 'InternationalLocationNumber3',
    IsNaturalPerson: 'IsNaturalPerson',
    PaymentReason: 'PaymentReason',
    ResponsibleType: 'ResponsibleType',
    SuplrQltyInProcmtCertfnValidTo: 'SuplrQltyInProcmtCertfnValidTo',
    SuplrQualityManagementSystem: 'SuplrQualityManagementSystem',
    SupplierCorporateGroup: 'SupplierCorporateGroup',
    SupplierProcurementBlock: 'SupplierProcurementBlock',
    TaxNumber1: 'TaxNumber1',
    TaxNumber2: 'TaxNumber2',
    TaxNumber3: 'TaxNumber3',
    TaxNumber4: 'TaxNumber4',
    TaxNumber5: 'TaxNumber5',
    TaxNumberResponsible: 'TaxNumberResponsible',
    TaxNumberType: 'TaxNumberType',
    SuplrProofOfDelivRlvtCode: 'SuplrProofOfDelivRlvtCode',
    BrTaxIsSplit: 'BR_TaxIsSplit',
    DataExchangeInstructionKey: 'DataExchangeInstructionKey'
} as const;
export type ASupplierSupplierGetSelectEnum = typeof ASupplierSupplierGetSelectEnum[keyof typeof ASupplierSupplierGetSelectEnum];
/**
 * @export
 */
export const ASupplierSupplierGetExpandEnum = {
    Star: '*',
    ToSupplierCompany: 'to_SupplierCompany',
    ToSupplierPurchasingOrg: 'to_SupplierPurchasingOrg',
    ToSupplierText: 'to_SupplierText'
} as const;
export type ASupplierSupplierGetExpandEnum = typeof ASupplierSupplierGetExpandEnum[keyof typeof ASupplierSupplierGetExpandEnum];
/**
 * @export
 */
export const ASupplierSupplierToSupplierCompanyGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    CompanyCode: 'CompanyCode',
    CompanyCodeDesc: 'CompanyCode desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    CompanyCodeName: 'CompanyCodeName',
    CompanyCodeNameDesc: 'CompanyCodeName desc',
    PaymentBlockingReason: 'PaymentBlockingReason',
    PaymentBlockingReasonDesc: 'PaymentBlockingReason desc',
    SupplierIsBlockedForPosting: 'SupplierIsBlockedForPosting',
    SupplierIsBlockedForPostingDesc: 'SupplierIsBlockedForPosting desc',
    AccountingClerk: 'AccountingClerk',
    AccountingClerkDesc: 'AccountingClerk desc',
    AccountingClerkFaxNumber: 'AccountingClerkFaxNumber',
    AccountingClerkFaxNumberDesc: 'AccountingClerkFaxNumber desc',
    AccountingClerkPhoneNumber: 'AccountingClerkPhoneNumber',
    AccountingClerkPhoneNumberDesc: 'AccountingClerkPhoneNumber desc',
    SupplierClerk: 'SupplierClerk',
    SupplierClerkDesc: 'SupplierClerk desc',
    SupplierClerkUrl: 'SupplierClerkURL',
    SupplierClerkUrlDesc: 'SupplierClerkURL desc',
    PaymentMethodsList: 'PaymentMethodsList',
    PaymentMethodsListDesc: 'PaymentMethodsList desc',
    PaymentReason: 'PaymentReason',
    PaymentReasonDesc: 'PaymentReason desc',
    PaymentTerms: 'PaymentTerms',
    PaymentTermsDesc: 'PaymentTerms desc',
    ClearCustomerSupplier: 'ClearCustomerSupplier',
    ClearCustomerSupplierDesc: 'ClearCustomerSupplier desc',
    IsToBeLocallyProcessed: 'IsToBeLocallyProcessed',
    IsToBeLocallyProcessedDesc: 'IsToBeLocallyProcessed desc',
    ItemIsToBePaidSeparately: 'ItemIsToBePaidSeparately',
    ItemIsToBePaidSeparatelyDesc: 'ItemIsToBePaidSeparately desc',
    PaymentIsToBeSentByEdi: 'PaymentIsToBeSentByEDI',
    PaymentIsToBeSentByEdiDesc: 'PaymentIsToBeSentByEDI desc',
    HouseBank: 'HouseBank',
    HouseBankDesc: 'HouseBank desc',
    CheckPaidDurationInDays: 'CheckPaidDurationInDays',
    CheckPaidDurationInDaysDesc: 'CheckPaidDurationInDays desc',
    Currency: 'Currency',
    CurrencyDesc: 'Currency desc',
    BillOfExchLmtAmtInCoCodeCrcy: 'BillOfExchLmtAmtInCoCodeCrcy',
    BillOfExchLmtAmtInCoCodeCrcyDesc: 'BillOfExchLmtAmtInCoCodeCrcy desc',
    SupplierClerkIdbySupplier: 'SupplierClerkIDBySupplier',
    SupplierClerkIdbySupplierDesc: 'SupplierClerkIDBySupplier desc',
    ReconciliationAccount: 'ReconciliationAccount',
    ReconciliationAccountDesc: 'ReconciliationAccount desc',
    InterestCalculationCode: 'InterestCalculationCode',
    InterestCalculationCodeDesc: 'InterestCalculationCode desc',
    InterestCalculationDate: 'InterestCalculationDate',
    InterestCalculationDateDesc: 'InterestCalculationDate desc',
    IntrstCalcFrequencyInMonths: 'IntrstCalcFrequencyInMonths',
    IntrstCalcFrequencyInMonthsDesc: 'IntrstCalcFrequencyInMonths desc',
    SupplierHeadOffice: 'SupplierHeadOffice',
    SupplierHeadOfficeDesc: 'SupplierHeadOffice desc',
    AlternativePayee: 'AlternativePayee',
    AlternativePayeeDesc: 'AlternativePayee desc',
    LayoutSortingRule: 'LayoutSortingRule',
    LayoutSortingRuleDesc: 'LayoutSortingRule desc',
    AparToleranceGroup: 'APARToleranceGroup',
    AparToleranceGroupDesc: 'APARToleranceGroup desc',
    SupplierCertificationDate: 'SupplierCertificationDate',
    SupplierCertificationDateDesc: 'SupplierCertificationDate desc',
    SupplierAccountNote: 'SupplierAccountNote',
    SupplierAccountNoteDesc: 'SupplierAccountNote desc',
    WithholdingTaxCountry: 'WithholdingTaxCountry',
    WithholdingTaxCountryDesc: 'WithholdingTaxCountry desc',
    DeletionIndicator: 'DeletionIndicator',
    DeletionIndicatorDesc: 'DeletionIndicator desc',
    CashPlanningGroup: 'CashPlanningGroup',
    CashPlanningGroupDesc: 'CashPlanningGroup desc',
    IsToBeCheckedForDuplicates: 'IsToBeCheckedForDuplicates',
    IsToBeCheckedForDuplicatesDesc: 'IsToBeCheckedForDuplicates desc',
    MinorityGroup: 'MinorityGroup',
    MinorityGroupDesc: 'MinorityGroup desc',
    SupplierAccountGroup: 'SupplierAccountGroup',
    SupplierAccountGroupDesc: 'SupplierAccountGroup desc'
} as const;
export type ASupplierSupplierToSupplierCompanyGetOrderbyEnum = typeof ASupplierSupplierToSupplierCompanyGetOrderbyEnum[keyof typeof ASupplierSupplierToSupplierCompanyGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierSupplierToSupplierCompanyGetSelectEnum = {
    Supplier: 'Supplier',
    CompanyCode: 'CompanyCode',
    AuthorizationGroup: 'AuthorizationGroup',
    CompanyCodeName: 'CompanyCodeName',
    PaymentBlockingReason: 'PaymentBlockingReason',
    SupplierIsBlockedForPosting: 'SupplierIsBlockedForPosting',
    AccountingClerk: 'AccountingClerk',
    AccountingClerkFaxNumber: 'AccountingClerkFaxNumber',
    AccountingClerkPhoneNumber: 'AccountingClerkPhoneNumber',
    SupplierClerk: 'SupplierClerk',
    SupplierClerkUrl: 'SupplierClerkURL',
    PaymentMethodsList: 'PaymentMethodsList',
    PaymentReason: 'PaymentReason',
    PaymentTerms: 'PaymentTerms',
    ClearCustomerSupplier: 'ClearCustomerSupplier',
    IsToBeLocallyProcessed: 'IsToBeLocallyProcessed',
    ItemIsToBePaidSeparately: 'ItemIsToBePaidSeparately',
    PaymentIsToBeSentByEdi: 'PaymentIsToBeSentByEDI',
    HouseBank: 'HouseBank',
    CheckPaidDurationInDays: 'CheckPaidDurationInDays',
    Currency: 'Currency',
    BillOfExchLmtAmtInCoCodeCrcy: 'BillOfExchLmtAmtInCoCodeCrcy',
    SupplierClerkIdbySupplier: 'SupplierClerkIDBySupplier',
    ReconciliationAccount: 'ReconciliationAccount',
    InterestCalculationCode: 'InterestCalculationCode',
    InterestCalculationDate: 'InterestCalculationDate',
    IntrstCalcFrequencyInMonths: 'IntrstCalcFrequencyInMonths',
    SupplierHeadOffice: 'SupplierHeadOffice',
    AlternativePayee: 'AlternativePayee',
    LayoutSortingRule: 'LayoutSortingRule',
    AparToleranceGroup: 'APARToleranceGroup',
    SupplierCertificationDate: 'SupplierCertificationDate',
    SupplierAccountNote: 'SupplierAccountNote',
    WithholdingTaxCountry: 'WithholdingTaxCountry',
    DeletionIndicator: 'DeletionIndicator',
    CashPlanningGroup: 'CashPlanningGroup',
    IsToBeCheckedForDuplicates: 'IsToBeCheckedForDuplicates',
    MinorityGroup: 'MinorityGroup',
    SupplierAccountGroup: 'SupplierAccountGroup'
} as const;
export type ASupplierSupplierToSupplierCompanyGetSelectEnum = typeof ASupplierSupplierToSupplierCompanyGetSelectEnum[keyof typeof ASupplierSupplierToSupplierCompanyGetSelectEnum];
/**
 * @export
 */
export const ASupplierSupplierToSupplierCompanyGetExpandEnum = {
    Star: '*',
    ToCompanyText: 'to_CompanyText',
    ToSupplier: 'to_Supplier',
    ToSupplierDunning: 'to_SupplierDunning',
    ToSupplierWithHoldingTax: 'to_SupplierWithHoldingTax'
} as const;
export type ASupplierSupplierToSupplierCompanyGetExpandEnum = typeof ASupplierSupplierToSupplierCompanyGetExpandEnum[keyof typeof ASupplierSupplierToSupplierCompanyGetExpandEnum];
/**
 * @export
 */
export const ASupplierSupplierToSupplierPurchasingOrgGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    PurchasingOrganization: 'PurchasingOrganization',
    PurchasingOrganizationDesc: 'PurchasingOrganization desc',
    AutomaticEvaluatedRcptSettlmt: 'AutomaticEvaluatedRcptSettlmt',
    AutomaticEvaluatedRcptSettlmtDesc: 'AutomaticEvaluatedRcptSettlmt desc',
    CalculationSchemaGroupCode: 'CalculationSchemaGroupCode',
    CalculationSchemaGroupCodeDesc: 'CalculationSchemaGroupCode desc',
    DeletionIndicator: 'DeletionIndicator',
    DeletionIndicatorDesc: 'DeletionIndicator desc',
    EvaldReceiptSettlementIsActive: 'EvaldReceiptSettlementIsActive',
    EvaldReceiptSettlementIsActiveDesc: 'EvaldReceiptSettlementIsActive desc',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsClassificationDesc: 'IncotermsClassification desc',
    IncotermsTransferLocation: 'IncotermsTransferLocation',
    IncotermsTransferLocationDesc: 'IncotermsTransferLocation desc',
    IncotermsVersion: 'IncotermsVersion',
    IncotermsVersionDesc: 'IncotermsVersion desc',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsLocation1Desc: 'IncotermsLocation1 desc',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsLocation2Desc: 'IncotermsLocation2 desc',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc1AddlUuidDesc: 'IncotermsSupChnLoc1AddlUUID desc',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnLoc2AddlUuidDesc: 'IncotermsSupChnLoc2AddlUUID desc',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    IncotermsSupChnDvtgLocAddlUuidDesc: 'IncotermsSupChnDvtgLocAddlUUID desc',
    IntrastatCrsBorderTrMode: 'IntrastatCrsBorderTrMode',
    IntrastatCrsBorderTrModeDesc: 'IntrastatCrsBorderTrMode desc',
    InvoiceIsGoodsReceiptBased: 'InvoiceIsGoodsReceiptBased',
    InvoiceIsGoodsReceiptBasedDesc: 'InvoiceIsGoodsReceiptBased desc',
    InvoiceIsMmServiceEntryBased: 'InvoiceIsMMServiceEntryBased',
    InvoiceIsMmServiceEntryBasedDesc: 'InvoiceIsMMServiceEntryBased desc',
    MaterialPlannedDeliveryDurn: 'MaterialPlannedDeliveryDurn',
    MaterialPlannedDeliveryDurnDesc: 'MaterialPlannedDeliveryDurn desc',
    MinimumOrderAmount: 'MinimumOrderAmount',
    MinimumOrderAmountDesc: 'MinimumOrderAmount desc',
    PaymentTerms: 'PaymentTerms',
    PaymentTermsDesc: 'PaymentTerms desc',
    PlanningCycle: 'PlanningCycle',
    PlanningCycleDesc: 'PlanningCycle desc',
    PricingDateControl: 'PricingDateControl',
    PricingDateControlDesc: 'PricingDateControl desc',
    ProdStockAndSlsDataTransfPrfl: 'ProdStockAndSlsDataTransfPrfl',
    ProdStockAndSlsDataTransfPrflDesc: 'ProdStockAndSlsDataTransfPrfl desc',
    ProductUnitGroup: 'ProductUnitGroup',
    ProductUnitGroupDesc: 'ProductUnitGroup desc',
    PurOrdAutoGenerationIsAllowed: 'PurOrdAutoGenerationIsAllowed',
    PurOrdAutoGenerationIsAllowedDesc: 'PurOrdAutoGenerationIsAllowed desc',
    PurchaseOrderCurrency: 'PurchaseOrderCurrency',
    PurchaseOrderCurrencyDesc: 'PurchaseOrderCurrency desc',
    PurchasingGroup: 'PurchasingGroup',
    PurchasingGroupDesc: 'PurchasingGroup desc',
    PurchasingIsBlockedForSupplier: 'PurchasingIsBlockedForSupplier',
    PurchasingIsBlockedForSupplierDesc: 'PurchasingIsBlockedForSupplier desc',
    RoundingProfile: 'RoundingProfile',
    RoundingProfileDesc: 'RoundingProfile desc',
    ShippingCondition: 'ShippingCondition',
    ShippingConditionDesc: 'ShippingCondition desc',
    SuplrDiscountInKindIsGranted: 'SuplrDiscountInKindIsGranted',
    SuplrDiscountInKindIsGrantedDesc: 'SuplrDiscountInKindIsGranted desc',
    SuplrInvcRevalIsAllowed: 'SuplrInvcRevalIsAllowed',
    SuplrInvcRevalIsAllowedDesc: 'SuplrInvcRevalIsAllowed desc',
    SuplrIsRlvtForSettlmtMgmt: 'SuplrIsRlvtForSettlmtMgmt',
    SuplrIsRlvtForSettlmtMgmtDesc: 'SuplrIsRlvtForSettlmtMgmt desc',
    SuplrPurgOrgIsRlvtForPriceDetn: 'SuplrPurgOrgIsRlvtForPriceDetn',
    SuplrPurgOrgIsRlvtForPriceDetnDesc: 'SuplrPurgOrgIsRlvtForPriceDetn desc',
    SupplierAbcClassificationCode: 'SupplierABCClassificationCode',
    SupplierAbcClassificationCodeDesc: 'SupplierABCClassificationCode desc',
    SupplierAccountNumber: 'SupplierAccountNumber',
    SupplierAccountNumberDesc: 'SupplierAccountNumber desc',
    SupplierIsReturnsSupplier: 'SupplierIsReturnsSupplier',
    SupplierIsReturnsSupplierDesc: 'SupplierIsReturnsSupplier desc',
    SupplierPhoneNumber: 'SupplierPhoneNumber',
    SupplierPhoneNumberDesc: 'SupplierPhoneNumber desc',
    SupplierRespSalesPersonName: 'SupplierRespSalesPersonName',
    SupplierRespSalesPersonNameDesc: 'SupplierRespSalesPersonName desc',
    SupplierConfirmationControlKey: 'SupplierConfirmationControlKey',
    SupplierConfirmationControlKeyDesc: 'SupplierConfirmationControlKey desc',
    IsOrderAcknRqd: 'IsOrderAcknRqd',
    IsOrderAcknRqdDesc: 'IsOrderAcknRqd desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    SupplierAccountGroup: 'SupplierAccountGroup',
    SupplierAccountGroupDesc: 'SupplierAccountGroup desc'
} as const;
export type ASupplierSupplierToSupplierPurchasingOrgGetOrderbyEnum = typeof ASupplierSupplierToSupplierPurchasingOrgGetOrderbyEnum[keyof typeof ASupplierSupplierToSupplierPurchasingOrgGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierSupplierToSupplierPurchasingOrgGetSelectEnum = {
    Supplier: 'Supplier',
    PurchasingOrganization: 'PurchasingOrganization',
    AutomaticEvaluatedRcptSettlmt: 'AutomaticEvaluatedRcptSettlmt',
    CalculationSchemaGroupCode: 'CalculationSchemaGroupCode',
    DeletionIndicator: 'DeletionIndicator',
    EvaldReceiptSettlementIsActive: 'EvaldReceiptSettlementIsActive',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsTransferLocation: 'IncotermsTransferLocation',
    IncotermsVersion: 'IncotermsVersion',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    IntrastatCrsBorderTrMode: 'IntrastatCrsBorderTrMode',
    InvoiceIsGoodsReceiptBased: 'InvoiceIsGoodsReceiptBased',
    InvoiceIsMmServiceEntryBased: 'InvoiceIsMMServiceEntryBased',
    MaterialPlannedDeliveryDurn: 'MaterialPlannedDeliveryDurn',
    MinimumOrderAmount: 'MinimumOrderAmount',
    PaymentTerms: 'PaymentTerms',
    PlanningCycle: 'PlanningCycle',
    PricingDateControl: 'PricingDateControl',
    ProdStockAndSlsDataTransfPrfl: 'ProdStockAndSlsDataTransfPrfl',
    ProductUnitGroup: 'ProductUnitGroup',
    PurOrdAutoGenerationIsAllowed: 'PurOrdAutoGenerationIsAllowed',
    PurchaseOrderCurrency: 'PurchaseOrderCurrency',
    PurchasingGroup: 'PurchasingGroup',
    PurchasingIsBlockedForSupplier: 'PurchasingIsBlockedForSupplier',
    RoundingProfile: 'RoundingProfile',
    ShippingCondition: 'ShippingCondition',
    SuplrDiscountInKindIsGranted: 'SuplrDiscountInKindIsGranted',
    SuplrInvcRevalIsAllowed: 'SuplrInvcRevalIsAllowed',
    SuplrIsRlvtForSettlmtMgmt: 'SuplrIsRlvtForSettlmtMgmt',
    SuplrPurgOrgIsRlvtForPriceDetn: 'SuplrPurgOrgIsRlvtForPriceDetn',
    SupplierAbcClassificationCode: 'SupplierABCClassificationCode',
    SupplierAccountNumber: 'SupplierAccountNumber',
    SupplierIsReturnsSupplier: 'SupplierIsReturnsSupplier',
    SupplierPhoneNumber: 'SupplierPhoneNumber',
    SupplierRespSalesPersonName: 'SupplierRespSalesPersonName',
    SupplierConfirmationControlKey: 'SupplierConfirmationControlKey',
    IsOrderAcknRqd: 'IsOrderAcknRqd',
    AuthorizationGroup: 'AuthorizationGroup',
    SupplierAccountGroup: 'SupplierAccountGroup'
} as const;
export type ASupplierSupplierToSupplierPurchasingOrgGetSelectEnum = typeof ASupplierSupplierToSupplierPurchasingOrgGetSelectEnum[keyof typeof ASupplierSupplierToSupplierPurchasingOrgGetSelectEnum];
/**
 * @export
 */
export const ASupplierSupplierToSupplierPurchasingOrgGetExpandEnum = {
    Star: '*',
    ToPartnerFunction: 'to_PartnerFunction',
    ToPurchasingOrgText: 'to_PurchasingOrgText'
} as const;
export type ASupplierSupplierToSupplierPurchasingOrgGetExpandEnum = typeof ASupplierSupplierToSupplierPurchasingOrgGetExpandEnum[keyof typeof ASupplierSupplierToSupplierPurchasingOrgGetExpandEnum];
/**
 * @export
 */
export const ASupplierSupplierToSupplierTextGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    LongTextId: 'LongTextID',
    LongTextIdDesc: 'LongTextID desc'
} as const;
export type ASupplierSupplierToSupplierTextGetOrderbyEnum = typeof ASupplierSupplierToSupplierTextGetOrderbyEnum[keyof typeof ASupplierSupplierToSupplierTextGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierSupplierToSupplierTextGetSelectEnum = {
    Supplier: 'Supplier',
    Language: 'Language',
    LongTextId: 'LongTextID',
    LongText: 'LongText'
} as const;
export type ASupplierSupplierToSupplierTextGetSelectEnum = typeof ASupplierSupplierToSupplierTextGetSelectEnum[keyof typeof ASupplierSupplierToSupplierTextGetSelectEnum];
