/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERACustAddrDepdntInformationType,
  APIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate,
  APIBUSINESSPARTNERACustAddrDepdntInformationTypeUpdate,
  CollectionOfACustAddrDepdntInformationType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERACustAddrDepdntInformationTypeFromJSON,
    APIBUSINESSPARTNERACustAddrDepdntInformationTypeToJSON,
    APIBUSINESSPARTNERACustAddrDepdntInformationTypeCreateFromJSON,
    APIBUSINESSPARTNERACustAddrDepdntInformationTypeCreateToJSON,
    APIBUSINESSPARTNERACustAddrDepdntInformationTypeUpdateFromJSON,
    APIBUSINESSPARTNERACustAddrDepdntInformationTypeUpdateToJSON,
    CollectionOfACustAddrDepdntInformationTypeFromJSON,
    CollectionOfACustAddrDepdntInformationTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ACustAddrDepdntInformationCustomerCustomerAddressIDAddressIDDeleteRequest {
    customer: string;
    addressID: string;
}

export interface ACustAddrDepdntInformationCustomerCustomerAddressIDAddressIDGetRequest {
    customer: string;
    addressID: string;
    $select?: Set<ACustAddrDepdntInformationCustomerCustomerAddressIDAddressIDGetSelectEnum>;
}

export interface ACustAddrDepdntInformationCustomerCustomerAddressIDAddressIDPatchRequest {
    customer: string;
    addressID: string;
    aPIBUSINESSPARTNERACustAddrDepdntInformationTypeUpdate: APIBUSINESSPARTNERACustAddrDepdntInformationTypeUpdate;
}

export interface ACustAddrDepdntInformationGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustAddrDepdntInformationGetOrderbyEnum>;
    $select?: Set<ACustAddrDepdntInformationGetSelectEnum>;
}

export interface ACustAddrDepdntInformationPostRequest {
    aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate: APIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate;
}

export interface ACustomerCustomerToCustAddrDepdntInformationGetRequest {
    customer: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerCustomerToCustAddrDepdntInformationGetOrderbyEnum>;
    $select?: Set<ACustomerCustomerToCustAddrDepdntInformationGetSelectEnum>;
}

export interface ACustomerCustomerToCustAddrDepdntInformationPostRequest {
    customer: string;
    aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate: APIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate;
}

/**
 * 
 */
export class CustomerAddressDependentInfomationApi extends runtime.BaseAPI {

    /**
     * Deletes address dependent customer data identified by key fields customer number and address ID.
     * Deletes address dependent customer data.
     */
    async aCustAddrDepdntInformationCustomerCustomerAddressIDAddressIDDeleteRaw(requestParameters: ACustAddrDepdntInformationCustomerCustomerAddressIDAddressIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustAddrDepdntInformationCustomerCustomerAddressIDAddressIDDelete.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aCustAddrDepdntInformationCustomerCustomerAddressIDAddressIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustAddrDepdntInformation(Customer='{Customer}',AddressID='{AddressID}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes address dependent customer data identified by key fields customer number and address ID.
     * Deletes address dependent customer data.
     */
    async aCustAddrDepdntInformationCustomerCustomerAddressIDAddressIDDelete(requestParameters: ACustAddrDepdntInformationCustomerCustomerAddressIDAddressIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustAddrDepdntInformationCustomerCustomerAddressIDAddressIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves address dependent customer data by using the key fields customer number and address ID.
     * Retrieves address dependent customer data by using key fields.
     */
    async aCustAddrDepdntInformationCustomerCustomerAddressIDAddressIDGetRaw(requestParameters: ACustAddrDepdntInformationCustomerCustomerAddressIDAddressIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustAddrDepdntInformationType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustAddrDepdntInformationCustomerCustomerAddressIDAddressIDGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aCustAddrDepdntInformationCustomerCustomerAddressIDAddressIDGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustAddrDepdntInformation(Customer='{Customer}',AddressID='{AddressID}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustAddrDepdntInformationTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent customer data by using the key fields customer number and address ID.
     * Retrieves address dependent customer data by using key fields.
     */
    async aCustAddrDepdntInformationCustomerCustomerAddressIDAddressIDGet(requestParameters: ACustAddrDepdntInformationCustomerCustomerAddressIDAddressIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustAddrDepdntInformationType> {
        const response = await this.aCustAddrDepdntInformationCustomerCustomerAddressIDAddressIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates address dependent customer data identified by key fields customer number and address ID.
     * Updates address dependent customer data.
     */
    async aCustAddrDepdntInformationCustomerCustomerAddressIDAddressIDPatchRaw(requestParameters: ACustAddrDepdntInformationCustomerCustomerAddressIDAddressIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustAddrDepdntInformationCustomerCustomerAddressIDAddressIDPatch.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aCustAddrDepdntInformationCustomerCustomerAddressIDAddressIDPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustAddrDepdntInformationTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERACustAddrDepdntInformationTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustAddrDepdntInformationTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERACustAddrDepdntInformationTypeUpdate was null or undefined when calling aCustAddrDepdntInformationCustomerCustomerAddressIDAddressIDPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustAddrDepdntInformation(Customer='{Customer}',AddressID='{AddressID}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustAddrDepdntInformationTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERACustAddrDepdntInformationTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates address dependent customer data identified by key fields customer number and address ID.
     * Updates address dependent customer data.
     */
    async aCustAddrDepdntInformationCustomerCustomerAddressIDAddressIDPatch(requestParameters: ACustAddrDepdntInformationCustomerCustomerAddressIDAddressIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustAddrDepdntInformationCustomerCustomerAddressIDAddressIDPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves address dependent customer data fields of all the available records in the system.
     * Retrieves address dependent customer data.
     */
    async aCustAddrDepdntInformationGetRaw(requestParameters: ACustAddrDepdntInformationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustAddrDepdntInformationType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustAddrDepdntInformation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustAddrDepdntInformationTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent customer data fields of all the available records in the system.
     * Retrieves address dependent customer data.
     */
    async aCustAddrDepdntInformationGet(requestParameters: ACustAddrDepdntInformationGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustAddrDepdntInformationType> {
        const response = await this.aCustAddrDepdntInformationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new address dependent customer data.
     * Creates new address dependent customer data.
     */
    async aCustAddrDepdntInformationPostRaw(requestParameters: ACustAddrDepdntInformationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustAddrDepdntInformationType>> {
        if (requestParameters.aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate was null or undefined when calling aCustAddrDepdntInformationPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustAddrDepdntInformation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustAddrDepdntInformationTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustAddrDepdntInformationTypeFromJSON(jsonValue));
    }

    /**
     * Creates new address dependent customer data.
     * Creates new address dependent customer data.
     */
    async aCustAddrDepdntInformationPost(requestParameters: ACustAddrDepdntInformationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustAddrDepdntInformationType> {
        const response = await this.aCustAddrDepdntInformationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves address dependent customer data fields of all the available records in the system.
     * Retrieves address dependent customer data.
     */
    async aCustomerCustomerToCustAddrDepdntInformationGetRaw(requestParameters: ACustomerCustomerToCustAddrDepdntInformationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustAddrDepdntInformationType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustAddrDepdntInformationGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustAddrDepdntInformation`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustAddrDepdntInformationTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent customer data fields of all the available records in the system.
     * Retrieves address dependent customer data.
     */
    async aCustomerCustomerToCustAddrDepdntInformationGet(requestParameters: ACustomerCustomerToCustAddrDepdntInformationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustAddrDepdntInformationType> {
        const response = await this.aCustomerCustomerToCustAddrDepdntInformationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new address dependent customer data.
     * Creates new address dependent customer data.
     */
    async aCustomerCustomerToCustAddrDepdntInformationPostRaw(requestParameters: ACustomerCustomerToCustAddrDepdntInformationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustAddrDepdntInformationType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerCustomerToCustAddrDepdntInformationPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate was null or undefined when calling aCustomerCustomerToCustAddrDepdntInformationPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Customer('{Customer}')/to_CustAddrDepdntInformation`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustAddrDepdntInformationTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustAddrDepdntInformationTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustAddrDepdntInformationTypeFromJSON(jsonValue));
    }

    /**
     * Creates new address dependent customer data.
     * Creates new address dependent customer data.
     */
    async aCustomerCustomerToCustAddrDepdntInformationPost(requestParameters: ACustomerCustomerToCustAddrDepdntInformationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustAddrDepdntInformationType> {
        const response = await this.aCustomerCustomerToCustAddrDepdntInformationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ACustAddrDepdntInformationCustomerCustomerAddressIDAddressIDGetSelectEnum = {
    Customer: 'Customer',
    AddressId: 'AddressID',
    ExpressTrainStationName: 'ExpressTrainStationName',
    TrainStationName: 'TrainStationName',
    CityCode: 'CityCode',
    County: 'County'
} as const;
export type ACustAddrDepdntInformationCustomerCustomerAddressIDAddressIDGetSelectEnum = typeof ACustAddrDepdntInformationCustomerCustomerAddressIDAddressIDGetSelectEnum[keyof typeof ACustAddrDepdntInformationCustomerCustomerAddressIDAddressIDGetSelectEnum];
/**
 * @export
 */
export const ACustAddrDepdntInformationGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    ExpressTrainStationName: 'ExpressTrainStationName',
    ExpressTrainStationNameDesc: 'ExpressTrainStationName desc',
    TrainStationName: 'TrainStationName',
    TrainStationNameDesc: 'TrainStationName desc',
    CityCode: 'CityCode',
    CityCodeDesc: 'CityCode desc',
    County: 'County',
    CountyDesc: 'County desc'
} as const;
export type ACustAddrDepdntInformationGetOrderbyEnum = typeof ACustAddrDepdntInformationGetOrderbyEnum[keyof typeof ACustAddrDepdntInformationGetOrderbyEnum];
/**
 * @export
 */
export const ACustAddrDepdntInformationGetSelectEnum = {
    Customer: 'Customer',
    AddressId: 'AddressID',
    ExpressTrainStationName: 'ExpressTrainStationName',
    TrainStationName: 'TrainStationName',
    CityCode: 'CityCode',
    County: 'County'
} as const;
export type ACustAddrDepdntInformationGetSelectEnum = typeof ACustAddrDepdntInformationGetSelectEnum[keyof typeof ACustAddrDepdntInformationGetSelectEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustAddrDepdntInformationGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    ExpressTrainStationName: 'ExpressTrainStationName',
    ExpressTrainStationNameDesc: 'ExpressTrainStationName desc',
    TrainStationName: 'TrainStationName',
    TrainStationNameDesc: 'TrainStationName desc',
    CityCode: 'CityCode',
    CityCodeDesc: 'CityCode desc',
    County: 'County',
    CountyDesc: 'County desc'
} as const;
export type ACustomerCustomerToCustAddrDepdntInformationGetOrderbyEnum = typeof ACustomerCustomerToCustAddrDepdntInformationGetOrderbyEnum[keyof typeof ACustomerCustomerToCustAddrDepdntInformationGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerCustomerToCustAddrDepdntInformationGetSelectEnum = {
    Customer: 'Customer',
    AddressId: 'AddressID',
    ExpressTrainStationName: 'ExpressTrainStationName',
    TrainStationName: 'TrainStationName',
    CityCode: 'CityCode',
    County: 'County'
} as const;
export type ACustomerCustomerToCustAddrDepdntInformationGetSelectEnum = typeof ACustomerCustomerToCustAddrDepdntInformationGetSelectEnum[keyof typeof ACustomerCustomerToCustAddrDepdntInformationGetSelectEnum];
