/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERABPContactToFuncAndDeptType,
  APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate,
  CollectionOfABPContactToFuncAndDeptType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERABPContactToFuncAndDeptTypeFromJSON,
    APIBUSINESSPARTNERABPContactToFuncAndDeptTypeToJSON,
    APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdateFromJSON,
    APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdateToJSON,
    CollectionOfABPContactToFuncAndDeptTypeFromJSON,
    CollectionOfABPContactToFuncAndDeptTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABPContactToFuncAndDeptGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPContactToFuncAndDeptGetOrderbyEnum>;
    $select?: Set<ABPContactToFuncAndDeptGetSelectEnum>;
}

export interface ABPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    $select?: Set<ABPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetSelectEnum>;
}

export interface ABPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatchRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    aPIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate: APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate;
}

export interface ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    $select?: Set<ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetSelectEnum>;
}

/**
 * 
 */
export class FunctionAndDepartmentApi extends runtime.BaseAPI {

    /**
     * Retrieves all the contact person department and function data linked to all business partner contact records in the system
     * Retrieves contact person department and function data.
     */
    async aBPContactToFuncAndDeptGetRaw(requestParameters: ABPContactToFuncAndDeptGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPContactToFuncAndDeptType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToFuncAndDept`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPContactToFuncAndDeptTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the contact person department and function data linked to all business partner contact records in the system
     * Retrieves contact person department and function data.
     */
    async aBPContactToFuncAndDeptGet(requestParameters: ABPContactToFuncAndDeptGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPContactToFuncAndDeptType> {
        const response = await this.aBPContactToFuncAndDeptGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves department and function record by RelationshipNumber, BusinessPartnerCompany, BusinessPartnerPerson, and ValidityEndDate.
     * Retrieves contact person department and function data by using key fields.
     */
    async aBPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetRaw(requestParameters: ABPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPContactToFuncAndDeptType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGet.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGet.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGet.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToFuncAndDept(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate})`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPContactToFuncAndDeptTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves department and function record by RelationshipNumber, BusinessPartnerCompany, BusinessPartnerPerson, and ValidityEndDate.
     * Retrieves contact person department and function data by using key fields.
     */
    async aBPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGet(requestParameters: ABPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPContactToFuncAndDeptType> {
        const response = await this.aBPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates department and function data by RelationshipNumber, BusinessPartnerCompany, BusinessPartnerPerson, and ValidityEndDate.
     * Updates contact person department and function data record by key field.
     */
    async aBPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatchRaw(requestParameters: ABPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatch.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatch.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatch.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate was null or undefined when calling aBPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToFuncAndDept(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate})`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates department and function data by RelationshipNumber, BusinessPartnerCompany, BusinessPartnerPerson, and ValidityEndDate.
     * Updates contact person department and function data record by key field.
     */
    async aBPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatch(requestParameters: ABPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDatePatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all the contact person department and function data linked to all business partner contact records in the system
     * Retrieves contact person department and function data.
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetRaw(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPContactToFuncAndDeptType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGet.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGet.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGet.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerContact(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate})/to_ContactRelationship`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPContactToFuncAndDeptTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the contact person department and function data linked to all business partner contact records in the system
     * Retrieves contact person department and function data.
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGet(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPContactToFuncAndDeptType> {
        const response = await this.aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABPContactToFuncAndDeptGetOrderbyEnum = {
    RelationshipNumber: 'RelationshipNumber',
    RelationshipNumberDesc: 'RelationshipNumber desc',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerCompanyDesc: 'BusinessPartnerCompany desc',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    BusinessPartnerPersonDesc: 'BusinessPartnerPerson desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    ContactPersonAuthorityType: 'ContactPersonAuthorityType',
    ContactPersonAuthorityTypeDesc: 'ContactPersonAuthorityType desc',
    ContactPersonDepartment: 'ContactPersonDepartment',
    ContactPersonDepartmentDesc: 'ContactPersonDepartment desc',
    ContactPersonDepartmentName: 'ContactPersonDepartmentName',
    ContactPersonDepartmentNameDesc: 'ContactPersonDepartmentName desc',
    ContactPersonFunction: 'ContactPersonFunction',
    ContactPersonFunctionDesc: 'ContactPersonFunction desc',
    ContactPersonFunctionName: 'ContactPersonFunctionName',
    ContactPersonFunctionNameDesc: 'ContactPersonFunctionName desc',
    ContactPersonRemarkText: 'ContactPersonRemarkText',
    ContactPersonRemarkTextDesc: 'ContactPersonRemarkText desc',
    ContactPersonVipType: 'ContactPersonVIPType',
    ContactPersonVipTypeDesc: 'ContactPersonVIPType desc',
    EmailAddress: 'EmailAddress',
    EmailAddressDesc: 'EmailAddress desc',
    FaxNumber: 'FaxNumber',
    FaxNumberDesc: 'FaxNumber desc',
    FaxNumberExtension: 'FaxNumberExtension',
    FaxNumberExtensionDesc: 'FaxNumberExtension desc',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberDesc: 'PhoneNumber desc',
    PhoneNumberExtension: 'PhoneNumberExtension',
    PhoneNumberExtensionDesc: 'PhoneNumberExtension desc',
    RelationshipCategory: 'RelationshipCategory',
    RelationshipCategoryDesc: 'RelationshipCategory desc'
} as const;
export type ABPContactToFuncAndDeptGetOrderbyEnum = typeof ABPContactToFuncAndDeptGetOrderbyEnum[keyof typeof ABPContactToFuncAndDeptGetOrderbyEnum];
/**
 * @export
 */
export const ABPContactToFuncAndDeptGetSelectEnum = {
    RelationshipNumber: 'RelationshipNumber',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    ValidityEndDate: 'ValidityEndDate',
    ContactPersonAuthorityType: 'ContactPersonAuthorityType',
    ContactPersonDepartment: 'ContactPersonDepartment',
    ContactPersonDepartmentName: 'ContactPersonDepartmentName',
    ContactPersonFunction: 'ContactPersonFunction',
    ContactPersonFunctionName: 'ContactPersonFunctionName',
    ContactPersonRemarkText: 'ContactPersonRemarkText',
    ContactPersonVipType: 'ContactPersonVIPType',
    EmailAddress: 'EmailAddress',
    FaxNumber: 'FaxNumber',
    FaxNumberExtension: 'FaxNumberExtension',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberExtension: 'PhoneNumberExtension',
    RelationshipCategory: 'RelationshipCategory'
} as const;
export type ABPContactToFuncAndDeptGetSelectEnum = typeof ABPContactToFuncAndDeptGetSelectEnum[keyof typeof ABPContactToFuncAndDeptGetSelectEnum];
/**
 * @export
 */
export const ABPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetSelectEnum = {
    RelationshipNumber: 'RelationshipNumber',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    ValidityEndDate: 'ValidityEndDate',
    ContactPersonAuthorityType: 'ContactPersonAuthorityType',
    ContactPersonDepartment: 'ContactPersonDepartment',
    ContactPersonDepartmentName: 'ContactPersonDepartmentName',
    ContactPersonFunction: 'ContactPersonFunction',
    ContactPersonFunctionName: 'ContactPersonFunctionName',
    ContactPersonRemarkText: 'ContactPersonRemarkText',
    ContactPersonVipType: 'ContactPersonVIPType',
    EmailAddress: 'EmailAddress',
    FaxNumber: 'FaxNumber',
    FaxNumberExtension: 'FaxNumberExtension',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberExtension: 'PhoneNumberExtension',
    RelationshipCategory: 'RelationshipCategory'
} as const;
export type ABPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetSelectEnum = typeof ABPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetSelectEnum[keyof typeof ABPContactToFuncAndDeptRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetSelectEnum = {
    RelationshipNumber: 'RelationshipNumber',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    ValidityEndDate: 'ValidityEndDate',
    ContactPersonAuthorityType: 'ContactPersonAuthorityType',
    ContactPersonDepartment: 'ContactPersonDepartment',
    ContactPersonDepartmentName: 'ContactPersonDepartmentName',
    ContactPersonFunction: 'ContactPersonFunction',
    ContactPersonFunctionName: 'ContactPersonFunctionName',
    ContactPersonRemarkText: 'ContactPersonRemarkText',
    ContactPersonVipType: 'ContactPersonVIPType',
    EmailAddress: 'EmailAddress',
    FaxNumber: 'FaxNumber',
    FaxNumberExtension: 'FaxNumberExtension',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberExtension: 'PhoneNumberExtension',
    RelationshipCategory: 'RelationshipCategory'
} as const;
export type ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetSelectEnum = typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetSelectEnum[keyof typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactRelationshipGetSelectEnum];
