/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERABusinessPartnerBankType,
  APIBUSINESSPARTNERABusinessPartnerBankTypeCreate,
  APIBUSINESSPARTNERABusinessPartnerBankTypeUpdate,
  CollectionOfABusinessPartnerBankType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERABusinessPartnerBankTypeFromJSON,
    APIBUSINESSPARTNERABusinessPartnerBankTypeToJSON,
    APIBUSINESSPARTNERABusinessPartnerBankTypeCreateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerBankTypeCreateToJSON,
    APIBUSINESSPARTNERABusinessPartnerBankTypeUpdateFromJSON,
    APIBUSINESSPARTNERABusinessPartnerBankTypeUpdateToJSON,
    CollectionOfABusinessPartnerBankTypeFromJSON,
    CollectionOfABusinessPartnerBankTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationDeleteRequest {
    businessPartner: string;
    bankIdentification: string;
}

export interface ABusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationGetRequest {
    businessPartner: string;
    bankIdentification: string;
    $select?: Set<ABusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationGetSelectEnum>;
}

export interface ABusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationPatchRequest {
    businessPartner: string;
    bankIdentification: string;
    aPIBUSINESSPARTNERABusinessPartnerBankTypeUpdate: APIBUSINESSPARTNERABusinessPartnerBankTypeUpdate;
}

export interface ABusinessPartnerBankGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBankGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBankGetSelectEnum>;
}

export interface ABusinessPartnerBankPostRequest {
    aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate: APIBUSINESSPARTNERABusinessPartnerBankTypeCreate;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetRequest {
    businessPartner: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetSelectEnum>;
}

export interface ABusinessPartnerBusinessPartnerToBusinessPartnerBankPostRequest {
    businessPartner: string;
    aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate: APIBUSINESSPARTNERABusinessPartnerBankTypeCreate;
}

/**
 * 
 */
export class BankApi extends runtime.BaseAPI {

    /**
     * Deletes bank data of the business partner record identified by business partner number and bank identification.
     * Deletes business partner bank data.
     */
    async aBusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationDeleteRaw(requestParameters: ABusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationDelete.');
        }

        if (requestParameters.bankIdentification === null || requestParameters.bankIdentification === undefined) {
            throw new runtime.RequiredError('bankIdentification','Required parameter requestParameters.bankIdentification was null or undefined when calling aBusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerBank(BusinessPartner='{BusinessPartner}',BankIdentification='{BankIdentification}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"BankIdentification"}}`, encodeURIComponent(String(requestParameters.bankIdentification))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes bank data of the business partner record identified by business partner number and bank identification.
     * Deletes business partner bank data.
     */
    async aBusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationDelete(requestParameters: ABusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves business partner bank data identified by key fields such as business partner number and bank dentification.
     * Retrieves business partner bank data by using key fields.
     */
    async aBusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationGetRaw(requestParameters: ABusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerBankType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationGet.');
        }

        if (requestParameters.bankIdentification === null || requestParameters.bankIdentification === undefined) {
            throw new runtime.RequiredError('bankIdentification','Required parameter requestParameters.bankIdentification was null or undefined when calling aBusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerBank(BusinessPartner='{BusinessPartner}',BankIdentification='{BankIdentification}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"BankIdentification"}}`, encodeURIComponent(String(requestParameters.bankIdentification))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerBankTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner bank data identified by key fields such as business partner number and bank dentification.
     * Retrieves business partner bank data by using key fields.
     */
    async aBusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationGet(requestParameters: ABusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerBankType> {
        const response = await this.aBusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates bank data of the business partner record identified by business partner number and bank identification.
     * Updates business partner bank data.
     */
    async aBusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationPatchRaw(requestParameters: ABusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationPatch.');
        }

        if (requestParameters.bankIdentification === null || requestParameters.bankIdentification === undefined) {
            throw new runtime.RequiredError('bankIdentification','Required parameter requestParameters.bankIdentification was null or undefined when calling aBusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerBankTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerBankTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerBankTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerBankTypeUpdate was null or undefined when calling aBusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerBank(BusinessPartner='{BusinessPartner}',BankIdentification='{BankIdentification}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"BankIdentification"}}`, encodeURIComponent(String(requestParameters.bankIdentification))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerBankTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerBankTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates bank data of the business partner record identified by business partner number and bank identification.
     * Updates business partner bank data.
     */
    async aBusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationPatch(requestParameters: ABusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves business partner bank data fields of all the available records in the system.
     * Retrieves business partner bank data.
     */
    async aBusinessPartnerBankGetRaw(requestParameters: ABusinessPartnerBankGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerBankType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerBank`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerBankTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner bank data fields of all the available records in the system.
     * Retrieves business partner bank data.
     */
    async aBusinessPartnerBankGet(requestParameters: ABusinessPartnerBankGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerBankType> {
        const response = await this.aBusinessPartnerBankGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new business partner bank data linked to business partner.
     * Creates new business partner bank data.
     */
    async aBusinessPartnerBankPostRaw(requestParameters: ABusinessPartnerBankPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerBankType>> {
        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate was null or undefined when calling aBusinessPartnerBankPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerBank`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerBankTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerBankTypeFromJSON(jsonValue));
    }

    /**
     * Creates new business partner bank data linked to business partner.
     * Creates new business partner bank data.
     */
    async aBusinessPartnerBankPost(requestParameters: ABusinessPartnerBankPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerBankType> {
        const response = await this.aBusinessPartnerBankPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves business partner bank data fields of all the available records in the system.
     * Retrieves business partner bank data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerBankGetRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABusinessPartnerBankType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerBankGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerBank`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABusinessPartnerBankTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner bank data fields of all the available records in the system.
     * Retrieves business partner bank data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerBankGet(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABusinessPartnerBankType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerBankGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new business partner bank data linked to business partner.
     * Creates new business partner bank data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerBankPostRaw(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerBankPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABusinessPartnerBankType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerBankPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate was null or undefined when calling aBusinessPartnerBusinessPartnerToBusinessPartnerBankPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartner('{BusinessPartner}')/to_BusinessPartnerBank`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABusinessPartnerBankTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABusinessPartnerBankTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABusinessPartnerBankTypeFromJSON(jsonValue));
    }

    /**
     * Creates new business partner bank data linked to business partner.
     * Creates new business partner bank data.
     */
    async aBusinessPartnerBusinessPartnerToBusinessPartnerBankPost(requestParameters: ABusinessPartnerBusinessPartnerToBusinessPartnerBankPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABusinessPartnerBankType> {
        const response = await this.aBusinessPartnerBusinessPartnerToBusinessPartnerBankPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BankIdentification: 'BankIdentification',
    BankCountryKey: 'BankCountryKey',
    BankName: 'BankName',
    BankNumber: 'BankNumber',
    SwiftCode: 'SWIFTCode',
    BankControlKey: 'BankControlKey',
    BankAccountHolderName: 'BankAccountHolderName',
    BankAccountName: 'BankAccountName',
    ValidityStartDate: 'ValidityStartDate',
    ValidityEndDate: 'ValidityEndDate',
    Iban: 'IBAN',
    IbanValidityStartDate: 'IBANValidityStartDate',
    BankAccount: 'BankAccount',
    BankAccountReferenceText: 'BankAccountReferenceText',
    CollectionAuthInd: 'CollectionAuthInd',
    CityName: 'CityName',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ABusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationGetSelectEnum = typeof ABusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationGetSelectEnum[keyof typeof ABusinessPartnerBankBusinessPartnerBusinessPartnerBankIdentificationBankIdentificationGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBankGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    BankIdentification: 'BankIdentification',
    BankIdentificationDesc: 'BankIdentification desc',
    BankCountryKey: 'BankCountryKey',
    BankCountryKeyDesc: 'BankCountryKey desc',
    BankName: 'BankName',
    BankNameDesc: 'BankName desc',
    BankNumber: 'BankNumber',
    BankNumberDesc: 'BankNumber desc',
    SwiftCode: 'SWIFTCode',
    SwiftCodeDesc: 'SWIFTCode desc',
    BankControlKey: 'BankControlKey',
    BankControlKeyDesc: 'BankControlKey desc',
    BankAccountHolderName: 'BankAccountHolderName',
    BankAccountHolderNameDesc: 'BankAccountHolderName desc',
    BankAccountName: 'BankAccountName',
    BankAccountNameDesc: 'BankAccountName desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    Iban: 'IBAN',
    IbanDesc: 'IBAN desc',
    IbanValidityStartDate: 'IBANValidityStartDate',
    IbanValidityStartDateDesc: 'IBANValidityStartDate desc',
    BankAccount: 'BankAccount',
    BankAccountDesc: 'BankAccount desc',
    BankAccountReferenceText: 'BankAccountReferenceText',
    BankAccountReferenceTextDesc: 'BankAccountReferenceText desc',
    CollectionAuthInd: 'CollectionAuthInd',
    CollectionAuthIndDesc: 'CollectionAuthInd desc',
    CityName: 'CityName',
    CityNameDesc: 'CityName desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ABusinessPartnerBankGetOrderbyEnum = typeof ABusinessPartnerBankGetOrderbyEnum[keyof typeof ABusinessPartnerBankGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBankGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BankIdentification: 'BankIdentification',
    BankCountryKey: 'BankCountryKey',
    BankName: 'BankName',
    BankNumber: 'BankNumber',
    SwiftCode: 'SWIFTCode',
    BankControlKey: 'BankControlKey',
    BankAccountHolderName: 'BankAccountHolderName',
    BankAccountName: 'BankAccountName',
    ValidityStartDate: 'ValidityStartDate',
    ValidityEndDate: 'ValidityEndDate',
    Iban: 'IBAN',
    IbanValidityStartDate: 'IBANValidityStartDate',
    BankAccount: 'BankAccount',
    BankAccountReferenceText: 'BankAccountReferenceText',
    CollectionAuthInd: 'CollectionAuthInd',
    CityName: 'CityName',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ABusinessPartnerBankGetSelectEnum = typeof ABusinessPartnerBankGetSelectEnum[keyof typeof ABusinessPartnerBankGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    BankIdentification: 'BankIdentification',
    BankIdentificationDesc: 'BankIdentification desc',
    BankCountryKey: 'BankCountryKey',
    BankCountryKeyDesc: 'BankCountryKey desc',
    BankName: 'BankName',
    BankNameDesc: 'BankName desc',
    BankNumber: 'BankNumber',
    BankNumberDesc: 'BankNumber desc',
    SwiftCode: 'SWIFTCode',
    SwiftCodeDesc: 'SWIFTCode desc',
    BankControlKey: 'BankControlKey',
    BankControlKeyDesc: 'BankControlKey desc',
    BankAccountHolderName: 'BankAccountHolderName',
    BankAccountHolderNameDesc: 'BankAccountHolderName desc',
    BankAccountName: 'BankAccountName',
    BankAccountNameDesc: 'BankAccountName desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    Iban: 'IBAN',
    IbanDesc: 'IBAN desc',
    IbanValidityStartDate: 'IBANValidityStartDate',
    IbanValidityStartDateDesc: 'IBANValidityStartDate desc',
    BankAccount: 'BankAccount',
    BankAccountDesc: 'BankAccount desc',
    BankAccountReferenceText: 'BankAccountReferenceText',
    BankAccountReferenceTextDesc: 'BankAccountReferenceText desc',
    CollectionAuthInd: 'CollectionAuthInd',
    CollectionAuthIndDesc: 'CollectionAuthInd desc',
    CityName: 'CityName',
    CityNameDesc: 'CityName desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetOrderbyEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetOrderbyEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    BankIdentification: 'BankIdentification',
    BankCountryKey: 'BankCountryKey',
    BankName: 'BankName',
    BankNumber: 'BankNumber',
    SwiftCode: 'SWIFTCode',
    BankControlKey: 'BankControlKey',
    BankAccountHolderName: 'BankAccountHolderName',
    BankAccountName: 'BankAccountName',
    ValidityStartDate: 'ValidityStartDate',
    ValidityEndDate: 'ValidityEndDate',
    Iban: 'IBAN',
    IbanValidityStartDate: 'IBANValidityStartDate',
    BankAccount: 'BankAccount',
    BankAccountReferenceText: 'BankAccountReferenceText',
    CollectionAuthInd: 'CollectionAuthInd',
    CityName: 'CityName',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetSelectEnum = typeof ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetSelectEnum[keyof typeof ABusinessPartnerBusinessPartnerToBusinessPartnerBankGetSelectEnum];
