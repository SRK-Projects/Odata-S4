/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERABPIntlAddressVersionType,
  APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate,
  APIBUSINESSPARTNERABPIntlAddressVersionTypeUpdate,
  CollectionOfABPIntlAddressVersionType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERABPIntlAddressVersionTypeFromJSON,
    APIBUSINESSPARTNERABPIntlAddressVersionTypeToJSON,
    APIBUSINESSPARTNERABPIntlAddressVersionTypeCreateFromJSON,
    APIBUSINESSPARTNERABPIntlAddressVersionTypeCreateToJSON,
    APIBUSINESSPARTNERABPIntlAddressVersionTypeUpdateFromJSON,
    APIBUSINESSPARTNERABPIntlAddressVersionTypeUpdateToJSON,
    CollectionOfABPIntlAddressVersionTypeFromJSON,
    CollectionOfABPIntlAddressVersionTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeDeleteRequest {
    businessPartner: string;
    addressID: string;
    addressRepresentationCode: string;
}

export interface ABPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeGetRequest {
    businessPartner: string;
    addressID: string;
    addressRepresentationCode: string;
    $select?: Set<ABPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeGetSelectEnum>;
}

export interface ABPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodePatchRequest {
    businessPartner: string;
    addressID: string;
    addressRepresentationCode: string;
    aPIBUSINESSPARTNERABPIntlAddressVersionTypeUpdate: APIBUSINESSPARTNERABPIntlAddressVersionTypeUpdate;
}

export interface ABPIntlAddressVersionGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPIntlAddressVersionGetOrderbyEnum>;
    $select?: Set<ABPIntlAddressVersionGetSelectEnum>;
}

export interface ABPIntlAddressVersionPostRequest {
    aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate: APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetRequest {
    businessPartner: string;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetSelectEnum>;
}

export interface ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostRequest {
    businessPartner: string;
    addressID: string;
    aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate: APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate;
}

/**
 * 
 */
export class BPInternationalAddressVersionApi extends runtime.BaseAPI {

    /**
     * Deletes a business partner international address version by BusinessPartner, AddressID and AddressRepresentationCode.
     * Removes the international address version assigned to the business partner by using the key fields.
     */
    async aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeDeleteRaw(requestParameters: ABPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeDelete.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeDelete.');
        }

        if (requestParameters.addressRepresentationCode === null || requestParameters.addressRepresentationCode === undefined) {
            throw new runtime.RequiredError('addressRepresentationCode','Required parameter requestParameters.addressRepresentationCode was null or undefined when calling aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPIntlAddressVersion(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}',AddressRepresentationCode='{AddressRepresentationCode}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"AddressRepresentationCode"}}`, encodeURIComponent(String(requestParameters.addressRepresentationCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a business partner international address version by BusinessPartner, AddressID and AddressRepresentationCode.
     * Removes the international address version assigned to the business partner by using the key fields.
     */
    async aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeDelete(requestParameters: ABPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a business partner international address version by BusinessPartner, AddressID and AddressRepresentationCode.
     * Retrieves business partner international address versions by key fields.
     */
    async aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeGetRaw(requestParameters: ABPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPIntlAddressVersionType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeGet.');
        }

        if (requestParameters.addressRepresentationCode === null || requestParameters.addressRepresentationCode === undefined) {
            throw new runtime.RequiredError('addressRepresentationCode','Required parameter requestParameters.addressRepresentationCode was null or undefined when calling aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPIntlAddressVersion(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}',AddressRepresentationCode='{AddressRepresentationCode}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"AddressRepresentationCode"}}`, encodeURIComponent(String(requestParameters.addressRepresentationCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPIntlAddressVersionTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves a business partner international address version by BusinessPartner, AddressID and AddressRepresentationCode.
     * Retrieves business partner international address versions by key fields.
     */
    async aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeGet(requestParameters: ABPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPIntlAddressVersionType> {
        const response = await this.aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a business partner international address version by BusinessPartner, AddressID and AddressRepresentationCode.
     * Updates a business partner international address version.
     */
    async aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodePatchRaw(requestParameters: ABPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodePatch.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodePatch.');
        }

        if (requestParameters.addressRepresentationCode === null || requestParameters.addressRepresentationCode === undefined) {
            throw new runtime.RequiredError('addressRepresentationCode','Required parameter requestParameters.addressRepresentationCode was null or undefined when calling aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodePatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPIntlAddressVersionTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERABPIntlAddressVersionTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPIntlAddressVersionTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERABPIntlAddressVersionTypeUpdate was null or undefined when calling aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPIntlAddressVersion(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}',AddressRepresentationCode='{AddressRepresentationCode}')`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))).replace(`{${"AddressRepresentationCode"}}`, encodeURIComponent(String(requestParameters.addressRepresentationCode))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPIntlAddressVersionTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERABPIntlAddressVersionTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a business partner international address version by BusinessPartner, AddressID and AddressRepresentationCode.
     * Updates a business partner international address version.
     */
    async aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodePatch(requestParameters: ABPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodePatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves business partner international address versions of all the available records in the system.
     * Retrieves business partner international address versions.
     */
    async aBPIntlAddressVersionGetRaw(requestParameters: ABPIntlAddressVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPIntlAddressVersionType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPIntlAddressVersion`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPIntlAddressVersionTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves business partner international address versions of all the available records in the system.
     * Retrieves business partner international address versions.
     */
    async aBPIntlAddressVersionGet(requestParameters: ABPIntlAddressVersionGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPIntlAddressVersionType> {
        const response = await this.aBPIntlAddressVersionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new international address version for an existing business partner.
     * Creates a new business partner international address version.
     */
    async aBPIntlAddressVersionPostRaw(requestParameters: ABPIntlAddressVersionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPIntlAddressVersionType>> {
        if (requestParameters.aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate was null or undefined when calling aBPIntlAddressVersionPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPIntlAddressVersion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPIntlAddressVersionTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPIntlAddressVersionTypeFromJSON(jsonValue));
    }

    /**
     * Creates a new international address version for an existing business partner.
     * Creates a new business partner international address version.
     */
    async aBPIntlAddressVersionPost(requestParameters: ABPIntlAddressVersionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPIntlAddressVersionType> {
        const response = await this.aBPIntlAddressVersionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get entities from related to_BPIntlAddressVersion
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPIntlAddressVersionType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_BPIntlAddressVersion`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPIntlAddressVersionTypeFromJSON(jsonValue));
    }

    /**
     * Get entities from related to_BPIntlAddressVersion
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPIntlAddressVersionType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add new entity to related to_BPIntlAddressVersion
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostRaw(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPIntlAddressVersionType>> {
        if (requestParameters.businessPartner === null || requestParameters.businessPartner === undefined) {
            throw new runtime.RequiredError('businessPartner','Required parameter requestParameters.businessPartner was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate was null or undefined when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerAddress(BusinessPartner='{BusinessPartner}',AddressID='{AddressID}')/to_BPIntlAddressVersion`.replace(`{${"BusinessPartner"}}`, encodeURIComponent(String(requestParameters.businessPartner))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPIntlAddressVersionTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPIntlAddressVersionTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPIntlAddressVersionTypeFromJSON(jsonValue));
    }

    /**
     * Add new entity to related to_BPIntlAddressVersion
     */
    async aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost(requestParameters: ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPIntlAddressVersionType> {
        const response = await this.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    AddressRepresentationCode: 'AddressRepresentationCode',
    AddresseeFullName: 'AddresseeFullName',
    AddressIdbyExternalSystem: 'AddressIDByExternalSystem',
    AddressPersonId: 'AddressPersonID',
    AddressSearchTerm1: 'AddressSearchTerm1',
    AddressSearchTerm2: 'AddressSearchTerm2',
    AddressTimeZone: 'AddressTimeZone',
    CareOfName: 'CareOfName',
    CityName: 'CityName',
    CityNumber: 'CityNumber',
    CompanyPostalCode: 'CompanyPostalCode',
    Country: 'Country',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    DistrictName: 'DistrictName',
    FormOfAddress: 'FormOfAddress',
    HouseNumber: 'HouseNumber',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    Language: 'Language',
    OrganizationName1: 'OrganizationName1',
    OrganizationName2: 'OrganizationName2',
    OrganizationName3: 'OrganizationName3',
    OrganizationName4: 'OrganizationName4',
    PersonFamilyName: 'PersonFamilyName',
    PersonGivenName: 'PersonGivenName',
    PoBox: 'POBox',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxPostalCode: 'POBoxPostalCode',
    PostalCode: 'PostalCode',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    Region: 'Region',
    SecondaryRegion: 'SecondaryRegion',
    SecondaryRegionName: 'SecondaryRegionName',
    StreetName: 'StreetName',
    StreetPrefixName1: 'StreetPrefixName1',
    StreetPrefixName2: 'StreetPrefixName2',
    StreetSuffixName1: 'StreetSuffixName1',
    StreetSuffixName2: 'StreetSuffixName2',
    TaxJurisdiction: 'TaxJurisdiction',
    TertiaryRegion: 'TertiaryRegion',
    TertiaryRegionName: 'TertiaryRegionName',
    TransportZone: 'TransportZone',
    VillageName: 'VillageName'
} as const;
export type ABPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeGetSelectEnum = typeof ABPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeGetSelectEnum[keyof typeof ABPIntlAddressVersionBusinessPartnerBusinessPartnerAddressIDAddressIDAddressRepresentationCodeAddressRepresentationCodeGetSelectEnum];
/**
 * @export
 */
export const ABPIntlAddressVersionGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    AddressRepresentationCode: 'AddressRepresentationCode',
    AddressRepresentationCodeDesc: 'AddressRepresentationCode desc',
    AddresseeFullName: 'AddresseeFullName',
    AddresseeFullNameDesc: 'AddresseeFullName desc',
    AddressIdbyExternalSystem: 'AddressIDByExternalSystem',
    AddressIdbyExternalSystemDesc: 'AddressIDByExternalSystem desc',
    AddressPersonId: 'AddressPersonID',
    AddressPersonIdDesc: 'AddressPersonID desc',
    AddressSearchTerm1: 'AddressSearchTerm1',
    AddressSearchTerm1Desc: 'AddressSearchTerm1 desc',
    AddressSearchTerm2: 'AddressSearchTerm2',
    AddressSearchTerm2Desc: 'AddressSearchTerm2 desc',
    AddressTimeZone: 'AddressTimeZone',
    AddressTimeZoneDesc: 'AddressTimeZone desc',
    CareOfName: 'CareOfName',
    CareOfNameDesc: 'CareOfName desc',
    CityName: 'CityName',
    CityNameDesc: 'CityName desc',
    CityNumber: 'CityNumber',
    CityNumberDesc: 'CityNumber desc',
    CompanyPostalCode: 'CompanyPostalCode',
    CompanyPostalCodeDesc: 'CompanyPostalCode desc',
    Country: 'Country',
    CountryDesc: 'Country desc',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceNumberDesc: 'DeliveryServiceNumber desc',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    DeliveryServiceTypeCodeDesc: 'DeliveryServiceTypeCode desc',
    DistrictName: 'DistrictName',
    DistrictNameDesc: 'DistrictName desc',
    FormOfAddress: 'FormOfAddress',
    FormOfAddressDesc: 'FormOfAddress desc',
    HouseNumber: 'HouseNumber',
    HouseNumberDesc: 'HouseNumber desc',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    HouseNumberSupplementTextDesc: 'HouseNumberSupplementText desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    OrganizationName1: 'OrganizationName1',
    OrganizationName1Desc: 'OrganizationName1 desc',
    OrganizationName2: 'OrganizationName2',
    OrganizationName2Desc: 'OrganizationName2 desc',
    OrganizationName3: 'OrganizationName3',
    OrganizationName3Desc: 'OrganizationName3 desc',
    OrganizationName4: 'OrganizationName4',
    OrganizationName4Desc: 'OrganizationName4 desc',
    PersonFamilyName: 'PersonFamilyName',
    PersonFamilyNameDesc: 'PersonFamilyName desc',
    PersonGivenName: 'PersonGivenName',
    PersonGivenNameDesc: 'PersonGivenName desc',
    PoBox: 'POBox',
    PoBoxDesc: 'POBox desc',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCityNameDesc: 'POBoxDeviatingCityName desc',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingCountryDesc: 'POBoxDeviatingCountry desc',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxDeviatingRegionDesc: 'POBoxDeviatingRegion desc',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxIsWithoutNumberDesc: 'POBoxIsWithoutNumber desc',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxLobbyNameDesc: 'POBoxLobbyName desc',
    PoBoxPostalCode: 'POBoxPostalCode',
    PoBoxPostalCodeDesc: 'POBoxPostalCode desc',
    PostalCode: 'PostalCode',
    PostalCodeDesc: 'PostalCode desc',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    PrfrdCommMediumTypeDesc: 'PrfrdCommMediumType desc',
    Region: 'Region',
    RegionDesc: 'Region desc',
    SecondaryRegion: 'SecondaryRegion',
    SecondaryRegionDesc: 'SecondaryRegion desc',
    SecondaryRegionName: 'SecondaryRegionName',
    SecondaryRegionNameDesc: 'SecondaryRegionName desc',
    StreetName: 'StreetName',
    StreetNameDesc: 'StreetName desc',
    StreetPrefixName1: 'StreetPrefixName1',
    StreetPrefixName1Desc: 'StreetPrefixName1 desc',
    StreetPrefixName2: 'StreetPrefixName2',
    StreetPrefixName2Desc: 'StreetPrefixName2 desc',
    StreetSuffixName1: 'StreetSuffixName1',
    StreetSuffixName1Desc: 'StreetSuffixName1 desc',
    StreetSuffixName2: 'StreetSuffixName2',
    StreetSuffixName2Desc: 'StreetSuffixName2 desc',
    TaxJurisdiction: 'TaxJurisdiction',
    TaxJurisdictionDesc: 'TaxJurisdiction desc',
    TertiaryRegion: 'TertiaryRegion',
    TertiaryRegionDesc: 'TertiaryRegion desc',
    TertiaryRegionName: 'TertiaryRegionName',
    TertiaryRegionNameDesc: 'TertiaryRegionName desc',
    TransportZone: 'TransportZone',
    TransportZoneDesc: 'TransportZone desc',
    VillageName: 'VillageName',
    VillageNameDesc: 'VillageName desc'
} as const;
export type ABPIntlAddressVersionGetOrderbyEnum = typeof ABPIntlAddressVersionGetOrderbyEnum[keyof typeof ABPIntlAddressVersionGetOrderbyEnum];
/**
 * @export
 */
export const ABPIntlAddressVersionGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    AddressRepresentationCode: 'AddressRepresentationCode',
    AddresseeFullName: 'AddresseeFullName',
    AddressIdbyExternalSystem: 'AddressIDByExternalSystem',
    AddressPersonId: 'AddressPersonID',
    AddressSearchTerm1: 'AddressSearchTerm1',
    AddressSearchTerm2: 'AddressSearchTerm2',
    AddressTimeZone: 'AddressTimeZone',
    CareOfName: 'CareOfName',
    CityName: 'CityName',
    CityNumber: 'CityNumber',
    CompanyPostalCode: 'CompanyPostalCode',
    Country: 'Country',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    DistrictName: 'DistrictName',
    FormOfAddress: 'FormOfAddress',
    HouseNumber: 'HouseNumber',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    Language: 'Language',
    OrganizationName1: 'OrganizationName1',
    OrganizationName2: 'OrganizationName2',
    OrganizationName3: 'OrganizationName3',
    OrganizationName4: 'OrganizationName4',
    PersonFamilyName: 'PersonFamilyName',
    PersonGivenName: 'PersonGivenName',
    PoBox: 'POBox',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxPostalCode: 'POBoxPostalCode',
    PostalCode: 'PostalCode',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    Region: 'Region',
    SecondaryRegion: 'SecondaryRegion',
    SecondaryRegionName: 'SecondaryRegionName',
    StreetName: 'StreetName',
    StreetPrefixName1: 'StreetPrefixName1',
    StreetPrefixName2: 'StreetPrefixName2',
    StreetSuffixName1: 'StreetSuffixName1',
    StreetSuffixName2: 'StreetSuffixName2',
    TaxJurisdiction: 'TaxJurisdiction',
    TertiaryRegion: 'TertiaryRegion',
    TertiaryRegionName: 'TertiaryRegionName',
    TransportZone: 'TransportZone',
    VillageName: 'VillageName'
} as const;
export type ABPIntlAddressVersionGetSelectEnum = typeof ABPIntlAddressVersionGetSelectEnum[keyof typeof ABPIntlAddressVersionGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetOrderbyEnum = {
    BusinessPartner: 'BusinessPartner',
    BusinessPartnerDesc: 'BusinessPartner desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    AddressRepresentationCode: 'AddressRepresentationCode',
    AddressRepresentationCodeDesc: 'AddressRepresentationCode desc',
    AddresseeFullName: 'AddresseeFullName',
    AddresseeFullNameDesc: 'AddresseeFullName desc',
    AddressIdbyExternalSystem: 'AddressIDByExternalSystem',
    AddressIdbyExternalSystemDesc: 'AddressIDByExternalSystem desc',
    AddressPersonId: 'AddressPersonID',
    AddressPersonIdDesc: 'AddressPersonID desc',
    AddressSearchTerm1: 'AddressSearchTerm1',
    AddressSearchTerm1Desc: 'AddressSearchTerm1 desc',
    AddressSearchTerm2: 'AddressSearchTerm2',
    AddressSearchTerm2Desc: 'AddressSearchTerm2 desc',
    AddressTimeZone: 'AddressTimeZone',
    AddressTimeZoneDesc: 'AddressTimeZone desc',
    CareOfName: 'CareOfName',
    CareOfNameDesc: 'CareOfName desc',
    CityName: 'CityName',
    CityNameDesc: 'CityName desc',
    CityNumber: 'CityNumber',
    CityNumberDesc: 'CityNumber desc',
    CompanyPostalCode: 'CompanyPostalCode',
    CompanyPostalCodeDesc: 'CompanyPostalCode desc',
    Country: 'Country',
    CountryDesc: 'Country desc',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceNumberDesc: 'DeliveryServiceNumber desc',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    DeliveryServiceTypeCodeDesc: 'DeliveryServiceTypeCode desc',
    DistrictName: 'DistrictName',
    DistrictNameDesc: 'DistrictName desc',
    FormOfAddress: 'FormOfAddress',
    FormOfAddressDesc: 'FormOfAddress desc',
    HouseNumber: 'HouseNumber',
    HouseNumberDesc: 'HouseNumber desc',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    HouseNumberSupplementTextDesc: 'HouseNumberSupplementText desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    OrganizationName1: 'OrganizationName1',
    OrganizationName1Desc: 'OrganizationName1 desc',
    OrganizationName2: 'OrganizationName2',
    OrganizationName2Desc: 'OrganizationName2 desc',
    OrganizationName3: 'OrganizationName3',
    OrganizationName3Desc: 'OrganizationName3 desc',
    OrganizationName4: 'OrganizationName4',
    OrganizationName4Desc: 'OrganizationName4 desc',
    PersonFamilyName: 'PersonFamilyName',
    PersonFamilyNameDesc: 'PersonFamilyName desc',
    PersonGivenName: 'PersonGivenName',
    PersonGivenNameDesc: 'PersonGivenName desc',
    PoBox: 'POBox',
    PoBoxDesc: 'POBox desc',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCityNameDesc: 'POBoxDeviatingCityName desc',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingCountryDesc: 'POBoxDeviatingCountry desc',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxDeviatingRegionDesc: 'POBoxDeviatingRegion desc',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxIsWithoutNumberDesc: 'POBoxIsWithoutNumber desc',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxLobbyNameDesc: 'POBoxLobbyName desc',
    PoBoxPostalCode: 'POBoxPostalCode',
    PoBoxPostalCodeDesc: 'POBoxPostalCode desc',
    PostalCode: 'PostalCode',
    PostalCodeDesc: 'PostalCode desc',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    PrfrdCommMediumTypeDesc: 'PrfrdCommMediumType desc',
    Region: 'Region',
    RegionDesc: 'Region desc',
    SecondaryRegion: 'SecondaryRegion',
    SecondaryRegionDesc: 'SecondaryRegion desc',
    SecondaryRegionName: 'SecondaryRegionName',
    SecondaryRegionNameDesc: 'SecondaryRegionName desc',
    StreetName: 'StreetName',
    StreetNameDesc: 'StreetName desc',
    StreetPrefixName1: 'StreetPrefixName1',
    StreetPrefixName1Desc: 'StreetPrefixName1 desc',
    StreetPrefixName2: 'StreetPrefixName2',
    StreetPrefixName2Desc: 'StreetPrefixName2 desc',
    StreetSuffixName1: 'StreetSuffixName1',
    StreetSuffixName1Desc: 'StreetSuffixName1 desc',
    StreetSuffixName2: 'StreetSuffixName2',
    StreetSuffixName2Desc: 'StreetSuffixName2 desc',
    TaxJurisdiction: 'TaxJurisdiction',
    TaxJurisdictionDesc: 'TaxJurisdiction desc',
    TertiaryRegion: 'TertiaryRegion',
    TertiaryRegionDesc: 'TertiaryRegion desc',
    TertiaryRegionName: 'TertiaryRegionName',
    TertiaryRegionNameDesc: 'TertiaryRegionName desc',
    TransportZone: 'TransportZone',
    TransportZoneDesc: 'TransportZone desc',
    VillageName: 'VillageName',
    VillageNameDesc: 'VillageName desc'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetOrderbyEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetOrderbyEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetSelectEnum = {
    BusinessPartner: 'BusinessPartner',
    AddressId: 'AddressID',
    AddressRepresentationCode: 'AddressRepresentationCode',
    AddresseeFullName: 'AddresseeFullName',
    AddressIdbyExternalSystem: 'AddressIDByExternalSystem',
    AddressPersonId: 'AddressPersonID',
    AddressSearchTerm1: 'AddressSearchTerm1',
    AddressSearchTerm2: 'AddressSearchTerm2',
    AddressTimeZone: 'AddressTimeZone',
    CareOfName: 'CareOfName',
    CityName: 'CityName',
    CityNumber: 'CityNumber',
    CompanyPostalCode: 'CompanyPostalCode',
    Country: 'Country',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    DistrictName: 'DistrictName',
    FormOfAddress: 'FormOfAddress',
    HouseNumber: 'HouseNumber',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    Language: 'Language',
    OrganizationName1: 'OrganizationName1',
    OrganizationName2: 'OrganizationName2',
    OrganizationName3: 'OrganizationName3',
    OrganizationName4: 'OrganizationName4',
    PersonFamilyName: 'PersonFamilyName',
    PersonGivenName: 'PersonGivenName',
    PoBox: 'POBox',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxPostalCode: 'POBoxPostalCode',
    PostalCode: 'PostalCode',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    Region: 'Region',
    SecondaryRegion: 'SecondaryRegion',
    SecondaryRegionName: 'SecondaryRegionName',
    StreetName: 'StreetName',
    StreetPrefixName1: 'StreetPrefixName1',
    StreetPrefixName2: 'StreetPrefixName2',
    StreetSuffixName1: 'StreetSuffixName1',
    StreetSuffixName2: 'StreetSuffixName2',
    TaxJurisdiction: 'TaxJurisdiction',
    TertiaryRegion: 'TertiaryRegion',
    TertiaryRegionName: 'TertiaryRegionName',
    TransportZone: 'TransportZone',
    VillageName: 'VillageName'
} as const;
export type ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetSelectEnum = typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetSelectEnum[keyof typeof ABusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetSelectEnum];
