/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoType,
  APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate,
  APIBUSINESSPARTNERACustomerSalesAreaTaxType,
  APIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate,
  APIBUSINESSPARTNERACustomerSalesAreaTaxTypeUpdate,
  CollectionOfACustSlsAreaAddrDepdntTaxInfoType,
  CollectionOfACustomerSalesAreaTaxType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeFromJSON,
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeToJSON,
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreateFromJSON,
    APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreateToJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTaxTypeFromJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTaxTypeToJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreateFromJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreateToJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTaxTypeUpdateFromJSON,
    APIBUSINESSPARTNERACustomerSalesAreaTaxTypeUpdateToJSON,
    CollectionOfACustSlsAreaAddrDepdntTaxInfoTypeFromJSON,
    CollectionOfACustSlsAreaAddrDepdntTaxInfoTypeToJSON,
    CollectionOfACustomerSalesAreaTaxTypeFromJSON,
    CollectionOfACustomerSalesAreaTaxTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetOrderbyEnum>;
    $select?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetSelectEnum>;
    $expand?: Set<ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetExpandEnum>;
}

export interface ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate: APIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate;
}

export interface ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    departureCountry: string;
    customerTaxCategory: string;
    $select?: Set<ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetSelectEnum>;
    $expand?: Set<ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetExpandEnum>;
}

export interface ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    departureCountry: string;
    customerTaxCategory: string;
    aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeUpdate: APIBUSINESSPARTNERACustomerSalesAreaTaxTypeUpdate;
}

export interface ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    departureCountry: string;
    customerTaxCategory: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetOrderbyEnum>;
    $select?: Set<ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetSelectEnum>;
}

export interface ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPostRequest {
    customer: string;
    salesOrganization: string;
    distributionChannel: string;
    division: string;
    departureCountry: string;
    customerTaxCategory: string;
    aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate: APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate;
}

export interface ACustomerSalesAreaTaxGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ACustomerSalesAreaTaxGetOrderbyEnum>;
    $select?: Set<ACustomerSalesAreaTaxGetSelectEnum>;
    $expand?: Set<ACustomerSalesAreaTaxGetExpandEnum>;
}

export interface ACustomerSalesAreaTaxPostRequest {
    aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate: APIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate;
}

/**
 * 
 */
export class SalesAreaTaxApi extends runtime.BaseAPI {

    /**
     * Retrieves customer sales area data fields of all the available records in the system.
     * Retrieves customer sales area data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerSalesAreaTaxType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')/to_SalesAreaTax`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerSalesAreaTaxTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer sales area data fields of all the available records in the system.
     * Retrieves customer sales area data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerSalesAreaTaxType> {
        const response = await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves customer sales area tax data fields of all the available records in the system.
     * Retrieves customer sales area tax data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostRaw(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerSalesAreaTaxType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate was null or undefined when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesArea(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}')/to_SalesAreaTax`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerSalesAreaTaxTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer sales area tax data fields of all the available records in the system.
     * Retrieves customer sales area tax data.
     */
    async aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost(requestParameters: ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerSalesAreaTaxType> {
        const response = await this.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get sales area tax data by Customer, SalesOrganization, DistributionChannel, Division, DepartureCountry and CustomerTaxCategory
     * Retrieves customer sales area tax data using key fields.
     */
    async aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetRaw(requestParameters: ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerSalesAreaTaxType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet.');
        }

        if (requestParameters.departureCountry === null || requestParameters.departureCountry === undefined) {
            throw new runtime.RequiredError('departureCountry','Required parameter requestParameters.departureCountry was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet.');
        }

        if (requestParameters.customerTaxCategory === null || requestParameters.customerTaxCategory === undefined) {
            throw new runtime.RequiredError('customerTaxCategory','Required parameter requestParameters.customerTaxCategory was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesAreaTax(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',DepartureCountry='{DepartureCountry}',CustomerTaxCategory='{CustomerTaxCategory}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"DepartureCountry"}}`, encodeURIComponent(String(requestParameters.departureCountry))).replace(`{${"CustomerTaxCategory"}}`, encodeURIComponent(String(requestParameters.customerTaxCategory))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerSalesAreaTaxTypeFromJSON(jsonValue));
    }

    /**
     * Get sales area tax data by Customer, SalesOrganization, DistributionChannel, Division, DepartureCountry and CustomerTaxCategory
     * Retrieves customer sales area tax data using key fields.
     */
    async aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet(requestParameters: ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerSalesAreaTaxType> {
        const response = await this.aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes customer sales area tax data from the sales record linked to the customer.
     * Deletes customer sales area tax data.
     */
    async aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchRaw(requestParameters: ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch.');
        }

        if (requestParameters.departureCountry === null || requestParameters.departureCountry === undefined) {
            throw new runtime.RequiredError('departureCountry','Required parameter requestParameters.departureCountry was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch.');
        }

        if (requestParameters.customerTaxCategory === null || requestParameters.customerTaxCategory === undefined) {
            throw new runtime.RequiredError('customerTaxCategory','Required parameter requestParameters.customerTaxCategory was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeUpdate was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesAreaTax(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',DepartureCountry='{DepartureCountry}',CustomerTaxCategory='{CustomerTaxCategory}')`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"DepartureCountry"}}`, encodeURIComponent(String(requestParameters.departureCountry))).replace(`{${"CustomerTaxCategory"}}`, encodeURIComponent(String(requestParameters.customerTaxCategory))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerSalesAreaTaxTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes customer sales area tax data from the sales record linked to the customer.
     * Deletes customer sales area tax data.
     */
    async aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch(requestParameters: ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves address dependent customer sales area tax data fields of all the available records in the system.
     * Retrieves address dependent customer sales area tax data.
     */
    async aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetRaw(requestParameters: ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustSlsAreaAddrDepdntTaxInfoType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGet.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGet.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGet.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGet.');
        }

        if (requestParameters.departureCountry === null || requestParameters.departureCountry === undefined) {
            throw new runtime.RequiredError('departureCountry','Required parameter requestParameters.departureCountry was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGet.');
        }

        if (requestParameters.customerTaxCategory === null || requestParameters.customerTaxCategory === undefined) {
            throw new runtime.RequiredError('customerTaxCategory','Required parameter requestParameters.customerTaxCategory was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesAreaTax(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',DepartureCountry='{DepartureCountry}',CustomerTaxCategory='{CustomerTaxCategory}')/to_SlsAreaAddrDepdntTax`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"DepartureCountry"}}`, encodeURIComponent(String(requestParameters.departureCountry))).replace(`{${"CustomerTaxCategory"}}`, encodeURIComponent(String(requestParameters.customerTaxCategory))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustSlsAreaAddrDepdntTaxInfoTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves address dependent customer sales area tax data fields of all the available records in the system.
     * Retrieves address dependent customer sales area tax data.
     */
    async aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGet(requestParameters: ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustSlsAreaAddrDepdntTaxInfoType> {
        const response = await this.aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new address dependent customer sales area tax data.
     * Creates new address dependent customer sales area tax data.
     */
    async aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPostRaw(requestParameters: ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoType>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPost.');
        }

        if (requestParameters.salesOrganization === null || requestParameters.salesOrganization === undefined) {
            throw new runtime.RequiredError('salesOrganization','Required parameter requestParameters.salesOrganization was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPost.');
        }

        if (requestParameters.distributionChannel === null || requestParameters.distributionChannel === undefined) {
            throw new runtime.RequiredError('distributionChannel','Required parameter requestParameters.distributionChannel was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPost.');
        }

        if (requestParameters.division === null || requestParameters.division === undefined) {
            throw new runtime.RequiredError('division','Required parameter requestParameters.division was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPost.');
        }

        if (requestParameters.departureCountry === null || requestParameters.departureCountry === undefined) {
            throw new runtime.RequiredError('departureCountry','Required parameter requestParameters.departureCountry was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPost.');
        }

        if (requestParameters.customerTaxCategory === null || requestParameters.customerTaxCategory === undefined) {
            throw new runtime.RequiredError('customerTaxCategory','Required parameter requestParameters.customerTaxCategory was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate was null or undefined when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesAreaTax(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',DepartureCountry='{DepartureCountry}',CustomerTaxCategory='{CustomerTaxCategory}')/to_SlsAreaAddrDepdntTax`.replace(`{${"Customer"}}`, encodeURIComponent(String(requestParameters.customer))).replace(`{${"SalesOrganization"}}`, encodeURIComponent(String(requestParameters.salesOrganization))).replace(`{${"DistributionChannel"}}`, encodeURIComponent(String(requestParameters.distributionChannel))).replace(`{${"Division"}}`, encodeURIComponent(String(requestParameters.division))).replace(`{${"DepartureCountry"}}`, encodeURIComponent(String(requestParameters.departureCountry))).replace(`{${"CustomerTaxCategory"}}`, encodeURIComponent(String(requestParameters.customerTaxCategory))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoTypeFromJSON(jsonValue));
    }

    /**
     * Creates new address dependent customer sales area tax data.
     * Creates new address dependent customer sales area tax data.
     */
    async aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPost(requestParameters: ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustSlsAreaAddrDepdntTaxInfoType> {
        const response = await this.aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves customer sales area tax data fields of all the available records in the system.
     * Retrieves customer sales area tax data.
     */
    async aCustomerSalesAreaTaxGetRaw(requestParameters: ACustomerSalesAreaTaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfACustomerSalesAreaTaxType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesAreaTax`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfACustomerSalesAreaTaxTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves customer sales area tax data fields of all the available records in the system.
     * Retrieves customer sales area tax data.
     */
    async aCustomerSalesAreaTaxGet(requestParameters: ACustomerSalesAreaTaxGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfACustomerSalesAreaTaxType> {
        const response = await this.aCustomerSalesAreaTaxGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates customer sales area tax data in the sales record linked to the customer.
     * Creates customer sales area tax data.
     */
    async aCustomerSalesAreaTaxPostRaw(requestParameters: ACustomerSalesAreaTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERACustomerSalesAreaTaxType>> {
        if (requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate === null || requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate was null or undefined when calling aCustomerSalesAreaTaxPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_CustomerSalesAreaTax`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERACustomerSalesAreaTaxTypeFromJSON(jsonValue));
    }

    /**
     * Creates customer sales area tax data in the sales record linked to the customer.
     * Creates customer sales area tax data.
     */
    async aCustomerSalesAreaTaxPost(requestParameters: ACustomerSalesAreaTaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERACustomerSalesAreaTaxType> {
        const response = await this.aCustomerSalesAreaTaxPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    DepartureCountry: 'DepartureCountry',
    DepartureCountryDesc: 'DepartureCountry desc',
    CustomerTaxCategory: 'CustomerTaxCategory',
    CustomerTaxCategoryDesc: 'CustomerTaxCategory desc',
    CustomerTaxClassification: 'CustomerTaxClassification',
    CustomerTaxClassificationDesc: 'CustomerTaxClassification desc'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetOrderbyEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetOrderbyEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    DepartureCountry: 'DepartureCountry',
    CustomerTaxCategory: 'CustomerTaxCategory',
    CustomerTaxClassification: 'CustomerTaxClassification'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetSelectEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetSelectEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetSelectEnum];
/**
 * @export
 */
export const ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetExpandEnum = {
    Star: '*',
    ToSlsAreaAddrDepdntTax: 'to_SlsAreaAddrDepdntTax'
} as const;
export type ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetExpandEnum = typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetExpandEnum[keyof typeof ACustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetExpandEnum];
/**
 * @export
 */
export const ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    DepartureCountry: 'DepartureCountry',
    CustomerTaxCategory: 'CustomerTaxCategory',
    CustomerTaxClassification: 'CustomerTaxClassification'
} as const;
export type ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetSelectEnum = typeof ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetSelectEnum[keyof typeof ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetSelectEnum];
/**
 * @export
 */
export const ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetExpandEnum = {
    Star: '*',
    ToSlsAreaAddrDepdntTax: 'to_SlsAreaAddrDepdntTax'
} as const;
export type ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetExpandEnum = typeof ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetExpandEnum[keyof typeof ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetExpandEnum];
/**
 * @export
 */
export const ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    DepartureCountry: 'DepartureCountry',
    DepartureCountryDesc: 'DepartureCountry desc',
    CustomerTaxCategory: 'CustomerTaxCategory',
    CustomerTaxCategoryDesc: 'CustomerTaxCategory desc',
    CustomerTaxClassification: 'CustomerTaxClassification',
    CustomerTaxClassificationDesc: 'CustomerTaxClassification desc'
} as const;
export type ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetOrderbyEnum = typeof ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetOrderbyEnum[keyof typeof ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    AddressId: 'AddressID',
    DepartureCountry: 'DepartureCountry',
    CustomerTaxCategory: 'CustomerTaxCategory',
    CustomerTaxClassification: 'CustomerTaxClassification'
} as const;
export type ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetSelectEnum = typeof ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetSelectEnum[keyof typeof ACustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryToSlsAreaAddrDepdntTaxGetSelectEnum];
/**
 * @export
 */
export const ACustomerSalesAreaTaxGetOrderbyEnum = {
    Customer: 'Customer',
    CustomerDesc: 'Customer desc',
    SalesOrganization: 'SalesOrganization',
    SalesOrganizationDesc: 'SalesOrganization desc',
    DistributionChannel: 'DistributionChannel',
    DistributionChannelDesc: 'DistributionChannel desc',
    Division: 'Division',
    DivisionDesc: 'Division desc',
    DepartureCountry: 'DepartureCountry',
    DepartureCountryDesc: 'DepartureCountry desc',
    CustomerTaxCategory: 'CustomerTaxCategory',
    CustomerTaxCategoryDesc: 'CustomerTaxCategory desc',
    CustomerTaxClassification: 'CustomerTaxClassification',
    CustomerTaxClassificationDesc: 'CustomerTaxClassification desc'
} as const;
export type ACustomerSalesAreaTaxGetOrderbyEnum = typeof ACustomerSalesAreaTaxGetOrderbyEnum[keyof typeof ACustomerSalesAreaTaxGetOrderbyEnum];
/**
 * @export
 */
export const ACustomerSalesAreaTaxGetSelectEnum = {
    Customer: 'Customer',
    SalesOrganization: 'SalesOrganization',
    DistributionChannel: 'DistributionChannel',
    Division: 'Division',
    DepartureCountry: 'DepartureCountry',
    CustomerTaxCategory: 'CustomerTaxCategory',
    CustomerTaxClassification: 'CustomerTaxClassification'
} as const;
export type ACustomerSalesAreaTaxGetSelectEnum = typeof ACustomerSalesAreaTaxGetSelectEnum[keyof typeof ACustomerSalesAreaTaxGetSelectEnum];
/**
 * @export
 */
export const ACustomerSalesAreaTaxGetExpandEnum = {
    Star: '*',
    ToSlsAreaAddrDepdntTax: 'to_SlsAreaAddrDepdntTax'
} as const;
export type ACustomerSalesAreaTaxGetExpandEnum = typeof ACustomerSalesAreaTaxGetExpandEnum[keyof typeof ACustomerSalesAreaTaxGetExpandEnum];
