/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERASupplierPartnerFuncType,
  APIBUSINESSPARTNERASupplierPartnerFuncTypeCreate,
  APIBUSINESSPARTNERASupplierPurchasingOrgTextType,
  APIBUSINESSPARTNERASupplierPurchasingOrgTextTypeCreate,
  APIBUSINESSPARTNERASupplierPurchasingOrgType,
  APIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate,
  APIBUSINESSPARTNERASupplierPurchasingOrgTypeUpdate,
  CollectionOfASupplierPartnerFuncType,
  CollectionOfASupplierPurchasingOrgTextType,
  CollectionOfASupplierPurchasingOrgType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERASupplierPartnerFuncTypeFromJSON,
    APIBUSINESSPARTNERASupplierPartnerFuncTypeToJSON,
    APIBUSINESSPARTNERASupplierPartnerFuncTypeCreateFromJSON,
    APIBUSINESSPARTNERASupplierPartnerFuncTypeCreateToJSON,
    APIBUSINESSPARTNERASupplierPurchasingOrgTextTypeFromJSON,
    APIBUSINESSPARTNERASupplierPurchasingOrgTextTypeToJSON,
    APIBUSINESSPARTNERASupplierPurchasingOrgTextTypeCreateFromJSON,
    APIBUSINESSPARTNERASupplierPurchasingOrgTextTypeCreateToJSON,
    APIBUSINESSPARTNERASupplierPurchasingOrgTypeFromJSON,
    APIBUSINESSPARTNERASupplierPurchasingOrgTypeToJSON,
    APIBUSINESSPARTNERASupplierPurchasingOrgTypeCreateFromJSON,
    APIBUSINESSPARTNERASupplierPurchasingOrgTypeCreateToJSON,
    APIBUSINESSPARTNERASupplierPurchasingOrgTypeUpdateFromJSON,
    APIBUSINESSPARTNERASupplierPurchasingOrgTypeUpdateToJSON,
    CollectionOfASupplierPartnerFuncTypeFromJSON,
    CollectionOfASupplierPartnerFuncTypeToJSON,
    CollectionOfASupplierPurchasingOrgTextTypeFromJSON,
    CollectionOfASupplierPurchasingOrgTextTypeToJSON,
    CollectionOfASupplierPurchasingOrgTypeFromJSON,
    CollectionOfASupplierPurchasingOrgTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ASupplierPurchasingOrgGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierPurchasingOrgGetOrderbyEnum>;
    $select?: Set<ASupplierPurchasingOrgGetSelectEnum>;
    $expand?: Set<ASupplierPurchasingOrgGetExpandEnum>;
}

export interface ASupplierPurchasingOrgPostRequest {
    aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate: APIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate;
}

export interface ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGetRequest {
    supplier: string;
    purchasingOrganization: string;
    $select?: Set<ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGetSelectEnum>;
    $expand?: Set<ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGetExpandEnum>;
}

export interface ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationPatchRequest {
    supplier: string;
    purchasingOrganization: string;
    aPIBUSINESSPARTNERASupplierPurchasingOrgTypeUpdate: APIBUSINESSPARTNERASupplierPurchasingOrgTypeUpdate;
}

export interface ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetRequest {
    supplier: string;
    purchasingOrganization: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetOrderbyEnum>;
    $select?: Set<ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetSelectEnum>;
}

export interface ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPostRequest {
    supplier: string;
    purchasingOrganization: string;
    aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate: APIBUSINESSPARTNERASupplierPartnerFuncTypeCreate;
}

export interface ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGetRequest {
    supplier: string;
    purchasingOrganization: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGetOrderbyEnum>;
    $select?: Set<ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGetSelectEnum>;
}

export interface ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextPostRequest {
    supplier: string;
    purchasingOrganization: string;
    aPIBUSINESSPARTNERASupplierPurchasingOrgTextTypeCreate: APIBUSINESSPARTNERASupplierPurchasingOrgTextTypeCreate;
}

export interface ASupplierSupplierToSupplierPurchasingOrgGetRequest {
    supplier: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ASupplierSupplierToSupplierPurchasingOrgGetOrderbyEnum>;
    $select?: Set<ASupplierSupplierToSupplierPurchasingOrgGetSelectEnum>;
    $expand?: Set<ASupplierSupplierToSupplierPurchasingOrgGetExpandEnum>;
}

export interface ASupplierSupplierToSupplierPurchasingOrgPostRequest {
    supplier: string;
    aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate: APIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate;
}

/**
 * 
 */
export class PurchasingOrganizationApi extends runtime.BaseAPI {

    /**
     * Retrieves all the supplier purchasing organization data attached to supplier records in the system.
     * Retrieves supplier purchasing organization data.
     */
    async aSupplierPurchasingOrgGetRaw(requestParameters: ASupplierPurchasingOrgGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierPurchasingOrgType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierPurchasingOrg`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierPurchasingOrgTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the supplier purchasing organization data attached to supplier records in the system.
     * Retrieves supplier purchasing organization data.
     */
    async aSupplierPurchasingOrgGet(requestParameters: ASupplierPurchasingOrgGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierPurchasingOrgType> {
        const response = await this.aSupplierPurchasingOrgGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates supplier purchasing organization data including PartnerFunctions and Text data.
     * Creates supplier purchasing organization data.
     */
    async aSupplierPurchasingOrgPostRaw(requestParameters: ASupplierPurchasingOrgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierPurchasingOrgType>> {
        if (requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate was null or undefined when calling aSupplierPurchasingOrgPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierPurchasingOrg`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierPurchasingOrgTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierPurchasingOrgTypeFromJSON(jsonValue));
    }

    /**
     * Creates supplier purchasing organization data including PartnerFunctions and Text data.
     * Creates supplier purchasing organization data.
     */
    async aSupplierPurchasingOrgPost(requestParameters: ASupplierPurchasingOrgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierPurchasingOrgType> {
        const response = await this.aSupplierPurchasingOrgPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves supplier purchasing organization data by using Supplier and PurchasingOrganization fields.
     * Retrieves supplier purchasing organization data by using the key fields.
     */
    async aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGetRaw(requestParameters: ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierPurchasingOrgType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGet.');
        }

        if (requestParameters.purchasingOrganization === null || requestParameters.purchasingOrganization === undefined) {
            throw new runtime.RequiredError('purchasingOrganization','Required parameter requestParameters.purchasingOrganization was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierPurchasingOrg(Supplier='{Supplier}',PurchasingOrganization='{PurchasingOrganization}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"PurchasingOrganization"}}`, encodeURIComponent(String(requestParameters.purchasingOrganization))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierPurchasingOrgTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves supplier purchasing organization data by using Supplier and PurchasingOrganization fields.
     * Retrieves supplier purchasing organization data by using the key fields.
     */
    async aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGet(requestParameters: ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierPurchasingOrgType> {
        const response = await this.aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates supplier purchasing organization record by Supplier and PurchasingOrganization fields.
     * Updates supplier purchasing organization data by using key fields.
     */
    async aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationPatchRaw(requestParameters: ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationPatch.');
        }

        if (requestParameters.purchasingOrganization === null || requestParameters.purchasingOrganization === undefined) {
            throw new runtime.RequiredError('purchasingOrganization','Required parameter requestParameters.purchasingOrganization was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierPurchasingOrgTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTypeUpdate was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierPurchasingOrg(Supplier='{Supplier}',PurchasingOrganization='{PurchasingOrganization}')`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"PurchasingOrganization"}}`, encodeURIComponent(String(requestParameters.purchasingOrganization))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierPurchasingOrgTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates supplier purchasing organization record by Supplier and PurchasingOrganization fields.
     * Updates supplier purchasing organization data by using key fields.
     */
    async aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationPatch(requestParameters: ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves partner function fields of all the available records in the system linked to supplier purchasing organization
     * Retrieves supplier purchasing organization partner function records.
     */
    async aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetRaw(requestParameters: ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierPartnerFuncType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGet.');
        }

        if (requestParameters.purchasingOrganization === null || requestParameters.purchasingOrganization === undefined) {
            throw new runtime.RequiredError('purchasingOrganization','Required parameter requestParameters.purchasingOrganization was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierPurchasingOrg(Supplier='{Supplier}',PurchasingOrganization='{PurchasingOrganization}')/to_PartnerFunction`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"PurchasingOrganization"}}`, encodeURIComponent(String(requestParameters.purchasingOrganization))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierPartnerFuncTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves partner function fields of all the available records in the system linked to supplier purchasing organization
     * Retrieves supplier purchasing organization partner function records.
     */
    async aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGet(requestParameters: ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierPartnerFuncType> {
        const response = await this.aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new partner function record. Partner Counter will be automatically determined if a similar partner function already exists.
     * Creates a new partner function data linked to supplier purchasing organization.
     */
    async aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPostRaw(requestParameters: ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierPartnerFuncType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPost.');
        }

        if (requestParameters.purchasingOrganization === null || requestParameters.purchasingOrganization === undefined) {
            throw new runtime.RequiredError('purchasingOrganization','Required parameter requestParameters.purchasingOrganization was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierPurchasingOrg(Supplier='{Supplier}',PurchasingOrganization='{PurchasingOrganization}')/to_PartnerFunction`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"PurchasingOrganization"}}`, encodeURIComponent(String(requestParameters.purchasingOrganization))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierPartnerFuncTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierPartnerFuncTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierPartnerFuncTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new partner function record. Partner Counter will be automatically determined if a similar partner function already exists.
     * Creates a new partner function data linked to supplier purchasing organization.
     */
    async aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPost(requestParameters: ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierPartnerFuncType> {
        const response = await this.aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the supplier purchasing organization text data attached to purchasing organization in the system.
     * Retrieves supplier purchasing organization text data.
     */
    async aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGetRaw(requestParameters: ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierPurchasingOrgTextType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGet.');
        }

        if (requestParameters.purchasingOrganization === null || requestParameters.purchasingOrganization === undefined) {
            throw new runtime.RequiredError('purchasingOrganization','Required parameter requestParameters.purchasingOrganization was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierPurchasingOrg(Supplier='{Supplier}',PurchasingOrganization='{PurchasingOrganization}')/to_PurchasingOrgText`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"PurchasingOrganization"}}`, encodeURIComponent(String(requestParameters.purchasingOrganization))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierPurchasingOrgTextTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the supplier purchasing organization text data attached to purchasing organization in the system.
     * Retrieves supplier purchasing organization text data.
     */
    async aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGet(requestParameters: ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierPurchasingOrgTextType> {
        const response = await this.aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates text data attached to a supplier purchasing organization in the system.
     * Creates supplier purchasing organization text data.
     */
    async aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextPostRaw(requestParameters: ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierPurchasingOrgTextType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextPost.');
        }

        if (requestParameters.purchasingOrganization === null || requestParameters.purchasingOrganization === undefined) {
            throw new runtime.RequiredError('purchasingOrganization','Required parameter requestParameters.purchasingOrganization was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTextTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTextTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierPurchasingOrgTextTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTextTypeCreate was null or undefined when calling aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_SupplierPurchasingOrg(Supplier='{Supplier}',PurchasingOrganization='{PurchasingOrganization}')/to_PurchasingOrgText`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))).replace(`{${"PurchasingOrganization"}}`, encodeURIComponent(String(requestParameters.purchasingOrganization))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierPurchasingOrgTextTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTextTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierPurchasingOrgTextTypeFromJSON(jsonValue));
    }

    /**
     * Creates text data attached to a supplier purchasing organization in the system.
     * Creates supplier purchasing organization text data.
     */
    async aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextPost(requestParameters: ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierPurchasingOrgTextType> {
        const response = await this.aSupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the supplier purchasing organization data attached to supplier records in the system.
     * Retrieves supplier purchasing organization data.
     */
    async aSupplierSupplierToSupplierPurchasingOrgGetRaw(requestParameters: ASupplierSupplierToSupplierPurchasingOrgGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfASupplierPurchasingOrgType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierSupplierToSupplierPurchasingOrgGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Supplier('{Supplier}')/to_SupplierPurchasingOrg`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfASupplierPurchasingOrgTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the supplier purchasing organization data attached to supplier records in the system.
     * Retrieves supplier purchasing organization data.
     */
    async aSupplierSupplierToSupplierPurchasingOrgGet(requestParameters: ASupplierSupplierToSupplierPurchasingOrgGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfASupplierPurchasingOrgType> {
        const response = await this.aSupplierSupplierToSupplierPurchasingOrgGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates supplier purchasing organization data including PartnerFunctions and Text data.
     * Creates supplier purchasing organization data.
     */
    async aSupplierSupplierToSupplierPurchasingOrgPostRaw(requestParameters: ASupplierSupplierToSupplierPurchasingOrgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERASupplierPurchasingOrgType>> {
        if (requestParameters.supplier === null || requestParameters.supplier === undefined) {
            throw new runtime.RequiredError('supplier','Required parameter requestParameters.supplier was null or undefined when calling aSupplierSupplierToSupplierPurchasingOrgPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate === null || requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate was null or undefined when calling aSupplierSupplierToSupplierPurchasingOrgPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_Supplier('{Supplier}')/to_SupplierPurchasingOrg`.replace(`{${"Supplier"}}`, encodeURIComponent(String(requestParameters.supplier))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERASupplierPurchasingOrgTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERASupplierPurchasingOrgTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERASupplierPurchasingOrgTypeFromJSON(jsonValue));
    }

    /**
     * Creates supplier purchasing organization data including PartnerFunctions and Text data.
     * Creates supplier purchasing organization data.
     */
    async aSupplierSupplierToSupplierPurchasingOrgPost(requestParameters: ASupplierSupplierToSupplierPurchasingOrgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERASupplierPurchasingOrgType> {
        const response = await this.aSupplierSupplierToSupplierPurchasingOrgPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ASupplierPurchasingOrgGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    PurchasingOrganization: 'PurchasingOrganization',
    PurchasingOrganizationDesc: 'PurchasingOrganization desc',
    AutomaticEvaluatedRcptSettlmt: 'AutomaticEvaluatedRcptSettlmt',
    AutomaticEvaluatedRcptSettlmtDesc: 'AutomaticEvaluatedRcptSettlmt desc',
    CalculationSchemaGroupCode: 'CalculationSchemaGroupCode',
    CalculationSchemaGroupCodeDesc: 'CalculationSchemaGroupCode desc',
    DeletionIndicator: 'DeletionIndicator',
    DeletionIndicatorDesc: 'DeletionIndicator desc',
    EvaldReceiptSettlementIsActive: 'EvaldReceiptSettlementIsActive',
    EvaldReceiptSettlementIsActiveDesc: 'EvaldReceiptSettlementIsActive desc',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsClassificationDesc: 'IncotermsClassification desc',
    IncotermsTransferLocation: 'IncotermsTransferLocation',
    IncotermsTransferLocationDesc: 'IncotermsTransferLocation desc',
    IncotermsVersion: 'IncotermsVersion',
    IncotermsVersionDesc: 'IncotermsVersion desc',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsLocation1Desc: 'IncotermsLocation1 desc',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsLocation2Desc: 'IncotermsLocation2 desc',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc1AddlUuidDesc: 'IncotermsSupChnLoc1AddlUUID desc',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnLoc2AddlUuidDesc: 'IncotermsSupChnLoc2AddlUUID desc',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    IncotermsSupChnDvtgLocAddlUuidDesc: 'IncotermsSupChnDvtgLocAddlUUID desc',
    IntrastatCrsBorderTrMode: 'IntrastatCrsBorderTrMode',
    IntrastatCrsBorderTrModeDesc: 'IntrastatCrsBorderTrMode desc',
    InvoiceIsGoodsReceiptBased: 'InvoiceIsGoodsReceiptBased',
    InvoiceIsGoodsReceiptBasedDesc: 'InvoiceIsGoodsReceiptBased desc',
    InvoiceIsMmServiceEntryBased: 'InvoiceIsMMServiceEntryBased',
    InvoiceIsMmServiceEntryBasedDesc: 'InvoiceIsMMServiceEntryBased desc',
    MaterialPlannedDeliveryDurn: 'MaterialPlannedDeliveryDurn',
    MaterialPlannedDeliveryDurnDesc: 'MaterialPlannedDeliveryDurn desc',
    MinimumOrderAmount: 'MinimumOrderAmount',
    MinimumOrderAmountDesc: 'MinimumOrderAmount desc',
    PaymentTerms: 'PaymentTerms',
    PaymentTermsDesc: 'PaymentTerms desc',
    PlanningCycle: 'PlanningCycle',
    PlanningCycleDesc: 'PlanningCycle desc',
    PricingDateControl: 'PricingDateControl',
    PricingDateControlDesc: 'PricingDateControl desc',
    ProdStockAndSlsDataTransfPrfl: 'ProdStockAndSlsDataTransfPrfl',
    ProdStockAndSlsDataTransfPrflDesc: 'ProdStockAndSlsDataTransfPrfl desc',
    ProductUnitGroup: 'ProductUnitGroup',
    ProductUnitGroupDesc: 'ProductUnitGroup desc',
    PurOrdAutoGenerationIsAllowed: 'PurOrdAutoGenerationIsAllowed',
    PurOrdAutoGenerationIsAllowedDesc: 'PurOrdAutoGenerationIsAllowed desc',
    PurchaseOrderCurrency: 'PurchaseOrderCurrency',
    PurchaseOrderCurrencyDesc: 'PurchaseOrderCurrency desc',
    PurchasingGroup: 'PurchasingGroup',
    PurchasingGroupDesc: 'PurchasingGroup desc',
    PurchasingIsBlockedForSupplier: 'PurchasingIsBlockedForSupplier',
    PurchasingIsBlockedForSupplierDesc: 'PurchasingIsBlockedForSupplier desc',
    RoundingProfile: 'RoundingProfile',
    RoundingProfileDesc: 'RoundingProfile desc',
    ShippingCondition: 'ShippingCondition',
    ShippingConditionDesc: 'ShippingCondition desc',
    SuplrDiscountInKindIsGranted: 'SuplrDiscountInKindIsGranted',
    SuplrDiscountInKindIsGrantedDesc: 'SuplrDiscountInKindIsGranted desc',
    SuplrInvcRevalIsAllowed: 'SuplrInvcRevalIsAllowed',
    SuplrInvcRevalIsAllowedDesc: 'SuplrInvcRevalIsAllowed desc',
    SuplrIsRlvtForSettlmtMgmt: 'SuplrIsRlvtForSettlmtMgmt',
    SuplrIsRlvtForSettlmtMgmtDesc: 'SuplrIsRlvtForSettlmtMgmt desc',
    SuplrPurgOrgIsRlvtForPriceDetn: 'SuplrPurgOrgIsRlvtForPriceDetn',
    SuplrPurgOrgIsRlvtForPriceDetnDesc: 'SuplrPurgOrgIsRlvtForPriceDetn desc',
    SupplierAbcClassificationCode: 'SupplierABCClassificationCode',
    SupplierAbcClassificationCodeDesc: 'SupplierABCClassificationCode desc',
    SupplierAccountNumber: 'SupplierAccountNumber',
    SupplierAccountNumberDesc: 'SupplierAccountNumber desc',
    SupplierIsReturnsSupplier: 'SupplierIsReturnsSupplier',
    SupplierIsReturnsSupplierDesc: 'SupplierIsReturnsSupplier desc',
    SupplierPhoneNumber: 'SupplierPhoneNumber',
    SupplierPhoneNumberDesc: 'SupplierPhoneNumber desc',
    SupplierRespSalesPersonName: 'SupplierRespSalesPersonName',
    SupplierRespSalesPersonNameDesc: 'SupplierRespSalesPersonName desc',
    SupplierConfirmationControlKey: 'SupplierConfirmationControlKey',
    SupplierConfirmationControlKeyDesc: 'SupplierConfirmationControlKey desc',
    IsOrderAcknRqd: 'IsOrderAcknRqd',
    IsOrderAcknRqdDesc: 'IsOrderAcknRqd desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    SupplierAccountGroup: 'SupplierAccountGroup',
    SupplierAccountGroupDesc: 'SupplierAccountGroup desc'
} as const;
export type ASupplierPurchasingOrgGetOrderbyEnum = typeof ASupplierPurchasingOrgGetOrderbyEnum[keyof typeof ASupplierPurchasingOrgGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierPurchasingOrgGetSelectEnum = {
    Supplier: 'Supplier',
    PurchasingOrganization: 'PurchasingOrganization',
    AutomaticEvaluatedRcptSettlmt: 'AutomaticEvaluatedRcptSettlmt',
    CalculationSchemaGroupCode: 'CalculationSchemaGroupCode',
    DeletionIndicator: 'DeletionIndicator',
    EvaldReceiptSettlementIsActive: 'EvaldReceiptSettlementIsActive',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsTransferLocation: 'IncotermsTransferLocation',
    IncotermsVersion: 'IncotermsVersion',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    IntrastatCrsBorderTrMode: 'IntrastatCrsBorderTrMode',
    InvoiceIsGoodsReceiptBased: 'InvoiceIsGoodsReceiptBased',
    InvoiceIsMmServiceEntryBased: 'InvoiceIsMMServiceEntryBased',
    MaterialPlannedDeliveryDurn: 'MaterialPlannedDeliveryDurn',
    MinimumOrderAmount: 'MinimumOrderAmount',
    PaymentTerms: 'PaymentTerms',
    PlanningCycle: 'PlanningCycle',
    PricingDateControl: 'PricingDateControl',
    ProdStockAndSlsDataTransfPrfl: 'ProdStockAndSlsDataTransfPrfl',
    ProductUnitGroup: 'ProductUnitGroup',
    PurOrdAutoGenerationIsAllowed: 'PurOrdAutoGenerationIsAllowed',
    PurchaseOrderCurrency: 'PurchaseOrderCurrency',
    PurchasingGroup: 'PurchasingGroup',
    PurchasingIsBlockedForSupplier: 'PurchasingIsBlockedForSupplier',
    RoundingProfile: 'RoundingProfile',
    ShippingCondition: 'ShippingCondition',
    SuplrDiscountInKindIsGranted: 'SuplrDiscountInKindIsGranted',
    SuplrInvcRevalIsAllowed: 'SuplrInvcRevalIsAllowed',
    SuplrIsRlvtForSettlmtMgmt: 'SuplrIsRlvtForSettlmtMgmt',
    SuplrPurgOrgIsRlvtForPriceDetn: 'SuplrPurgOrgIsRlvtForPriceDetn',
    SupplierAbcClassificationCode: 'SupplierABCClassificationCode',
    SupplierAccountNumber: 'SupplierAccountNumber',
    SupplierIsReturnsSupplier: 'SupplierIsReturnsSupplier',
    SupplierPhoneNumber: 'SupplierPhoneNumber',
    SupplierRespSalesPersonName: 'SupplierRespSalesPersonName',
    SupplierConfirmationControlKey: 'SupplierConfirmationControlKey',
    IsOrderAcknRqd: 'IsOrderAcknRqd',
    AuthorizationGroup: 'AuthorizationGroup',
    SupplierAccountGroup: 'SupplierAccountGroup'
} as const;
export type ASupplierPurchasingOrgGetSelectEnum = typeof ASupplierPurchasingOrgGetSelectEnum[keyof typeof ASupplierPurchasingOrgGetSelectEnum];
/**
 * @export
 */
export const ASupplierPurchasingOrgGetExpandEnum = {
    Star: '*',
    ToPartnerFunction: 'to_PartnerFunction',
    ToPurchasingOrgText: 'to_PurchasingOrgText'
} as const;
export type ASupplierPurchasingOrgGetExpandEnum = typeof ASupplierPurchasingOrgGetExpandEnum[keyof typeof ASupplierPurchasingOrgGetExpandEnum];
/**
 * @export
 */
export const ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGetSelectEnum = {
    Supplier: 'Supplier',
    PurchasingOrganization: 'PurchasingOrganization',
    AutomaticEvaluatedRcptSettlmt: 'AutomaticEvaluatedRcptSettlmt',
    CalculationSchemaGroupCode: 'CalculationSchemaGroupCode',
    DeletionIndicator: 'DeletionIndicator',
    EvaldReceiptSettlementIsActive: 'EvaldReceiptSettlementIsActive',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsTransferLocation: 'IncotermsTransferLocation',
    IncotermsVersion: 'IncotermsVersion',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    IntrastatCrsBorderTrMode: 'IntrastatCrsBorderTrMode',
    InvoiceIsGoodsReceiptBased: 'InvoiceIsGoodsReceiptBased',
    InvoiceIsMmServiceEntryBased: 'InvoiceIsMMServiceEntryBased',
    MaterialPlannedDeliveryDurn: 'MaterialPlannedDeliveryDurn',
    MinimumOrderAmount: 'MinimumOrderAmount',
    PaymentTerms: 'PaymentTerms',
    PlanningCycle: 'PlanningCycle',
    PricingDateControl: 'PricingDateControl',
    ProdStockAndSlsDataTransfPrfl: 'ProdStockAndSlsDataTransfPrfl',
    ProductUnitGroup: 'ProductUnitGroup',
    PurOrdAutoGenerationIsAllowed: 'PurOrdAutoGenerationIsAllowed',
    PurchaseOrderCurrency: 'PurchaseOrderCurrency',
    PurchasingGroup: 'PurchasingGroup',
    PurchasingIsBlockedForSupplier: 'PurchasingIsBlockedForSupplier',
    RoundingProfile: 'RoundingProfile',
    ShippingCondition: 'ShippingCondition',
    SuplrDiscountInKindIsGranted: 'SuplrDiscountInKindIsGranted',
    SuplrInvcRevalIsAllowed: 'SuplrInvcRevalIsAllowed',
    SuplrIsRlvtForSettlmtMgmt: 'SuplrIsRlvtForSettlmtMgmt',
    SuplrPurgOrgIsRlvtForPriceDetn: 'SuplrPurgOrgIsRlvtForPriceDetn',
    SupplierAbcClassificationCode: 'SupplierABCClassificationCode',
    SupplierAccountNumber: 'SupplierAccountNumber',
    SupplierIsReturnsSupplier: 'SupplierIsReturnsSupplier',
    SupplierPhoneNumber: 'SupplierPhoneNumber',
    SupplierRespSalesPersonName: 'SupplierRespSalesPersonName',
    SupplierConfirmationControlKey: 'SupplierConfirmationControlKey',
    IsOrderAcknRqd: 'IsOrderAcknRqd',
    AuthorizationGroup: 'AuthorizationGroup',
    SupplierAccountGroup: 'SupplierAccountGroup'
} as const;
export type ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGetSelectEnum = typeof ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGetSelectEnum[keyof typeof ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGetSelectEnum];
/**
 * @export
 */
export const ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGetExpandEnum = {
    Star: '*',
    ToPartnerFunction: 'to_PartnerFunction',
    ToPurchasingOrgText: 'to_PurchasingOrgText'
} as const;
export type ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGetExpandEnum = typeof ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGetExpandEnum[keyof typeof ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationGetExpandEnum];
/**
 * @export
 */
export const ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    PurchasingOrganization: 'PurchasingOrganization',
    PurchasingOrganizationDesc: 'PurchasingOrganization desc',
    SupplierSubrange: 'SupplierSubrange',
    SupplierSubrangeDesc: 'SupplierSubrange desc',
    Plant: 'Plant',
    PlantDesc: 'Plant desc',
    PartnerFunction: 'PartnerFunction',
    PartnerFunctionDesc: 'PartnerFunction desc',
    PartnerCounter: 'PartnerCounter',
    PartnerCounterDesc: 'PartnerCounter desc',
    DefaultPartner: 'DefaultPartner',
    DefaultPartnerDesc: 'DefaultPartner desc',
    CreationDate: 'CreationDate',
    CreationDateDesc: 'CreationDate desc',
    CreatedByUser: 'CreatedByUser',
    CreatedByUserDesc: 'CreatedByUser desc',
    ReferenceSupplier: 'ReferenceSupplier',
    ReferenceSupplierDesc: 'ReferenceSupplier desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc'
} as const;
export type ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetOrderbyEnum = typeof ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetOrderbyEnum[keyof typeof ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetSelectEnum = {
    Supplier: 'Supplier',
    PurchasingOrganization: 'PurchasingOrganization',
    SupplierSubrange: 'SupplierSubrange',
    Plant: 'Plant',
    PartnerFunction: 'PartnerFunction',
    PartnerCounter: 'PartnerCounter',
    DefaultPartner: 'DefaultPartner',
    CreationDate: 'CreationDate',
    CreatedByUser: 'CreatedByUser',
    ReferenceSupplier: 'ReferenceSupplier',
    AuthorizationGroup: 'AuthorizationGroup'
} as const;
export type ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetSelectEnum = typeof ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetSelectEnum[keyof typeof ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPartnerFunctionGetSelectEnum];
/**
 * @export
 */
export const ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    PurchasingOrganization: 'PurchasingOrganization',
    PurchasingOrganizationDesc: 'PurchasingOrganization desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    LongTextId: 'LongTextID',
    LongTextIdDesc: 'LongTextID desc'
} as const;
export type ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGetOrderbyEnum = typeof ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGetOrderbyEnum[keyof typeof ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGetSelectEnum = {
    Supplier: 'Supplier',
    PurchasingOrganization: 'PurchasingOrganization',
    Language: 'Language',
    LongTextId: 'LongTextID',
    LongText: 'LongText'
} as const;
export type ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGetSelectEnum = typeof ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGetSelectEnum[keyof typeof ASupplierPurchasingOrgSupplierSupplierPurchasingOrganizationPurchasingOrganizationToPurchasingOrgTextGetSelectEnum];
/**
 * @export
 */
export const ASupplierSupplierToSupplierPurchasingOrgGetOrderbyEnum = {
    Supplier: 'Supplier',
    SupplierDesc: 'Supplier desc',
    PurchasingOrganization: 'PurchasingOrganization',
    PurchasingOrganizationDesc: 'PurchasingOrganization desc',
    AutomaticEvaluatedRcptSettlmt: 'AutomaticEvaluatedRcptSettlmt',
    AutomaticEvaluatedRcptSettlmtDesc: 'AutomaticEvaluatedRcptSettlmt desc',
    CalculationSchemaGroupCode: 'CalculationSchemaGroupCode',
    CalculationSchemaGroupCodeDesc: 'CalculationSchemaGroupCode desc',
    DeletionIndicator: 'DeletionIndicator',
    DeletionIndicatorDesc: 'DeletionIndicator desc',
    EvaldReceiptSettlementIsActive: 'EvaldReceiptSettlementIsActive',
    EvaldReceiptSettlementIsActiveDesc: 'EvaldReceiptSettlementIsActive desc',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsClassificationDesc: 'IncotermsClassification desc',
    IncotermsTransferLocation: 'IncotermsTransferLocation',
    IncotermsTransferLocationDesc: 'IncotermsTransferLocation desc',
    IncotermsVersion: 'IncotermsVersion',
    IncotermsVersionDesc: 'IncotermsVersion desc',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsLocation1Desc: 'IncotermsLocation1 desc',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsLocation2Desc: 'IncotermsLocation2 desc',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc1AddlUuidDesc: 'IncotermsSupChnLoc1AddlUUID desc',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnLoc2AddlUuidDesc: 'IncotermsSupChnLoc2AddlUUID desc',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    IncotermsSupChnDvtgLocAddlUuidDesc: 'IncotermsSupChnDvtgLocAddlUUID desc',
    IntrastatCrsBorderTrMode: 'IntrastatCrsBorderTrMode',
    IntrastatCrsBorderTrModeDesc: 'IntrastatCrsBorderTrMode desc',
    InvoiceIsGoodsReceiptBased: 'InvoiceIsGoodsReceiptBased',
    InvoiceIsGoodsReceiptBasedDesc: 'InvoiceIsGoodsReceiptBased desc',
    InvoiceIsMmServiceEntryBased: 'InvoiceIsMMServiceEntryBased',
    InvoiceIsMmServiceEntryBasedDesc: 'InvoiceIsMMServiceEntryBased desc',
    MaterialPlannedDeliveryDurn: 'MaterialPlannedDeliveryDurn',
    MaterialPlannedDeliveryDurnDesc: 'MaterialPlannedDeliveryDurn desc',
    MinimumOrderAmount: 'MinimumOrderAmount',
    MinimumOrderAmountDesc: 'MinimumOrderAmount desc',
    PaymentTerms: 'PaymentTerms',
    PaymentTermsDesc: 'PaymentTerms desc',
    PlanningCycle: 'PlanningCycle',
    PlanningCycleDesc: 'PlanningCycle desc',
    PricingDateControl: 'PricingDateControl',
    PricingDateControlDesc: 'PricingDateControl desc',
    ProdStockAndSlsDataTransfPrfl: 'ProdStockAndSlsDataTransfPrfl',
    ProdStockAndSlsDataTransfPrflDesc: 'ProdStockAndSlsDataTransfPrfl desc',
    ProductUnitGroup: 'ProductUnitGroup',
    ProductUnitGroupDesc: 'ProductUnitGroup desc',
    PurOrdAutoGenerationIsAllowed: 'PurOrdAutoGenerationIsAllowed',
    PurOrdAutoGenerationIsAllowedDesc: 'PurOrdAutoGenerationIsAllowed desc',
    PurchaseOrderCurrency: 'PurchaseOrderCurrency',
    PurchaseOrderCurrencyDesc: 'PurchaseOrderCurrency desc',
    PurchasingGroup: 'PurchasingGroup',
    PurchasingGroupDesc: 'PurchasingGroup desc',
    PurchasingIsBlockedForSupplier: 'PurchasingIsBlockedForSupplier',
    PurchasingIsBlockedForSupplierDesc: 'PurchasingIsBlockedForSupplier desc',
    RoundingProfile: 'RoundingProfile',
    RoundingProfileDesc: 'RoundingProfile desc',
    ShippingCondition: 'ShippingCondition',
    ShippingConditionDesc: 'ShippingCondition desc',
    SuplrDiscountInKindIsGranted: 'SuplrDiscountInKindIsGranted',
    SuplrDiscountInKindIsGrantedDesc: 'SuplrDiscountInKindIsGranted desc',
    SuplrInvcRevalIsAllowed: 'SuplrInvcRevalIsAllowed',
    SuplrInvcRevalIsAllowedDesc: 'SuplrInvcRevalIsAllowed desc',
    SuplrIsRlvtForSettlmtMgmt: 'SuplrIsRlvtForSettlmtMgmt',
    SuplrIsRlvtForSettlmtMgmtDesc: 'SuplrIsRlvtForSettlmtMgmt desc',
    SuplrPurgOrgIsRlvtForPriceDetn: 'SuplrPurgOrgIsRlvtForPriceDetn',
    SuplrPurgOrgIsRlvtForPriceDetnDesc: 'SuplrPurgOrgIsRlvtForPriceDetn desc',
    SupplierAbcClassificationCode: 'SupplierABCClassificationCode',
    SupplierAbcClassificationCodeDesc: 'SupplierABCClassificationCode desc',
    SupplierAccountNumber: 'SupplierAccountNumber',
    SupplierAccountNumberDesc: 'SupplierAccountNumber desc',
    SupplierIsReturnsSupplier: 'SupplierIsReturnsSupplier',
    SupplierIsReturnsSupplierDesc: 'SupplierIsReturnsSupplier desc',
    SupplierPhoneNumber: 'SupplierPhoneNumber',
    SupplierPhoneNumberDesc: 'SupplierPhoneNumber desc',
    SupplierRespSalesPersonName: 'SupplierRespSalesPersonName',
    SupplierRespSalesPersonNameDesc: 'SupplierRespSalesPersonName desc',
    SupplierConfirmationControlKey: 'SupplierConfirmationControlKey',
    SupplierConfirmationControlKeyDesc: 'SupplierConfirmationControlKey desc',
    IsOrderAcknRqd: 'IsOrderAcknRqd',
    IsOrderAcknRqdDesc: 'IsOrderAcknRqd desc',
    AuthorizationGroup: 'AuthorizationGroup',
    AuthorizationGroupDesc: 'AuthorizationGroup desc',
    SupplierAccountGroup: 'SupplierAccountGroup',
    SupplierAccountGroupDesc: 'SupplierAccountGroup desc'
} as const;
export type ASupplierSupplierToSupplierPurchasingOrgGetOrderbyEnum = typeof ASupplierSupplierToSupplierPurchasingOrgGetOrderbyEnum[keyof typeof ASupplierSupplierToSupplierPurchasingOrgGetOrderbyEnum];
/**
 * @export
 */
export const ASupplierSupplierToSupplierPurchasingOrgGetSelectEnum = {
    Supplier: 'Supplier',
    PurchasingOrganization: 'PurchasingOrganization',
    AutomaticEvaluatedRcptSettlmt: 'AutomaticEvaluatedRcptSettlmt',
    CalculationSchemaGroupCode: 'CalculationSchemaGroupCode',
    DeletionIndicator: 'DeletionIndicator',
    EvaldReceiptSettlementIsActive: 'EvaldReceiptSettlementIsActive',
    IncotermsClassification: 'IncotermsClassification',
    IncotermsTransferLocation: 'IncotermsTransferLocation',
    IncotermsVersion: 'IncotermsVersion',
    IncotermsLocation1: 'IncotermsLocation1',
    IncotermsLocation2: 'IncotermsLocation2',
    IncotermsSupChnLoc1AddlUuid: 'IncotermsSupChnLoc1AddlUUID',
    IncotermsSupChnLoc2AddlUuid: 'IncotermsSupChnLoc2AddlUUID',
    IncotermsSupChnDvtgLocAddlUuid: 'IncotermsSupChnDvtgLocAddlUUID',
    IntrastatCrsBorderTrMode: 'IntrastatCrsBorderTrMode',
    InvoiceIsGoodsReceiptBased: 'InvoiceIsGoodsReceiptBased',
    InvoiceIsMmServiceEntryBased: 'InvoiceIsMMServiceEntryBased',
    MaterialPlannedDeliveryDurn: 'MaterialPlannedDeliveryDurn',
    MinimumOrderAmount: 'MinimumOrderAmount',
    PaymentTerms: 'PaymentTerms',
    PlanningCycle: 'PlanningCycle',
    PricingDateControl: 'PricingDateControl',
    ProdStockAndSlsDataTransfPrfl: 'ProdStockAndSlsDataTransfPrfl',
    ProductUnitGroup: 'ProductUnitGroup',
    PurOrdAutoGenerationIsAllowed: 'PurOrdAutoGenerationIsAllowed',
    PurchaseOrderCurrency: 'PurchaseOrderCurrency',
    PurchasingGroup: 'PurchasingGroup',
    PurchasingIsBlockedForSupplier: 'PurchasingIsBlockedForSupplier',
    RoundingProfile: 'RoundingProfile',
    ShippingCondition: 'ShippingCondition',
    SuplrDiscountInKindIsGranted: 'SuplrDiscountInKindIsGranted',
    SuplrInvcRevalIsAllowed: 'SuplrInvcRevalIsAllowed',
    SuplrIsRlvtForSettlmtMgmt: 'SuplrIsRlvtForSettlmtMgmt',
    SuplrPurgOrgIsRlvtForPriceDetn: 'SuplrPurgOrgIsRlvtForPriceDetn',
    SupplierAbcClassificationCode: 'SupplierABCClassificationCode',
    SupplierAccountNumber: 'SupplierAccountNumber',
    SupplierIsReturnsSupplier: 'SupplierIsReturnsSupplier',
    SupplierPhoneNumber: 'SupplierPhoneNumber',
    SupplierRespSalesPersonName: 'SupplierRespSalesPersonName',
    SupplierConfirmationControlKey: 'SupplierConfirmationControlKey',
    IsOrderAcknRqd: 'IsOrderAcknRqd',
    AuthorizationGroup: 'AuthorizationGroup',
    SupplierAccountGroup: 'SupplierAccountGroup'
} as const;
export type ASupplierSupplierToSupplierPurchasingOrgGetSelectEnum = typeof ASupplierSupplierToSupplierPurchasingOrgGetSelectEnum[keyof typeof ASupplierSupplierToSupplierPurchasingOrgGetSelectEnum];
/**
 * @export
 */
export const ASupplierSupplierToSupplierPurchasingOrgGetExpandEnum = {
    Star: '*',
    ToPartnerFunction: 'to_PartnerFunction',
    ToPurchasingOrgText: 'to_PurchasingOrgText'
} as const;
export type ASupplierSupplierToSupplierPurchasingOrgGetExpandEnum = typeof ASupplierSupplierToSupplierPurchasingOrgGetExpandEnum[keyof typeof ASupplierSupplierToSupplierPurchasingOrgGetExpandEnum];
