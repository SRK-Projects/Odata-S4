/* tslint:disable */
/* eslint-disable */
/**
 * Business Partner (A2X)
 *     This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIBUSINESSPARTNERAAddressEmailAddressType,
  APIBUSINESSPARTNERAAddressEmailAddressTypeCreate,
  APIBUSINESSPARTNERAAddressFaxNumberType,
  APIBUSINESSPARTNERAAddressFaxNumberTypeCreate,
  APIBUSINESSPARTNERAAddressHomePageURLType,
  APIBUSINESSPARTNERAAddressHomePageURLTypeCreate,
  APIBUSINESSPARTNERAAddressPhoneNumberType,
  APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate,
  APIBUSINESSPARTNERABPContactToAddressType,
  APIBUSINESSPARTNERABPContactToAddressTypeCreate,
  APIBUSINESSPARTNERABPContactToAddressTypeUpdate,
  CollectionOfAAddressEmailAddressType,
  CollectionOfAAddressFaxNumberType,
  CollectionOfAAddressHomePageURLType,
  CollectionOfAAddressPhoneNumberType,
  CollectionOfABPContactToAddressType,
  ModelError,
} from '../models/index';
import {
    APIBUSINESSPARTNERAAddressEmailAddressTypeFromJSON,
    APIBUSINESSPARTNERAAddressEmailAddressTypeToJSON,
    APIBUSINESSPARTNERAAddressEmailAddressTypeCreateFromJSON,
    APIBUSINESSPARTNERAAddressEmailAddressTypeCreateToJSON,
    APIBUSINESSPARTNERAAddressFaxNumberTypeFromJSON,
    APIBUSINESSPARTNERAAddressFaxNumberTypeToJSON,
    APIBUSINESSPARTNERAAddressFaxNumberTypeCreateFromJSON,
    APIBUSINESSPARTNERAAddressFaxNumberTypeCreateToJSON,
    APIBUSINESSPARTNERAAddressHomePageURLTypeFromJSON,
    APIBUSINESSPARTNERAAddressHomePageURLTypeToJSON,
    APIBUSINESSPARTNERAAddressHomePageURLTypeCreateFromJSON,
    APIBUSINESSPARTNERAAddressHomePageURLTypeCreateToJSON,
    APIBUSINESSPARTNERAAddressPhoneNumberTypeFromJSON,
    APIBUSINESSPARTNERAAddressPhoneNumberTypeToJSON,
    APIBUSINESSPARTNERAAddressPhoneNumberTypeCreateFromJSON,
    APIBUSINESSPARTNERAAddressPhoneNumberTypeCreateToJSON,
    APIBUSINESSPARTNERABPContactToAddressTypeFromJSON,
    APIBUSINESSPARTNERABPContactToAddressTypeToJSON,
    APIBUSINESSPARTNERABPContactToAddressTypeCreateFromJSON,
    APIBUSINESSPARTNERABPContactToAddressTypeCreateToJSON,
    APIBUSINESSPARTNERABPContactToAddressTypeUpdateFromJSON,
    APIBUSINESSPARTNERABPContactToAddressTypeUpdateToJSON,
    CollectionOfAAddressEmailAddressTypeFromJSON,
    CollectionOfAAddressEmailAddressTypeToJSON,
    CollectionOfAAddressFaxNumberTypeFromJSON,
    CollectionOfAAddressFaxNumberTypeToJSON,
    CollectionOfAAddressHomePageURLTypeFromJSON,
    CollectionOfAAddressHomePageURLTypeToJSON,
    CollectionOfAAddressPhoneNumberTypeFromJSON,
    CollectionOfAAddressPhoneNumberTypeToJSON,
    CollectionOfABPContactToAddressTypeFromJSON,
    CollectionOfABPContactToAddressTypeToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models/index';

export interface ABPContactToAddressGetRequest {
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPContactToAddressGetOrderbyEnum>;
    $select?: Set<ABPContactToAddressGetSelectEnum>;
    $expand?: Set<ABPContactToAddressGetExpandEnum>;
}

export interface ABPContactToAddressPostRequest {
    aPIBUSINESSPARTNERABPContactToAddressTypeCreate: APIBUSINESSPARTNERABPContactToAddressTypeCreate;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGetRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    $select?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGetSelectEnum>;
    $expand?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGetExpandEnum>;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDPatchRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    aPIBUSINESSPARTNERABPContactToAddressTypeUpdate: APIBUSINESSPARTNERABPContactToAddressTypeUpdate;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGetRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGetOrderbyEnum>;
    $select?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGetSelectEnum>;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressPostRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    aPIBUSINESSPARTNERAAddressEmailAddressTypeCreate: APIBUSINESSPARTNERAAddressEmailAddressTypeCreate;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetOrderbyEnum>;
    $select?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetSelectEnum>;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPostRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate: APIBUSINESSPARTNERAAddressFaxNumberTypeCreate;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum>;
    $select?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetSelectEnum>;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPostRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetOrderbyEnum>;
    $select?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetSelectEnum>;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPostRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetOrderbyEnum>;
    $select?: Set<ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetSelectEnum>;
}

export interface ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPostRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    addressID: string;
    aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate: APIBUSINESSPARTNERAAddressHomePageURLTypeCreate;
}

export interface ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    $top?: number;
    $skip?: number;
    $filter?: string;
    $count?: boolean;
    $orderby?: Set<ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetOrderbyEnum>;
    $select?: Set<ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetSelectEnum>;
    $expand?: Set<ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetExpandEnum>;
}

export interface ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPostRequest {
    relationshipNumber: string;
    businessPartnerCompany: string;
    businessPartnerPerson: string;
    validityEndDate: Date;
    aPIBUSINESSPARTNERABPContactToAddressTypeCreate: APIBUSINESSPARTNERABPContactToAddressTypeCreate;
}

/**
 * 
 */
export class ContactPersonAddressApi extends runtime.BaseAPI {

    /**
     * Retrieves all the workplace address records linked to all the business partner contact records in the system.
     * Retrieves workplace address records linked to business partner contact.
     */
    async aBPContactToAddressGetRaw(requestParameters: ABPContactToAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPContactToAddressType>> {
        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPContactToAddressTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the workplace address records linked to all the business partner contact records in the system.
     * Retrieves workplace address records linked to business partner contact.
     */
    async aBPContactToAddressGet(requestParameters: ABPContactToAddressGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPContactToAddressType> {
        const response = await this.aBPContactToAddressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add new entity to A_BPContactToAddress
     */
    async aBPContactToAddressPostRaw(requestParameters: ABPContactToAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPContactToAddressType>> {
        if (requestParameters.aPIBUSINESSPARTNERABPContactToAddressTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPContactToAddressTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPContactToAddressTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPContactToAddressTypeCreate was null or undefined when calling aBPContactToAddressPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPContactToAddressTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPContactToAddressTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPContactToAddressTypeFromJSON(jsonValue));
    }

    /**
     * Add new entity to A_BPContactToAddress
     */
    async aBPContactToAddressPost(requestParameters: ABPContactToAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPContactToAddressType> {
        const response = await this.aBPContactToAddressPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves workplace address record by RelationshipNumber, BusinessPartnerCompany, BusinessPartnerPerson and ValidityEndDate.
     * Retrieves contact person workplace address record by using key fields.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGetRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPContactToAddressType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGet.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGet.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGet.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPContactToAddressTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves workplace address record by RelationshipNumber, BusinessPartnerCompany, BusinessPartnerPerson and ValidityEndDate.
     * Retrieves contact person workplace address record by using key fields.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGet(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPContactToAddressType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update entity in A_BPContactToAddress
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDPatchRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDPatch.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDPatch.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDPatch.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDPatch.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDPatch.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPContactToAddressTypeUpdate === null || requestParameters.aPIBUSINESSPARTNERABPContactToAddressTypeUpdate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPContactToAddressTypeUpdate','Required parameter requestParameters.aPIBUSINESSPARTNERABPContactToAddressTypeUpdate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPContactToAddressTypeUpdateToJSON(requestParameters.aPIBUSINESSPARTNERABPContactToAddressTypeUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update entity in A_BPContactToAddress
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDPatch(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all the email address data linked to all business partner address records in the system.
     * Retrieves email address data linked to business partner address fields.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGetRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressEmailAddressType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGet.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGet.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGet.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_EmailAddress`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressEmailAddressTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the email address data linked to all business partner address records in the system.
     * Retrieves email address data linked to business partner address fields.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGet(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressEmailAddressType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new email address data for the existing business partner address record. Multiple emails can be linked to an address record.
     * Creates a new email address data for the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressPostRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressEmailAddressType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressPost.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressPost.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressPost.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressEmailAddressTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressEmailAddressTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressEmailAddressTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressEmailAddressTypeCreate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_EmailAddress`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressEmailAddressTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressEmailAddressTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressEmailAddressTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new email address data for the existing business partner address record. Multiple emails can be linked to an address record.
     * Creates a new email address data for the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressPost(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressEmailAddressType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the fax address data linked to all the business partner address records in the system
     * Retrieves fax address data linked to business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressFaxNumberType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGet.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGet.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGet.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_FaxNumber`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressFaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the fax address data linked to all the business partner address records in the system
     * Retrieves fax address data linked to business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGet(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressFaxNumberType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new fax address record for the existing business partner address record. Multiple fax can be linked to an address record.
     * Creates a new fax address data for the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPostRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressFaxNumberType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPost.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPost.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPost.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_FaxNumber`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressFaxNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressFaxNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressFaxNumberTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new fax address record for the existing business partner address record. Multiple fax can be linked to an address record.
     * Creates a new fax address data for the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPost(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressFaxNumberType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressPhoneNumberType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGet.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGet.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGet.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_MobilePhoneNumber`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGet(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressPhoneNumberType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPostRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressPhoneNumberType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_MobilePhoneNumber`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPost(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressPhoneNumberType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressPhoneNumberType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGet.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGet.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGet.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_PhoneNumber`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the mobile/telephone address records linked to all the business partner address records in the system.
     * Retrieves mobile/telephone address records linked to business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGet(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressPhoneNumberType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPostRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressPhoneNumberType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPost.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPost.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPost.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_PhoneNumber`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressPhoneNumberTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressPhoneNumberTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressPhoneNumberTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new mobile/telephone record for the existing business partner address records. Multiple records can be linked to an address.
     * Creates a new  mobile/telephone address record for the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPost(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressPhoneNumberType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the home page URL address records linked to all business partner address records in the system.
     * Retrieves home page URL address records linked to business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfAAddressHomePageURLType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGet.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGet.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGet.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGet.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_URLAddress`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfAAddressHomePageURLTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the home page URL address records linked to all business partner address records in the system.
     * Retrieves home page URL address records linked to business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGet(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfAAddressHomePageURLType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new home page URL to the existing business partner address record. Multiple URLs can be linked to an address record.
     * Creates a new home page URL address record to the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPostRaw(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERAAddressHomePageURLType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPost.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPost.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPost.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPost.');
        }

        if (requestParameters.addressID === null || requestParameters.addressID === undefined) {
            throw new runtime.RequiredError('addressID','Required parameter requestParameters.addressID was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate === null || requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate was null or undefined when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BPContactToAddress(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate},AddressID='{AddressID}')/to_URLAddress`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))).replace(`{${"AddressID"}}`, encodeURIComponent(String(requestParameters.addressID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERAAddressHomePageURLTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERAAddressHomePageURLTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERAAddressHomePageURLTypeFromJSON(jsonValue));
    }

    /**
     * Adds a new home page URL to the existing business partner address record. Multiple URLs can be linked to an address record.
     * Creates a new home page URL address record to the existing business partner address.
     */
    async aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPost(requestParameters: ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERAAddressHomePageURLType> {
        const response = await this.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the workplace address records linked to all the business partner contact records in the system.
     * Retrieves workplace address records linked to business partner contact.
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetRaw(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionOfABPContactToAddressType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGet.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGet.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGet.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$orderby) {
            queryParameters['$orderby'] = Array.from(requestParameters.$orderby).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$select) {
            queryParameters['$select'] = Array.from(requestParameters.$select).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.$expand) {
            queryParameters['$expand'] = Array.from(requestParameters.$expand).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerContact(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate})/to_ContactAddress`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionOfABPContactToAddressTypeFromJSON(jsonValue));
    }

    /**
     * Retrieves all the workplace address records linked to all the business partner contact records in the system.
     * Retrieves workplace address records linked to business partner contact.
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGet(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionOfABPContactToAddressType> {
        const response = await this.aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add new entity to related to_ContactAddress
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPostRaw(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIBUSINESSPARTNERABPContactToAddressType>> {
        if (requestParameters.relationshipNumber === null || requestParameters.relationshipNumber === undefined) {
            throw new runtime.RequiredError('relationshipNumber','Required parameter requestParameters.relationshipNumber was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPost.');
        }

        if (requestParameters.businessPartnerCompany === null || requestParameters.businessPartnerCompany === undefined) {
            throw new runtime.RequiredError('businessPartnerCompany','Required parameter requestParameters.businessPartnerCompany was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPost.');
        }

        if (requestParameters.businessPartnerPerson === null || requestParameters.businessPartnerPerson === undefined) {
            throw new runtime.RequiredError('businessPartnerPerson','Required parameter requestParameters.businessPartnerPerson was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPost.');
        }

        if (requestParameters.validityEndDate === null || requestParameters.validityEndDate === undefined) {
            throw new runtime.RequiredError('validityEndDate','Required parameter requestParameters.validityEndDate was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPost.');
        }

        if (requestParameters.aPIBUSINESSPARTNERABPContactToAddressTypeCreate === null || requestParameters.aPIBUSINESSPARTNERABPContactToAddressTypeCreate === undefined) {
            throw new runtime.RequiredError('aPIBUSINESSPARTNERABPContactToAddressTypeCreate','Required parameter requestParameters.aPIBUSINESSPARTNERABPContactToAddressTypeCreate was null or undefined when calling aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2Auth", ["API_BUSINESS_PARTNER_0001"]);
        }

        const response = await this.request({
            path: `/A_BusinessPartnerContact(RelationshipNumber='{RelationshipNumber}',BusinessPartnerCompany='{BusinessPartnerCompany}',BusinessPartnerPerson='{BusinessPartnerPerson}',ValidityEndDate={ValidityEndDate})/to_ContactAddress`.replace(`{${"RelationshipNumber"}}`, encodeURIComponent(String(requestParameters.relationshipNumber))).replace(`{${"BusinessPartnerCompany"}}`, encodeURIComponent(String(requestParameters.businessPartnerCompany))).replace(`{${"BusinessPartnerPerson"}}`, encodeURIComponent(String(requestParameters.businessPartnerPerson))).replace(`{${"ValidityEndDate"}}`, encodeURIComponent(String(requestParameters.validityEndDate))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIBUSINESSPARTNERABPContactToAddressTypeCreateToJSON(requestParameters.aPIBUSINESSPARTNERABPContactToAddressTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIBUSINESSPARTNERABPContactToAddressTypeFromJSON(jsonValue));
    }

    /**
     * Add new entity to related to_ContactAddress
     */
    async aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPost(requestParameters: ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIBUSINESSPARTNERABPContactToAddressType> {
        const response = await this.aBusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ABPContactToAddressGetOrderbyEnum = {
    RelationshipNumber: 'RelationshipNumber',
    RelationshipNumberDesc: 'RelationshipNumber desc',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerCompanyDesc: 'BusinessPartnerCompany desc',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    BusinessPartnerPersonDesc: 'BusinessPartnerPerson desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    AddressNumber: 'AddressNumber',
    AddressNumberDesc: 'AddressNumber desc',
    AdditionalStreetPrefixName: 'AdditionalStreetPrefixName',
    AdditionalStreetPrefixNameDesc: 'AdditionalStreetPrefixName desc',
    AdditionalStreetSuffixName: 'AdditionalStreetSuffixName',
    AdditionalStreetSuffixNameDesc: 'AdditionalStreetSuffixName desc',
    AddressTimeZone: 'AddressTimeZone',
    AddressTimeZoneDesc: 'AddressTimeZone desc',
    CareOfName: 'CareOfName',
    CareOfNameDesc: 'CareOfName desc',
    CityCode: 'CityCode',
    CityCodeDesc: 'CityCode desc',
    CityName: 'CityName',
    CityNameDesc: 'CityName desc',
    CompanyPostalCode: 'CompanyPostalCode',
    CompanyPostalCodeDesc: 'CompanyPostalCode desc',
    Country: 'Country',
    CountryDesc: 'Country desc',
    County: 'County',
    CountyDesc: 'County desc',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceNumberDesc: 'DeliveryServiceNumber desc',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    DeliveryServiceTypeCodeDesc: 'DeliveryServiceTypeCode desc',
    District: 'District',
    DistrictDesc: 'District desc',
    FormOfAddress: 'FormOfAddress',
    FormOfAddressDesc: 'FormOfAddress desc',
    FullName: 'FullName',
    FullNameDesc: 'FullName desc',
    HomeCityName: 'HomeCityName',
    HomeCityNameDesc: 'HomeCityName desc',
    HouseNumber: 'HouseNumber',
    HouseNumberDesc: 'HouseNumber desc',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    HouseNumberSupplementTextDesc: 'HouseNumberSupplementText desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    PoBox: 'POBox',
    PoBoxDesc: 'POBox desc',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCityNameDesc: 'POBoxDeviatingCityName desc',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingCountryDesc: 'POBoxDeviatingCountry desc',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxDeviatingRegionDesc: 'POBoxDeviatingRegion desc',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxIsWithoutNumberDesc: 'POBoxIsWithoutNumber desc',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxLobbyNameDesc: 'POBoxLobbyName desc',
    PoBoxPostalCode: 'POBoxPostalCode',
    PoBoxPostalCodeDesc: 'POBoxPostalCode desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    PostalCode: 'PostalCode',
    PostalCodeDesc: 'PostalCode desc',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    PrfrdCommMediumTypeDesc: 'PrfrdCommMediumType desc',
    Region: 'Region',
    RegionDesc: 'Region desc',
    StreetName: 'StreetName',
    StreetNameDesc: 'StreetName desc',
    StreetPrefixName: 'StreetPrefixName',
    StreetPrefixNameDesc: 'StreetPrefixName desc',
    StreetSuffixName: 'StreetSuffixName',
    StreetSuffixNameDesc: 'StreetSuffixName desc',
    TaxJurisdiction: 'TaxJurisdiction',
    TaxJurisdictionDesc: 'TaxJurisdiction desc',
    TransportZone: 'TransportZone',
    TransportZoneDesc: 'TransportZone desc',
    AddressRepresentationCode: 'AddressRepresentationCode',
    AddressRepresentationCodeDesc: 'AddressRepresentationCode desc',
    ContactPersonBuilding: 'ContactPersonBuilding',
    ContactPersonBuildingDesc: 'ContactPersonBuilding desc',
    ContactPersonPrfrdCommMedium: 'ContactPersonPrfrdCommMedium',
    ContactPersonPrfrdCommMediumDesc: 'ContactPersonPrfrdCommMedium desc',
    ContactRelationshipDepartment: 'ContactRelationshipDepartment',
    ContactRelationshipDepartmentDesc: 'ContactRelationshipDepartment desc',
    ContactRelationshipFunction: 'ContactRelationshipFunction',
    ContactRelationshipFunctionDesc: 'ContactRelationshipFunction desc',
    CorrespondenceShortName: 'CorrespondenceShortName',
    CorrespondenceShortNameDesc: 'CorrespondenceShortName desc',
    Floor: 'Floor',
    FloorDesc: 'Floor desc',
    InhouseMail: 'InhouseMail',
    InhouseMailDesc: 'InhouseMail desc',
    IsDefaultAddress: 'IsDefaultAddress',
    IsDefaultAddressDesc: 'IsDefaultAddress desc',
    RoomNumber: 'RoomNumber',
    RoomNumberDesc: 'RoomNumber desc'
} as const;
export type ABPContactToAddressGetOrderbyEnum = typeof ABPContactToAddressGetOrderbyEnum[keyof typeof ABPContactToAddressGetOrderbyEnum];
/**
 * @export
 */
export const ABPContactToAddressGetSelectEnum = {
    RelationshipNumber: 'RelationshipNumber',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    ValidityEndDate: 'ValidityEndDate',
    AddressId: 'AddressID',
    AddressNumber: 'AddressNumber',
    AdditionalStreetPrefixName: 'AdditionalStreetPrefixName',
    AdditionalStreetSuffixName: 'AdditionalStreetSuffixName',
    AddressTimeZone: 'AddressTimeZone',
    CareOfName: 'CareOfName',
    CityCode: 'CityCode',
    CityName: 'CityName',
    CompanyPostalCode: 'CompanyPostalCode',
    Country: 'Country',
    County: 'County',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    District: 'District',
    FormOfAddress: 'FormOfAddress',
    FullName: 'FullName',
    HomeCityName: 'HomeCityName',
    HouseNumber: 'HouseNumber',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    Language: 'Language',
    PoBox: 'POBox',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxPostalCode: 'POBoxPostalCode',
    Person: 'Person',
    PostalCode: 'PostalCode',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    Region: 'Region',
    StreetName: 'StreetName',
    StreetPrefixName: 'StreetPrefixName',
    StreetSuffixName: 'StreetSuffixName',
    TaxJurisdiction: 'TaxJurisdiction',
    TransportZone: 'TransportZone',
    AddressRepresentationCode: 'AddressRepresentationCode',
    ContactPersonBuilding: 'ContactPersonBuilding',
    ContactPersonPrfrdCommMedium: 'ContactPersonPrfrdCommMedium',
    ContactRelationshipDepartment: 'ContactRelationshipDepartment',
    ContactRelationshipFunction: 'ContactRelationshipFunction',
    CorrespondenceShortName: 'CorrespondenceShortName',
    Floor: 'Floor',
    InhouseMail: 'InhouseMail',
    IsDefaultAddress: 'IsDefaultAddress',
    RoomNumber: 'RoomNumber'
} as const;
export type ABPContactToAddressGetSelectEnum = typeof ABPContactToAddressGetSelectEnum[keyof typeof ABPContactToAddressGetSelectEnum];
/**
 * @export
 */
export const ABPContactToAddressGetExpandEnum = {
    Star: '*',
    ToEmailAddress: 'to_EmailAddress',
    ToFaxNumber: 'to_FaxNumber',
    ToMobilePhoneNumber: 'to_MobilePhoneNumber',
    ToPhoneNumber: 'to_PhoneNumber',
    ToUrlAddress: 'to_URLAddress'
} as const;
export type ABPContactToAddressGetExpandEnum = typeof ABPContactToAddressGetExpandEnum[keyof typeof ABPContactToAddressGetExpandEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGetSelectEnum = {
    RelationshipNumber: 'RelationshipNumber',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    ValidityEndDate: 'ValidityEndDate',
    AddressId: 'AddressID',
    AddressNumber: 'AddressNumber',
    AdditionalStreetPrefixName: 'AdditionalStreetPrefixName',
    AdditionalStreetSuffixName: 'AdditionalStreetSuffixName',
    AddressTimeZone: 'AddressTimeZone',
    CareOfName: 'CareOfName',
    CityCode: 'CityCode',
    CityName: 'CityName',
    CompanyPostalCode: 'CompanyPostalCode',
    Country: 'Country',
    County: 'County',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    District: 'District',
    FormOfAddress: 'FormOfAddress',
    FullName: 'FullName',
    HomeCityName: 'HomeCityName',
    HouseNumber: 'HouseNumber',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    Language: 'Language',
    PoBox: 'POBox',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxPostalCode: 'POBoxPostalCode',
    Person: 'Person',
    PostalCode: 'PostalCode',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    Region: 'Region',
    StreetName: 'StreetName',
    StreetPrefixName: 'StreetPrefixName',
    StreetSuffixName: 'StreetSuffixName',
    TaxJurisdiction: 'TaxJurisdiction',
    TransportZone: 'TransportZone',
    AddressRepresentationCode: 'AddressRepresentationCode',
    ContactPersonBuilding: 'ContactPersonBuilding',
    ContactPersonPrfrdCommMedium: 'ContactPersonPrfrdCommMedium',
    ContactRelationshipDepartment: 'ContactRelationshipDepartment',
    ContactRelationshipFunction: 'ContactRelationshipFunction',
    CorrespondenceShortName: 'CorrespondenceShortName',
    Floor: 'Floor',
    InhouseMail: 'InhouseMail',
    IsDefaultAddress: 'IsDefaultAddress',
    RoomNumber: 'RoomNumber'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGetSelectEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGetSelectEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGetSelectEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGetExpandEnum = {
    Star: '*',
    ToEmailAddress: 'to_EmailAddress',
    ToFaxNumber: 'to_FaxNumber',
    ToMobilePhoneNumber: 'to_MobilePhoneNumber',
    ToPhoneNumber: 'to_PhoneNumber',
    ToUrlAddress: 'to_URLAddress'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGetExpandEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGetExpandEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDGetExpandEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    IsDefaultEmailAddress: 'IsDefaultEmailAddress',
    IsDefaultEmailAddressDesc: 'IsDefaultEmailAddress desc',
    EmailAddress: 'EmailAddress',
    EmailAddressDesc: 'EmailAddress desc',
    SearchEmailAddress: 'SearchEmailAddress',
    SearchEmailAddressDesc: 'SearchEmailAddress desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGetOrderbyEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGetOrderbyEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGetOrderbyEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    IsDefaultEmailAddress: 'IsDefaultEmailAddress',
    EmailAddress: 'EmailAddress',
    SearchEmailAddress: 'SearchEmailAddress',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGetSelectEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGetSelectEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToEmailAddressGetSelectEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    IsDefaultFaxNumber: 'IsDefaultFaxNumber',
    IsDefaultFaxNumberDesc: 'IsDefaultFaxNumber desc',
    FaxCountry: 'FaxCountry',
    FaxCountryDesc: 'FaxCountry desc',
    FaxNumber: 'FaxNumber',
    FaxNumberDesc: 'FaxNumber desc',
    FaxNumberExtension: 'FaxNumberExtension',
    FaxNumberExtensionDesc: 'FaxNumberExtension desc',
    InternationalFaxNumber: 'InternationalFaxNumber',
    InternationalFaxNumberDesc: 'InternationalFaxNumber desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetOrderbyEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetOrderbyEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetOrderbyEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    IsDefaultFaxNumber: 'IsDefaultFaxNumber',
    FaxCountry: 'FaxCountry',
    FaxNumber: 'FaxNumber',
    FaxNumberExtension: 'FaxNumberExtension',
    InternationalFaxNumber: 'InternationalFaxNumber',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetSelectEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetSelectEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToFaxNumberGetSelectEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    DestinationLocationCountry: 'DestinationLocationCountry',
    DestinationLocationCountryDesc: 'DestinationLocationCountry desc',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    IsDefaultPhoneNumberDesc: 'IsDefaultPhoneNumber desc',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberDesc: 'PhoneNumber desc',
    PhoneNumberExtension: 'PhoneNumberExtension',
    PhoneNumberExtensionDesc: 'PhoneNumberExtension desc',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    InternationalPhoneNumberDesc: 'InternationalPhoneNumber desc',
    PhoneNumberType: 'PhoneNumberType',
    PhoneNumberTypeDesc: 'PhoneNumberType desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetOrderbyEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    DestinationLocationCountry: 'DestinationLocationCountry',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberExtension: 'PhoneNumberExtension',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    PhoneNumberType: 'PhoneNumberType',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetSelectEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetSelectEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToMobilePhoneNumberGetSelectEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    DestinationLocationCountry: 'DestinationLocationCountry',
    DestinationLocationCountryDesc: 'DestinationLocationCountry desc',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    IsDefaultPhoneNumberDesc: 'IsDefaultPhoneNumber desc',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberDesc: 'PhoneNumber desc',
    PhoneNumberExtension: 'PhoneNumberExtension',
    PhoneNumberExtensionDesc: 'PhoneNumberExtension desc',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    InternationalPhoneNumberDesc: 'InternationalPhoneNumber desc',
    PhoneNumberType: 'PhoneNumberType',
    PhoneNumberTypeDesc: 'PhoneNumberType desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetOrderbyEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetOrderbyEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetOrderbyEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    DestinationLocationCountry: 'DestinationLocationCountry',
    IsDefaultPhoneNumber: 'IsDefaultPhoneNumber',
    PhoneNumber: 'PhoneNumber',
    PhoneNumberExtension: 'PhoneNumberExtension',
    InternationalPhoneNumber: 'InternationalPhoneNumber',
    PhoneNumberType: 'PhoneNumberType',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetSelectEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetSelectEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToPhoneNumberGetSelectEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetOrderbyEnum = {
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    OrdinalNumber: 'OrdinalNumber',
    OrdinalNumberDesc: 'OrdinalNumber desc',
    ValidityStartDate: 'ValidityStartDate',
    ValidityStartDateDesc: 'ValidityStartDate desc',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    IsDefaultUrlAddressDesc: 'IsDefaultURLAddress desc',
    SearchUrlAddress: 'SearchURLAddress',
    SearchUrlAddressDesc: 'SearchURLAddress desc',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    AddressCommunicationRemarkTextDesc: 'AddressCommunicationRemarkText desc',
    UrlFieldLength: 'URLFieldLength',
    UrlFieldLengthDesc: 'URLFieldLength desc',
    WebsiteUrl: 'WebsiteURL',
    WebsiteUrlDesc: 'WebsiteURL desc'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetOrderbyEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetOrderbyEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetOrderbyEnum];
/**
 * @export
 */
export const ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetSelectEnum = {
    AddressId: 'AddressID',
    Person: 'Person',
    OrdinalNumber: 'OrdinalNumber',
    ValidityStartDate: 'ValidityStartDate',
    IsDefaultUrlAddress: 'IsDefaultURLAddress',
    SearchUrlAddress: 'SearchURLAddress',
    AddressCommunicationRemarkText: 'AddressCommunicationRemarkText',
    UrlFieldLength: 'URLFieldLength',
    WebsiteUrl: 'WebsiteURL'
} as const;
export type ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetSelectEnum = typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetSelectEnum[keyof typeof ABPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateAddressIDAddressIDToURLAddressGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetOrderbyEnum = {
    RelationshipNumber: 'RelationshipNumber',
    RelationshipNumberDesc: 'RelationshipNumber desc',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerCompanyDesc: 'BusinessPartnerCompany desc',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    BusinessPartnerPersonDesc: 'BusinessPartnerPerson desc',
    ValidityEndDate: 'ValidityEndDate',
    ValidityEndDateDesc: 'ValidityEndDate desc',
    AddressId: 'AddressID',
    AddressIdDesc: 'AddressID desc',
    AddressNumber: 'AddressNumber',
    AddressNumberDesc: 'AddressNumber desc',
    AdditionalStreetPrefixName: 'AdditionalStreetPrefixName',
    AdditionalStreetPrefixNameDesc: 'AdditionalStreetPrefixName desc',
    AdditionalStreetSuffixName: 'AdditionalStreetSuffixName',
    AdditionalStreetSuffixNameDesc: 'AdditionalStreetSuffixName desc',
    AddressTimeZone: 'AddressTimeZone',
    AddressTimeZoneDesc: 'AddressTimeZone desc',
    CareOfName: 'CareOfName',
    CareOfNameDesc: 'CareOfName desc',
    CityCode: 'CityCode',
    CityCodeDesc: 'CityCode desc',
    CityName: 'CityName',
    CityNameDesc: 'CityName desc',
    CompanyPostalCode: 'CompanyPostalCode',
    CompanyPostalCodeDesc: 'CompanyPostalCode desc',
    Country: 'Country',
    CountryDesc: 'Country desc',
    County: 'County',
    CountyDesc: 'County desc',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceNumberDesc: 'DeliveryServiceNumber desc',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    DeliveryServiceTypeCodeDesc: 'DeliveryServiceTypeCode desc',
    District: 'District',
    DistrictDesc: 'District desc',
    FormOfAddress: 'FormOfAddress',
    FormOfAddressDesc: 'FormOfAddress desc',
    FullName: 'FullName',
    FullNameDesc: 'FullName desc',
    HomeCityName: 'HomeCityName',
    HomeCityNameDesc: 'HomeCityName desc',
    HouseNumber: 'HouseNumber',
    HouseNumberDesc: 'HouseNumber desc',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    HouseNumberSupplementTextDesc: 'HouseNumberSupplementText desc',
    Language: 'Language',
    LanguageDesc: 'Language desc',
    PoBox: 'POBox',
    PoBoxDesc: 'POBox desc',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCityNameDesc: 'POBoxDeviatingCityName desc',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingCountryDesc: 'POBoxDeviatingCountry desc',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxDeviatingRegionDesc: 'POBoxDeviatingRegion desc',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxIsWithoutNumberDesc: 'POBoxIsWithoutNumber desc',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxLobbyNameDesc: 'POBoxLobbyName desc',
    PoBoxPostalCode: 'POBoxPostalCode',
    PoBoxPostalCodeDesc: 'POBoxPostalCode desc',
    Person: 'Person',
    PersonDesc: 'Person desc',
    PostalCode: 'PostalCode',
    PostalCodeDesc: 'PostalCode desc',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    PrfrdCommMediumTypeDesc: 'PrfrdCommMediumType desc',
    Region: 'Region',
    RegionDesc: 'Region desc',
    StreetName: 'StreetName',
    StreetNameDesc: 'StreetName desc',
    StreetPrefixName: 'StreetPrefixName',
    StreetPrefixNameDesc: 'StreetPrefixName desc',
    StreetSuffixName: 'StreetSuffixName',
    StreetSuffixNameDesc: 'StreetSuffixName desc',
    TaxJurisdiction: 'TaxJurisdiction',
    TaxJurisdictionDesc: 'TaxJurisdiction desc',
    TransportZone: 'TransportZone',
    TransportZoneDesc: 'TransportZone desc',
    AddressRepresentationCode: 'AddressRepresentationCode',
    AddressRepresentationCodeDesc: 'AddressRepresentationCode desc',
    ContactPersonBuilding: 'ContactPersonBuilding',
    ContactPersonBuildingDesc: 'ContactPersonBuilding desc',
    ContactPersonPrfrdCommMedium: 'ContactPersonPrfrdCommMedium',
    ContactPersonPrfrdCommMediumDesc: 'ContactPersonPrfrdCommMedium desc',
    ContactRelationshipDepartment: 'ContactRelationshipDepartment',
    ContactRelationshipDepartmentDesc: 'ContactRelationshipDepartment desc',
    ContactRelationshipFunction: 'ContactRelationshipFunction',
    ContactRelationshipFunctionDesc: 'ContactRelationshipFunction desc',
    CorrespondenceShortName: 'CorrespondenceShortName',
    CorrespondenceShortNameDesc: 'CorrespondenceShortName desc',
    Floor: 'Floor',
    FloorDesc: 'Floor desc',
    InhouseMail: 'InhouseMail',
    InhouseMailDesc: 'InhouseMail desc',
    IsDefaultAddress: 'IsDefaultAddress',
    IsDefaultAddressDesc: 'IsDefaultAddress desc',
    RoomNumber: 'RoomNumber',
    RoomNumberDesc: 'RoomNumber desc'
} as const;
export type ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetOrderbyEnum = typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetOrderbyEnum[keyof typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetOrderbyEnum];
/**
 * @export
 */
export const ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetSelectEnum = {
    RelationshipNumber: 'RelationshipNumber',
    BusinessPartnerCompany: 'BusinessPartnerCompany',
    BusinessPartnerPerson: 'BusinessPartnerPerson',
    ValidityEndDate: 'ValidityEndDate',
    AddressId: 'AddressID',
    AddressNumber: 'AddressNumber',
    AdditionalStreetPrefixName: 'AdditionalStreetPrefixName',
    AdditionalStreetSuffixName: 'AdditionalStreetSuffixName',
    AddressTimeZone: 'AddressTimeZone',
    CareOfName: 'CareOfName',
    CityCode: 'CityCode',
    CityName: 'CityName',
    CompanyPostalCode: 'CompanyPostalCode',
    Country: 'Country',
    County: 'County',
    DeliveryServiceNumber: 'DeliveryServiceNumber',
    DeliveryServiceTypeCode: 'DeliveryServiceTypeCode',
    District: 'District',
    FormOfAddress: 'FormOfAddress',
    FullName: 'FullName',
    HomeCityName: 'HomeCityName',
    HouseNumber: 'HouseNumber',
    HouseNumberSupplementText: 'HouseNumberSupplementText',
    Language: 'Language',
    PoBox: 'POBox',
    PoBoxDeviatingCityName: 'POBoxDeviatingCityName',
    PoBoxDeviatingCountry: 'POBoxDeviatingCountry',
    PoBoxDeviatingRegion: 'POBoxDeviatingRegion',
    PoBoxIsWithoutNumber: 'POBoxIsWithoutNumber',
    PoBoxLobbyName: 'POBoxLobbyName',
    PoBoxPostalCode: 'POBoxPostalCode',
    Person: 'Person',
    PostalCode: 'PostalCode',
    PrfrdCommMediumType: 'PrfrdCommMediumType',
    Region: 'Region',
    StreetName: 'StreetName',
    StreetPrefixName: 'StreetPrefixName',
    StreetSuffixName: 'StreetSuffixName',
    TaxJurisdiction: 'TaxJurisdiction',
    TransportZone: 'TransportZone',
    AddressRepresentationCode: 'AddressRepresentationCode',
    ContactPersonBuilding: 'ContactPersonBuilding',
    ContactPersonPrfrdCommMedium: 'ContactPersonPrfrdCommMedium',
    ContactRelationshipDepartment: 'ContactRelationshipDepartment',
    ContactRelationshipFunction: 'ContactRelationshipFunction',
    CorrespondenceShortName: 'CorrespondenceShortName',
    Floor: 'Floor',
    InhouseMail: 'InhouseMail',
    IsDefaultAddress: 'IsDefaultAddress',
    RoomNumber: 'RoomNumber'
} as const;
export type ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetSelectEnum = typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetSelectEnum[keyof typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetSelectEnum];
/**
 * @export
 */
export const ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetExpandEnum = {
    Star: '*',
    ToEmailAddress: 'to_EmailAddress',
    ToFaxNumber: 'to_FaxNumber',
    ToMobilePhoneNumber: 'to_MobilePhoneNumber',
    ToPhoneNumber: 'to_PhoneNumber',
    ToUrlAddress: 'to_URLAddress'
} as const;
export type ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetExpandEnum = typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetExpandEnum[keyof typeof ABusinessPartnerContactRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDateValidityEndDateToContactAddressGetExpandEnum];
